{"version":3,"sources":["../node_modules/lodash/keyBy.js","../node_modules/lodash/_createAggregator.js","../node_modules/lodash/_arrayAggregator.js","../node_modules/lodash/_baseAggregator.js","../node_modules/lodash/_baseAssignValue.js","../node_modules/@coreui/coreui-plugin-chartjs-custom-tooltips/dist/umd/custom-tooltips.js","../node_modules/lodash/toNumber.js","../node_modules/lodash/_defineProperty.js","../node_modules/lodash/toInteger.js","../node_modules/lodash/toFinite.js","../node_modules/lodash/_baseEach.js","../node_modules/lodash/_baseFindIndex.js","../node_modules/lodash/_createBaseEach.js","../node_modules/lodash/findIndex.js","../node_modules/lodash/find.js","../node_modules/lodash/isEqual.js","../node_modules/react-chartjs-2/es/index.js","../node_modules/lodash/_createFind.js","../node_modules/chart.js/dist/Chart.js"],"names":["baseAssignValue","__webpack_require__","keyBy","createAggregator","result","value","key","module","exports","arrayAggregator","baseAggregator","baseIteratee","isArray","setter","initializer","collection","iteratee","func","accumulator","array","index","length","baseEach","defineProperty","object","configurable","enumerable","writable","CustomTooltips","tooltipModel","_this","this","ClassName","ABOVE","BELOW","CHARTJS_TOOLTIP","NO_TRANSFORM","TOOLTIP_BODY","TOOLTIP_BODY_ITEM","TOOLTIP_BODY_ITEM_COLOR","TOOLTIP_BODY_ITEM_LABEL","TOOLTIP_BODY_ITEM_VALUE","TOOLTIP_HEADER","TOOLTIP_HEADER_ITEM","Selector","DIV","SPAN","TOOLTIP","_chart","canvas","id","_idMaker","Math","random","toString","_canvasId","_setCanvasId","tooltip","document","getElementById","createElement","className","parentNode","appendChild","opacity","classList","remove","yAlign","add","body","titleLines","title","tooltipHeader","forEach","tooltipHeaderTitle","innerHTML","tooltipBody","tooltipBodyItems","map","item","lines","i","tooltipBodyItem","colors","labelColors","tooltipBodyItemColor","style","backgroundColor","split","tooltipBodyItemLabel","tooltipBodyItemValue","pop","_tooltipBodyItemValue","positionY","offsetTop","positionX","offsetLeft","left","caretX","top","caretY","Object","factory","isObject","isSymbol","NAN","reTrim","reIsBadHex","reIsBinary","reIsOctal","freeParseInt","parseInt","other","valueOf","replace","isBinary","test","slice","getNative","e","toFinite","remainder","toNumber","INFINITY","MAX_INTEGER","baseForOwn","createBaseEach","predicate","fromIndex","fromRight","isArrayLike","eachFunc","iterable","baseFindIndex","toInteger","nativeMax","max","find","createFind","baseIsEqual","process","d","__webpack_exports__","Doughnut","Pie","Line","Bar","Radar","Polar","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","prop_types__WEBPACK_IMPORTED_MODULE_1__","prop_types__WEBPACK_IMPORTED_MODULE_1___default","chart_js__WEBPACK_IMPORTED_MODULE_2__","chart_js__WEBPACK_IMPORTED_MODULE_2___default","lodash_isEqual__WEBPACK_IMPORTED_MODULE_3__","lodash_isEqual__WEBPACK_IMPORTED_MODULE_3___default","lodash_keyBy__WEBPACK_IMPORTED_MODULE_5__","lodash_keyBy__WEBPACK_IMPORTED_MODULE_5___default","_extends","assign","target","arguments","source","prototype","hasOwnProperty","call","_objectWithoutProperties","obj","keys","indexOf","_classCallCheck","instance","Constructor","TypeError","_possibleConstructorReturn","self","ReferenceError","_inherits","subClass","superClass","create","constructor","setPrototypeOf","__proto__","NODE_ENV","PUBLIC_URL","ChartComponent","_React$Component","_temp","_len","args","Array","_key","apply","concat","handleOnClick","event","chartInstance","_this$props","props","getDatasetAtEvent","getElementAtEvent","getElementsAtEvent","onElementsClick","ref","element","componentWillMount","undefined","componentDidMount","renderChart","componentDidUpdate","redraw","destroy","updateChart","shouldComponentUpdate","nextProps","_props","type","options","plugins","legend","height","width","nextData","transformDataProp","shadowDataProp","componentWillUnmount","data","memoizeDataProps","datasets","set","checkDatasets","isDev","usingCustomKeyProvider","datasetKeyProvider","getLabelAsKey","multipleDatasets","shouldWarn","dataset","label","console","error","_this2","a","helpers","configMerge","currentDatasets","config","nextDatasets","currentDatasetsIndexed","next","current","splice","point","pid","otherProps","rest","update","_props2","node","defaultProps","render","_props3","onClick","Component","propTypes","oneOfType","isRequired","number","arrayOf","bool","propName","componentName","controllers","Error","display","position","_React$Component2","_this4","_ref","_React$Component3","_this6","_ref2","_React$Component4","_this8","_ref3","_React$Component5","_this10","_ref4","_React$Component6","HorizontalBar","_this12","_ref5","_React$Component7","_this14","_ref6","_React$Component8","_this16","_ref7","_React$Component9","Bubble","_this18","_ref8","_React$Component10","Scatter","_this20","_ref9","defaults","findIndexFunc","moment","conversions","rgb2hsl","rgb2hsv","rgb2hwb","rgb2cmyk","rgb2keyword","rgb2xyz","rgb2lab","rgb2lch","lab2lch","hsl2rgb","hsl2hsv","hsl","h","s","l","hsl2hwb","hsl2cmyk","hsl2keyword","hsv2rgb","hsv2hsl","hsv","sl","v","hsv2hwb","hsv2cmyk","hsv2keyword","hwb2rgb","hwb2hsl","hwb2hsv","hwb2cmyk","hwb2keyword","cmyk2rgb","cmyk2hsl","cmyk2hsv","cmyk2hwb","cmyk2keyword","keyword2rgb","keyword2hsl","keyword2hsv","keyword2hwb","keyword2cmyk","keyword2lab","keyword2xyz","xyz2rgb","xyz2lab","xyz2lch","lab2xyz","lab2rgb","lch2lab","lch2xyz","lch2rgb","rgb","r","g","b","min","delta","w","k","reverseKeywords","JSON","stringify","pow","x","y","z","xyz","t1","t2","t3","val","hi","floor","f","p","q","t","hwb","wh","bl","ratio","cmyk","c","m","lab","y2","hr","atan2","PI","sqrt","lch","cos","sin","keyword","cssKeywords","aliceblue","antiquewhite","aqua","aquamarine","azure","beige","bisque","black","blanchedalmond","blue","blueviolet","brown","burlywood","cadetblue","chartreuse","chocolate","coral","cornflowerblue","cornsilk","crimson","cyan","darkblue","darkcyan","darkgoldenrod","darkgray","darkgreen","darkgrey","darkkhaki","darkmagenta","darkolivegreen","darkorange","darkorchid","darkred","darksalmon","darkseagreen","darkslateblue","darkslategray","darkslategrey","darkturquoise","darkviolet","deeppink","deepskyblue","dimgray","dimgrey","dodgerblue","firebrick","floralwhite","forestgreen","fuchsia","gainsboro","ghostwhite","gold","goldenrod","gray","green","greenyellow","grey","honeydew","hotpink","indianred","indigo","ivory","khaki","lavender","lavenderblush","lawngreen","lemonchiffon","lightblue","lightcoral","lightcyan","lightgoldenrodyellow","lightgray","lightgreen","lightgrey","lightpink","lightsalmon","lightseagreen","lightskyblue","lightslategray","lightslategrey","lightsteelblue","lightyellow","lime","limegreen","linen","magenta","maroon","mediumaquamarine","mediumblue","mediumorchid","mediumpurple","mediumseagreen","mediumslateblue","mediumspringgreen","mediumturquoise","mediumvioletred","midnightblue","mintcream","mistyrose","moccasin","navajowhite","navy","oldlace","olive","olivedrab","orange","orangered","orchid","palegoldenrod","palegreen","paleturquoise","palevioletred","papayawhip","peachpuff","peru","pink","plum","powderblue","purple","rebeccapurple","red","rosybrown","royalblue","saddlebrown","salmon","sandybrown","seagreen","seashell","sienna","silver","skyblue","slateblue","slategray","slategrey","snow","springgreen","steelblue","tan","teal","thistle","tomato","turquoise","violet","wheat","white","whitesmoke","yellow","yellowgreen","convert","Converter","arg","pair","exec","from","to","round","convs","routeSpace","space","values","getValues","setValues","vals","fspace","colorConvert","colorName","colorString","getRgba","getHsla","getRgb","string","rgba","getHsl","hsla","getHwb","getAlpha","hexString","hexDouble","rgbString","alpha","rgbaString","percentString","percentaString","hslString","hslaString","hwbString","reverseNames","match","hexAlpha","parseFloat","scale","isNaN","num","str","toUpperCase","name","Color","valid","lightness","whiteness","isValid","setSpace","rgbArray","hslArray","hsvArray","hwbArray","cmykArray","rgbaArray","hslaArray","setChannel","hue","saturation","saturationv","blackness","rgbNumber","luminosity","lum","chan","contrast","color2","lum1","lum2","level","contrastRatio","dark","light","negate","lighten","darken","saturate","desaturate","whiten","blacken","greyscale","clearer","opaquer","rotate","degrees","mix","mixinColor","weight","w1","w2","toJSON","clone","prop","spaces","maxes","charAt","capped","chans","sname","svalues","window","chartjsColor","noop","uid","isNullOrUndef","substr","isFinite","_isFinite","_x","Number","valueOrDefault","defaultValue","valueAtIndexOrDefault","callback","fn","thisArg","each","loopable","reverse","len","arrayEquals","a0","a1","ilen","v0","v1","klen","_merger","tval","sval","merge","_mergerIf","mergeIf","sources","merger","extend","setFn","inherits","extensions","me","ChartElement","Surrogate","__super__","helpers_core","callCallback","getValueOrDefault","getValueAtIndexOrDefault","effects","linear","easeInQuad","easeOutQuad","easeInOutQuad","easeInCubic","easeOutCubic","easeInOutCubic","easeInQuart","easeOutQuart","easeInOutQuart","easeInQuint","easeOutQuint","easeInOutQuint","easeInSine","easeOutSine","easeInOutSine","easeInExpo","easeOutExpo","easeInOutExpo","easeInCirc","easeOutCirc","easeInOutCirc","easeInElastic","asin","easeOutElastic","easeInOutElastic","easeInBack","easeOutBack","easeInOutBack","easeInBounce","easeOutBounce","easeInOutBounce","helpers_easing","easingEffects","RAD_PER_DEG","DOUBLE_PI","HALF_PI","QUARTER_PI","TWO_THIRDS_PI","exports$1","clear","chart","ctx","clearRect","roundedRect","radius","right","bottom","moveTo","arc","closePath","rect","drawPoint","rotation","xOffset","yOffset","size","cornerRadius","rad","beginPath","lineTo","SQRT1_2","fill","stroke","drawImage","_isPointInArea","area","clipArea","save","clip","unclipArea","restore","previous","flip","stepped","steppedLine","midpoint","tension","bezierCurveTo","controlPointPreviousX","controlPointNextX","controlPointPreviousY","controlPointNextY","helpers_canvas","drawRoundedRectangle","_set","scope","defaultColor","defaultFontColor","defaultFontFamily","defaultFontSize","defaultFontStyle","defaultLineHeight","showLines","core_defaults","helpers_options","toLineHeight","matches","toPadding","_parseFont","globalDefaults","global","fontSize","font","family","fontFamily","lineHeight","fontStyle","toFontString","resolve","inputs","context","helpers$1","easing","Element","configuration","initialize","hidden","pivot","_view","_model","_start","transition","ease","model","start","view","actual","origin","c0","c1","interpolate","tooltipPosition","hasValue","isNumber","core_element","exports$2","currentStep","numSteps","onAnimationProgress","onAnimationComplete","core_animation","get","animation","duration","onProgress","onComplete","core_animations","animations","request","addAnimation","lazy","startTime","Date","now","animating","push","requestAnimationFrame","cancelAnimation","findIndex","requestAnimFrame","startDigest","advance","nextStep","arrayEvents","unlistenArrayEvents","listener","stub","_chartjs","listeners","DatasetController","datasetIndex","datasetElementType","dataElementType","linkScales","addElements","updateIndex","meta","getMeta","getDataset","xAxisID","scales","xAxes","yAxisID","yAxes","getDatasetMeta","getScaleForId","scaleID","_getValueScaleId","_getIndexScaleId","_getValueScale","_getIndexScale","reset","_data","createMetaDataset","_datasetIndex","createMetaData","_index","metaData","addElementAndReset","updateElement","buildOrUpdateElements","isExtensible","method","base","res","resyncElements","easingValue","elements","draw","removeHoverStyle","$previousStyle","setHoverStyle","custom","getHoverColor","borderColor","borderWidth","hoverBackgroundColor","hoverBorderColor","hoverBorderWidth","numMeta","numData","insertElements","count","onDataPush","onDataPop","onDataShift","shift","onDataSplice","onDataUnshift","core_datasetController","borderAlign","element_arc","inLabelRange","mouseX","vm","hoverRadius","inRange","chartX","chartY","pointRelativePosition","getAngleFromPoint","angle","distance","startAngle","endAngle","betweenAngles","withinRadius","innerRadius","outerRadius","getCenterPoint","halfAngle","halfRadius","getArea","centreAngle","rangeFromCentre","angleMargin","sA","eA","pixelMargin","fillStyle","lineWidth","lineJoin","strokeStyle","valueOrDefault$1","line","borderCapStyle","borderDash","borderDashOffset","borderJoinStyle","capBezierPoints","element_line","currentVM","spanGaps","points","_children","globalOptionLineElements","lastDrawnIndex","_loop","lineCap","setLineDash","lineDashOffset","previousItem","skip","valueOrDefault$2","defaultColor$1","xRange","abs","hitRadius","pointStyle","element_point","mouseY","inXRange","inYRange","padding","chartArea","defaultColor$2","isVertical","getBarBounds","x1","x2","y1","half","swap","orig","v2","parseBorderWidth","maxW","maxH","edge","borderSkipped","horizontal","parseBorderSkipped","_inRange","skipX","skipY","bounds","rectangle","element_rectangle","rects","border","outer","inner","boundingRects","fillRect","Arc","Point","Rectangle","resolve$1","hover","mode","categoryPercentage","barPercentage","offset","gridLines","offsetGridLines","controller_bar","stack","bar","_ruler","getRuler","_resolveElementOptions","_xScale","_yScale","datasetLabel","labels","_updateElementGeometry","vscale","getBasePixel","isHorizontal","ruler","vpixels","calculateBarValuePixels","ipixels","calculateBarIndexPixels","head","center","_getStacks","last","stacked","stacks","isDatasetVisible","getStackCount","getStackIndex","stackCount","end","pixels","getPixelForValue","barThickness","prev","curr","ticks","getTicks","getPixelForTick","computeMinSampleSize","imeta","ivalue","getRightValue","minBarLength","controller","range","percent","chunk","computeFlexCategoryTraits","thickness","computeFitCategoryTraits","stackIndex","maxBarThickness","Infinity","dataIndex","valueOrDefault$3","resolve$2","tooltips","callbacks","dataPoint","xLabel","yLabel","controller_bubble","xScale","yScale","dsIndex","getPixelForDecimal","NaN","_options","resolve$3","valueOrDefault$4","animateRotate","animateScale","legendCallback","text","join","generateLabels","ds","arcOpts","bw","legendItem","cutoutPercentage","circumference","tooltipItem","dataLabel","controller_doughnut","getRingIndex","ringIndex","j","opts","availableWidth","availableHeight","minSize","arcs","chartWeight","_getRingWeight","contains0","contains90","contains180","contains270","cutout","getMaxBorderWidth","radiusLength","_getVisibleDatasetWeightTotal","offsetX","offsetY","total","calculateTotal","_getRingWeightOffset","animationOpts","centerX","centerY","calculateCircumference","hoverWidth","ringWeightOffset","dataSetIndex","axis","controller_horizontalBar","valueOrDefault$5","resolve$4","isPointInArea","lineEnabled","showLine","controller_line","lineTension","_scale","_resolveLineOptions","updateBezierControlPoints","lineModel","_resolvePointOptions","calculatePointY","ELEMENT_OPTIONS","elementOptions","dsMeta","sumPos","sumNeg","stackedRightValue","rightValue","controlPoints","capControlPoint","pt","filter","cubicInterpolationMode","splineCurveMonotone","splineCurve","nextItem","halfBorderWidth","resolve$5","angleLines","circular","pointLabels","beginAtZero","controller_polarArea","starts","_starts","angles","_angles","_updateRadius","countVisibleElements","_computeAngle","getVisibleDatasetCount","xCenter","yCenter","datasetStartAngle","getDistanceFromCenterForValue","resetRadius","doughnut","controller_pie","valueOrDefault$6","resolve$6","controller_radar","pointPosition","getPointPositionForValue","bubble","horizontalBar","polarArea","pie","radar","scatter","getRelativePosition","native","parseVisibleItems","handler","jlen","getIntersectItems","getNearestItems","intersect","distanceMetric","minDistance","POSITIVE_INFINITY","nearestItems","getDistanceMetricForAxis","useX","useY","pt1","pt2","deltaX","deltaY","indexMode","items","core_interaction","modes","single","x-axis","nearest","intersectsItem","filterByPosition","where","sortByWeight","_tmpIndex_","sort","addSizeByPosition","boxes","box","layout","core_layouts","addBox","fullWidth","removeBox","layoutItem","configure","layoutOptions","leftPadding","rightPadding","topPadding","bottomPadding","leftBoxes","rightBoxes","topBoxes","bottomBoxes","chartAreaBoxes","maxPadding","verticalBoxes","horizontalBoxes","outerBoxes","chartWidth","chartHeight","chartAreaWidth","verticalBoxWidth","maxChartAreaWidth","maxChartAreaHeight","outerBoxSizes","minBoxSizes","getPadding","boxPadding","findMaxPadding","fitBox","minBoxSize","findNextWhere","scaleMargin","leftPaddingAddition","topPaddingAddition","newMaxChartAreaHeight","newMaxChartAreaWidth","placeBox","minBox","stylesheet","freeze","default","EXPANDO_KEY","CSS_SIZE_MONITOR","CSS_PREFIX","CSS_RENDER_MONITOR","CSS_RENDER_ANIMATION","ANIMATION_START_EVENTS","EVENT_TYPES","touchstart","touchmove","touchend","pointerenter","pointerdown","pointermove","pointerup","pointerleave","pointerout","readUsedSize","property","getStyle","eventListenerOptions","supports","addEventListener","passive","addListener","removeListener","removeEventListener","createEvent","nativeEvent","createDiv","cls","el","addResizeListener","expando","resizer","expand","shrink","_reset","scrollLeft","scrollTop","onScroll","bind","createResizer","ticking","throttled","container","maintainAspectRatio","clientWidth","proxy","renderProxy","animationName","reflow","offsetParent","watchForRender","insertBefore","firstChild","removeResizeListener","unwatchForRender","removeChild","platform_dom$2","disableCSSInjection","_enabled","_ensureLoaded","_loaded","platform","css","_style","setAttribute","getElementsByTagName","createTextNode","injectCSS","acquireContext","getContext","renderHeight","getAttribute","renderWidth","initial","displayWidth","aspectRatio","displayHeight","initCanvas","releaseContext","removeAttribute","proxies","pos","fromNativeEvent","addEvent","removeEvent","implementation","core_plugins","_plugins","_cacheId","register","plugin","unregister","idx","getAll","notify","hook","descriptor","params","descriptors","cache","$plugins","_invalidate","core_scaleService","constructors","registerScaleType","scaleConstructor","scaleDefaults","getScaleConstructor","getScaleDefaults","updateScaleDefaults","additions","addScalesToLayout","valueOrDefault$7","enabled","titleFontStyle","titleSpacing","titleMarginBottom","titleFontColor","titleAlign","bodySpacing","bodyFontColor","bodyAlign","footerFontStyle","footerSpacing","footerMarginTop","footerFontColor","footerAlign","yPadding","xPadding","caretPadding","caretSize","multiKeyBackground","displayColors","beforeTitle","tooltipItems","labelCount","afterTitle","beforeBody","beforeLabel","labelColor","activeElement","labelTextColor","afterLabel","afterBody","beforeFooter","footer","afterFooter","positioners","average","eventPosition","nearestElement","distanceBetweenPoints","tp","pushOrConcat","toPush","splitNewlines","String","createTooltipItem","indexScale","valueScale","getLabelForIndex","getBaseModel","tooltipOpts","xAlign","_bodyFontFamily","bodyFontFamily","_bodyFontStyle","bodyFontStyle","_bodyAlign","bodyFontSize","_titleFontFamily","titleFontFamily","_titleFontStyle","titleFontSize","_titleAlign","_footerFontFamily","footerFontFamily","_footerFontStyle","footerFontSize","_footerAlign","legendColorBackground","getAlignedX","align","getBeforeAfterBodyLines","exports$3","_lastActive","getTitle","getBeforeBody","getBody","bodyItems","bodyItem","before","after","getAfterBody","getFooter","changed","existingModel","active","_active","alignment","backgroundPoint","tooltipSize","labelTextColors","_eventPosition","itemSort","dataPoints","combinedBodyLength","reduce","titleLineCount","footerLineCount","widthPadding","maxLineWidth","measureText","fontString","getTooltipSize","lf","rf","olf","orf","yf","midX","midY","determineAlignment","paddingAndSize","radiusAndPadding","getBackgroundPoint","drawCaret","tooltipPoint","caretPosition","getCaretPosition","x3","y3","ptX","ptY","tmp","drawTitle","textAlign","textBaseline","fillText","drawBody","textColor","drawColorBoxes","xLinePadding","colorX","fillLineOfText","strokeRect","drawFooter","drawBackground","quadraticCurveTo","hasTooltipContent","globalAlpha","handleEvent","getElementsAtEventForMode","positioners_1","core_tooltip","valueOrDefault$8","mergeScaleConfig","slen","mergeConfig","positionIsHorizontal","events","onHover","animationDuration","responsive","responsiveAnimationDuration","Chart","construct","initConfig","_bufferedRender","instances","retinaScale","devicePixelRatio","bindEvents","resize","ensureScalesHaveIDs","buildOrUpdateScales","initToolTip","stop","silent","newWidth","getMaximumWidth","newHeight","getMaximumHeight","newSize","onResize","scalesOptions","scaleOptions","xAxisOptions","yAxisOptions","updated","dtype","dposition","isDefault","scaleType","scaleClass","mergeTicksOptions","hasUpdated","buildOrUpdateControllers","newControllers","destroyDatasetMeta","ControllerClass","resetElements","newOptions","updateConfig","updateLayout","updateDatasets","lastActive","_bufferedRequest","updateDataset","animationOptions","animationObject","easingFunction","stepDecimal","drawDatasets","_drawTooltip","drawDataset","getElementsAtXAxis","_meta","generateLegend","unbindEvents","toBase64Image","toDataURL","_chartInstance","_listeners","eventHandler","updateHoverStyle","bufferedRequest","hoverOptions","core_controller","abstract","DateAdapter","Controller","types","scaleMerge","formats","parse","format","diff","startOf","endOf","_create","override","members","core_adapters","_date","core_ticks","formatters","tickValue","logDelta","log10","tickString","maxTick","logTick","toExponential","numDecimal","toFixed","logarithmic","remain","valueOrDefault$9","labelsFromTicks","computeTextSize","tick","longestText","color","drawBorder","drawOnChartArea","drawTicks","tickMarkLength","zeroLineWidth","zeroLineColor","zeroLineBorderDash","zeroLineBorderDashOffset","scaleLabel","labelString","minRotation","maxRotation","mirror","autoSkip","autoSkipPadding","labelOffset","minor","major","core_scale","paddingLeft","paddingTop","paddingRight","paddingBottom","_ticks","beforeUpdate","maxWidth","maxHeight","margins","_maxLabelLines","longestLabelWidth","longestTextCache","beforeSetDimensions","setDimensions","afterSetDimensions","beforeDataLimits","determineDataLimits","afterDataLimits","beforeBuildTicks","buildTicks","afterBuildTicks","beforeTickToLabelConversion","convertTicksToLabels","afterTickToLabelConversion","beforeCalculateTickRotation","calculateTickRotation","afterCalculateTickRotation","beforeFit","fit","afterFit","afterUpdate","tickOpts","userCallback","tickFont","labelRotation","cosRotation","originalLabelWidth","labelWidth","tickWidth","angleRadians","toRadians","scaleLabelOpts","gridLineOpts","_isVisible","parseFont","isFullWidth","scaleLabelFont","scaleLabelPadding","deltaHeight","largestTextWidth","tallestLabelHeightInLines","numberOfLabelLines","lineSpace","tickPadding","sinRotation","labelHeight","firstLabelWidth","lastLabelWidth","offsetRight","handleMargins","rawValue","getValueForPixel","innerWidth","pixel","finalVal","innerHeight","decimal","valueOffset","getBaseValue","_autoSkip","optionTicks","tickCount","skipRatio","maxTicks","maxTicksLimit","ticksLength","_tickSize","axisLength","PaddingBottom","rot","borderValue","tickStart","tickEnd","optionMajorTicks","isRotated","isMirrored","tickFontColor","fontColor","majorTickFontColor","majorTickFont","tl","scaleLabelFontColor","labelRotationRadians","itemsToDraw","axisWidth","alignPixel","_alignPixel","lineColor","tx1","ty1","tx2","ty2","labelX","labelY","textOffset","zeroLineIndex","lineValue","getPixelForGridLine","labelYOffset","labelXOffset","glWidth","glColor","glBorderDash","glBorderDashOffset","itemToDraw","translate","scaleLabelX","scaleLabelY","halfLineHeight","isLeft","firstLineWidth","lastLineWidth","scale_category","getLabels","xLabels","yLabels","minIndex","maxIndex","valueCategory","offsetAmt","valueWidth","widthOffset","valueHeight","heightOffset","horz","valueDimension","_defaults","scale_linearbase","handleTickRangeOptions","minSign","sign","maxSign","setMin","suggestedMin","setMax","suggestedMax","getTickLimit","stepSize","ceil","_computeTickLimit","handleDirectionalChanges","numericGeneratorOptions","precision","fixedStepSize","generationOptions","dataRange","factor","niceMin","niceMax","numSpaces","unit","maxNumSpaces","rmin","rmax","spacing","niceNum","_decimalPlaces","almostWhole","almostEquals","generateTicks","ticksAsNumbers","defaultConfig$1","scale_linear","IDMatches","hasStacks","valuesPerStack","positiveValues","negativeValues","relativePoints","valuesForType","minVal","maxVal","innerDimension","_defaults$1","valueOrDefault$a","defaultConfig$2","nonNegativeOrDefault","scale_logarithmic","minNotZero","exp","significand","tickVal","endExp","endSignificand","lastTick","generateTicks$1","tickValues","_getFirstTickValue","firstTickValue","_defaults$2","valueOrDefault$b","valueAtIndexOrDefault$1","resolve$7","defaultConfig$3","animate","showLabelBackdrop","backdropColor","backdropPaddingY","backdropPaddingX","getValueCount","getTickBackdropHeight","determineLimits","getTextAlignForAngle","adjustPointPositionForLabelHeight","textSize","numberOrZero","param","scale_radialLinear","drawingArea","NEGATIVE_INFINITY","plFont","furthestLimits","furthestAngles","_pointLabelSizes","valueCount","getPointPosition","getIndexAngle","toDegrees","hLimits","vLimits","setReductions","fitWithPointLabels","setCenterPoint","largestPossibleRadius","radiusReductionLeft","radiusReductionRight","radiusReductionTop","radiusReductionBottom","leftMovement","rightMovement","topMovement","bottomMovement","maxRight","maxLeft","maxTop","maxBottom","angleMultiplier","startAngleRadians","scalingFactor","distanceFromCenter","thisAngle","getBasePosition","angleLineOpts","pointLabelOpts","tickBackdropHeight","outerDistance","outerPosition","extra","pointLabelPosition","pointLabelFontColor","drawPointLabels","yCenterOffset","drawRadiusLine","_defaults$3","valueOrDefault$c","MIN_INTEGER","MIN_SAFE_INTEGER","MAX_SAFE_INTEGER","INTERVALS","millisecond","common","steps","second","minute","hour","day","week","month","quarter","year","UNITS","sorter","arrayUnique","hash","out","interpolate$1","table","skey","tkey","mid","i0","i1","lo","lookup","span","toTimestamp","input","adapter","_adapter","time","parser","determineMajorUnit","generate","capacity","timeOpts","minUnit","interval","determineUnitForAutoTicks","unitStepSize","weekday","isoWeekday","majorTicksEnabled","first","milliseconds","determineStepSize","scale_time","adapters","date","warn","displayFormats","timestamp","timestamps","dataLabels","_horizontal","_table","_timestamps","getLabelCapacity","_unit","determineUnitForFormatting","_majorUnit","distribution","buildLookupTable","_offsets","computeOffsets","majorUnit","ticksFromTimestamps","tooltipFormat","datetime","tickFormatFunction","minorFormat","majorFormat","majorTime","majorTickOpts","formatter","getPixelForOffset","isReverse","getLabelWidth","ticksOpts","tickLabelWidth","tickFontSize","exampleTime","exampleLabel","_defaults$4","displayFormat","category","radialLinear","FORMATS","_id","_format","amount","as","filler","propagate","mappers","visible","boundary","decodeFill","computeBoundary","scaleBottom","scaleTop","scaleZero","resolveTarget","visited","createMapper","isDrawable","drawArea","curve0","curve1","len0","len1","plugin_filler","afterDatasetsUpdate","$filler","mapper","beforeDatasetDraw","loop","p0","p1","d0","d1","doFill","noop$1","valueOrDefault$d","getBoxWidth","labelOpts","usePointStyle","boxWidth","ci","onLeave","lineDash","Legend","legendHitBoxes","_hoveredItem","doughnutMode","beforeBuildLabels","buildLabels","afterBuildLabels","legendItems","labelFont","hitboxes","lineWidths","totalHeight","vPadding","columnWidths","totalWidth","currentColWidth","currentColHeight","itemHeight","itemWidth","lineDefault","legendWidth","cursor","textWidth","SQRT2","drawLegendBox","halfFontSize","xLeft","yMiddle","_getLegendItemAt","hitBox","lh","hoveredItem","createNewLegendAndAttach","legendOpts","plugin_legend","_element","beforeInit","afterEvent","noop$2","Title","lineCount","fontOpts","titleX","titleY","createNewTitleBlockAndAttach","titleOpts","titleBlock","parseMaxStyle","styleValue","parentProperty","valueInPixels","isConstrainedValue","getConstraintDimension","domNode","maxStyle","percentageProperty","defaultView","_getParentNode","constrainedNode","getComputedStyle","constrainedContainer","hasCNode","hasCContainer","infinity","filterCallback","filtered","arrayToSearch","startIndex","currentItem","findPreviousWhere","epsilon","rounded","exponent","log","LOG10E","powerOf10","isPowerOf10","radians","centrePoint","anglePoint","distanceFromXCenter","distanceFromYCenter","radialDistanceFromCenter","aliasPixel","pixelWidth","currentDevicePixelRatio","halfWidth","firstPoint","middlePoint","afterPoint","d01","d12","s01","s12","fa","fb","EPSILON","pointBefore","pointCurrent","pointAfter","alphaK","betaK","tauK","squaredMagnitude","pointsWithTangents","deltaK","mK","pointsLen","slopeDeltaX","fraction","webkitRequestAnimationFrame","mozRequestAnimationFrame","oRequestAnimationFrame","msRequestAnimationFrame","setTimeout","evt","originalEvent","srcElement","boundingRect","getBoundingClientRect","touches","clientX","clientY","getConstraintWidth","getConstraintHeight","_calculatePadding","parentDimension","parent","host","cw","clientHeight","ch","currentStyle","getPropertyValue","forceRatio","pixelRatio","pixelSize","arrayOfThings","gc","garbageCollect","longest","thing","nestedThing","gcLen","numberOfLines","CanvasGradient","colorValue","CanvasPattern","core_helpers","_adapters","Animation","animationService","Interaction","layouts","Scale","scaleService","Ticks","Tooltip","src","pluginService","PluginBase","canvasHelpers","layoutService","LinearScaleBase","klass","cfg","toLowerCase"],"mappings":"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","file":"static/js/5.6b56a8c7.chunk.js","sourcesContent":["var baseAssignValue = require('./_baseAssignValue'),\n    createAggregator = require('./_createAggregator');\n/**\n * Creates an object composed of keys generated from the results of running\n * each element of `collection` thru `iteratee`. The corresponding value of\n * each key is the last element responsible for generating the key. The\n * iteratee is invoked with one argument: (value).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Collection\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} [iteratee=_.identity] The iteratee to transform keys.\n * @returns {Object} Returns the composed aggregate object.\n * @example\n *\n * var array = [\n *   { 'dir': 'left', 'code': 97 },\n *   { 'dir': 'right', 'code': 100 }\n * ];\n *\n * _.keyBy(array, function(o) {\n *   return String.fromCharCode(o.code);\n * });\n * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }\n *\n * _.keyBy(array, 'dir');\n * // => { 'left': { 'dir': 'left', 'code': 97 }, 'right': { 'dir': 'right', 'code': 100 } }\n */\n\n\nvar keyBy = createAggregator(function (result, value, key) {\n  baseAssignValue(result, key, value);\n});\nmodule.exports = keyBy;","var arrayAggregator = require('./_arrayAggregator'),\n    baseAggregator = require('./_baseAggregator'),\n    baseIteratee = require('./_baseIteratee'),\n    isArray = require('./isArray');\n/**\n * Creates a function like `_.groupBy`.\n *\n * @private\n * @param {Function} setter The function to set accumulator values.\n * @param {Function} [initializer] The accumulator object initializer.\n * @returns {Function} Returns the new aggregator function.\n */\n\n\nfunction createAggregator(setter, initializer) {\n  return function (collection, iteratee) {\n    var func = isArray(collection) ? arrayAggregator : baseAggregator,\n        accumulator = initializer ? initializer() : {};\n    return func(collection, setter, baseIteratee(iteratee, 2), accumulator);\n  };\n}\n\nmodule.exports = createAggregator;","/**\n * A specialized version of `baseAggregator` for arrays.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} setter The function to set `accumulator` values.\n * @param {Function} iteratee The iteratee to transform keys.\n * @param {Object} accumulator The initial aggregated object.\n * @returns {Function} Returns `accumulator`.\n */\nfunction arrayAggregator(array, setter, iteratee, accumulator) {\n  var index = -1,\n      length = array == null ? 0 : array.length;\n\n  while (++index < length) {\n    var value = array[index];\n    setter(accumulator, value, iteratee(value), array);\n  }\n\n  return accumulator;\n}\n\nmodule.exports = arrayAggregator;","var baseEach = require('./_baseEach');\n/**\n * Aggregates elements of `collection` on `accumulator` with keys transformed\n * by `iteratee` and values set by `setter`.\n *\n * @private\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} setter The function to set `accumulator` values.\n * @param {Function} iteratee The iteratee to transform keys.\n * @param {Object} accumulator The initial aggregated object.\n * @returns {Function} Returns `accumulator`.\n */\n\n\nfunction baseAggregator(collection, setter, iteratee, accumulator) {\n  baseEach(collection, function (value, key, collection) {\n    setter(accumulator, value, iteratee(value), collection);\n  });\n  return accumulator;\n}\n\nmodule.exports = baseAggregator;","var defineProperty = require('./_defineProperty');\n/**\n * The base implementation of `assignValue` and `assignMergeValue` without\n * value checks.\n *\n * @private\n * @param {Object} object The object to modify.\n * @param {string} key The key of the property to assign.\n * @param {*} value The value to assign.\n */\n\n\nfunction baseAssignValue(object, key, value) {\n  if (key == '__proto__' && defineProperty) {\n    defineProperty(object, key, {\n      'configurable': true,\n      'enumerable': true,\n      'value': value,\n      'writable': true\n    });\n  } else {\n    object[key] = value;\n  }\n}\n\nmodule.exports = baseAssignValue;","(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) : typeof define === 'function' && define.amd ? define(['exports'], factory) : factory(global['custom-tooltips'] = {});\n})(this, function (exports) {\n  'use strict';\n  /**\n   * --------------------------------------------------------------------------\n   * CoreUI Plugins - Custom Tooltips for Chart.js (v1.2.0): custom-tooltips.js\n   * Licensed under MIT (https://coreui.io/license)\n   * --------------------------------------------------------------------------\n   */\n\n  function CustomTooltips(tooltipModel) {\n    var _this = this; // Add unique id if not exist\n\n\n    var _setCanvasId = function _setCanvasId() {\n      var _idMaker = function _idMaker() {\n        var _hex = 16;\n        var _multiplier = 0x10000;\n        return ((1 + Math.random()) * _multiplier | 0).toString(_hex);\n      };\n\n      var _canvasId = \"_canvas-\" + (_idMaker() + _idMaker());\n\n      _this._chart.canvas.id = _canvasId;\n      return _canvasId;\n    };\n\n    var ClassName = {\n      ABOVE: 'above',\n      BELOW: 'below',\n      CHARTJS_TOOLTIP: 'chartjs-tooltip',\n      NO_TRANSFORM: 'no-transform',\n      TOOLTIP_BODY: 'tooltip-body',\n      TOOLTIP_BODY_ITEM: 'tooltip-body-item',\n      TOOLTIP_BODY_ITEM_COLOR: 'tooltip-body-item-color',\n      TOOLTIP_BODY_ITEM_LABEL: 'tooltip-body-item-label',\n      TOOLTIP_BODY_ITEM_VALUE: 'tooltip-body-item-value',\n      TOOLTIP_HEADER: 'tooltip-header',\n      TOOLTIP_HEADER_ITEM: 'tooltip-header-item'\n    };\n    var Selector = {\n      DIV: 'div',\n      SPAN: 'span',\n      TOOLTIP: (this._chart.canvas.id || _setCanvasId()) + \"-tooltip\"\n    };\n    var tooltip = document.getElementById(Selector.TOOLTIP);\n\n    if (!tooltip) {\n      tooltip = document.createElement('div');\n      tooltip.id = Selector.TOOLTIP;\n      tooltip.className = ClassName.CHARTJS_TOOLTIP;\n\n      this._chart.canvas.parentNode.appendChild(tooltip);\n    } // Hide if no tooltip\n\n\n    if (tooltipModel.opacity === 0) {\n      tooltip.style.opacity = 0;\n      return;\n    } // Set caret Position\n\n\n    tooltip.classList.remove(ClassName.ABOVE, ClassName.BELOW, ClassName.NO_TRANSFORM);\n\n    if (tooltipModel.yAlign) {\n      tooltip.classList.add(tooltipModel.yAlign);\n    } else {\n      tooltip.classList.add(ClassName.NO_TRANSFORM);\n    } // Set Text\n\n\n    if (tooltipModel.body) {\n      var titleLines = tooltipModel.title || [];\n      var tooltipHeader = document.createElement(Selector.DIV);\n      tooltipHeader.className = ClassName.TOOLTIP_HEADER;\n      titleLines.forEach(function (title) {\n        var tooltipHeaderTitle = document.createElement(Selector.DIV);\n        tooltipHeaderTitle.className = ClassName.TOOLTIP_HEADER_ITEM;\n        tooltipHeaderTitle.innerHTML = title;\n        tooltipHeader.appendChild(tooltipHeaderTitle);\n      });\n      var tooltipBody = document.createElement(Selector.DIV);\n      tooltipBody.className = ClassName.TOOLTIP_BODY;\n      var tooltipBodyItems = tooltipModel.body.map(function (item) {\n        return item.lines;\n      });\n      tooltipBodyItems.forEach(function (item, i) {\n        var tooltipBodyItem = document.createElement(Selector.DIV);\n        tooltipBodyItem.className = ClassName.TOOLTIP_BODY_ITEM;\n        var colors = tooltipModel.labelColors[i];\n        var tooltipBodyItemColor = document.createElement(Selector.SPAN);\n        tooltipBodyItemColor.className = ClassName.TOOLTIP_BODY_ITEM_COLOR;\n        tooltipBodyItemColor.style.backgroundColor = colors.backgroundColor;\n        tooltipBodyItem.appendChild(tooltipBodyItemColor);\n\n        if (item[0].split(':').length > 1) {\n          var tooltipBodyItemLabel = document.createElement(Selector.SPAN);\n          tooltipBodyItemLabel.className = ClassName.TOOLTIP_BODY_ITEM_LABEL;\n          tooltipBodyItemLabel.innerHTML = item[0].split(': ')[0];\n          tooltipBodyItem.appendChild(tooltipBodyItemLabel);\n          var tooltipBodyItemValue = document.createElement(Selector.SPAN);\n          tooltipBodyItemValue.className = ClassName.TOOLTIP_BODY_ITEM_VALUE;\n          tooltipBodyItemValue.innerHTML = item[0].split(': ').pop();\n          tooltipBodyItem.appendChild(tooltipBodyItemValue);\n        } else {\n          var _tooltipBodyItemValue = document.createElement(Selector.SPAN);\n\n          _tooltipBodyItemValue.className = ClassName.TOOLTIP_BODY_ITEM_VALUE;\n          _tooltipBodyItemValue.innerHTML = item[0];\n          tooltipBodyItem.appendChild(_tooltipBodyItemValue);\n        }\n\n        tooltipBody.appendChild(tooltipBodyItem);\n      });\n      tooltip.innerHTML = '';\n      tooltip.appendChild(tooltipHeader);\n      tooltip.appendChild(tooltipBody);\n    }\n\n    var positionY = this._chart.canvas.offsetTop;\n    var positionX = this._chart.canvas.offsetLeft; // Display, position, and set styles for font\n\n    tooltip.style.opacity = 1;\n    tooltip.style.left = positionX + tooltipModel.caretX + \"px\";\n    tooltip.style.top = positionY + tooltipModel.caretY + \"px\";\n  }\n\n  exports.CustomTooltips = CustomTooltips;\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n});","var isObject = require('./isObject'),\n    isSymbol = require('./isSymbol');\n/** Used as references for various `Number` constants. */\n\n\nvar NAN = 0 / 0;\n/** Used to match leading and trailing whitespace. */\n\nvar reTrim = /^\\s+|\\s+$/g;\n/** Used to detect bad signed hexadecimal string values. */\n\nvar reIsBadHex = /^[-+]0x[0-9a-f]+$/i;\n/** Used to detect binary string values. */\n\nvar reIsBinary = /^0b[01]+$/i;\n/** Used to detect octal string values. */\n\nvar reIsOctal = /^0o[0-7]+$/i;\n/** Built-in method references without a dependency on `root`. */\n\nvar freeParseInt = parseInt;\n/**\n * Converts `value` to a number.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to process.\n * @returns {number} Returns the number.\n * @example\n *\n * _.toNumber(3.2);\n * // => 3.2\n *\n * _.toNumber(Number.MIN_VALUE);\n * // => 5e-324\n *\n * _.toNumber(Infinity);\n * // => Infinity\n *\n * _.toNumber('3.2');\n * // => 3.2\n */\n\nfunction toNumber(value) {\n  if (typeof value == 'number') {\n    return value;\n  }\n\n  if (isSymbol(value)) {\n    return NAN;\n  }\n\n  if (isObject(value)) {\n    var other = typeof value.valueOf == 'function' ? value.valueOf() : value;\n    value = isObject(other) ? other + '' : other;\n  }\n\n  if (typeof value != 'string') {\n    return value === 0 ? value : +value;\n  }\n\n  value = value.replace(reTrim, '');\n  var isBinary = reIsBinary.test(value);\n  return isBinary || reIsOctal.test(value) ? freeParseInt(value.slice(2), isBinary ? 2 : 8) : reIsBadHex.test(value) ? NAN : +value;\n}\n\nmodule.exports = toNumber;","var getNative = require('./_getNative');\n\nvar defineProperty = function () {\n  try {\n    var func = getNative(Object, 'defineProperty');\n    func({}, '', {});\n    return func;\n  } catch (e) {}\n}();\n\nmodule.exports = defineProperty;","var toFinite = require('./toFinite');\n/**\n * Converts `value` to an integer.\n *\n * **Note:** This method is loosely based on\n * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to convert.\n * @returns {number} Returns the converted integer.\n * @example\n *\n * _.toInteger(3.2);\n * // => 3\n *\n * _.toInteger(Number.MIN_VALUE);\n * // => 0\n *\n * _.toInteger(Infinity);\n * // => 1.7976931348623157e+308\n *\n * _.toInteger('3.2');\n * // => 3\n */\n\n\nfunction toInteger(value) {\n  var result = toFinite(value),\n      remainder = result % 1;\n  return result === result ? remainder ? result - remainder : result : 0;\n}\n\nmodule.exports = toInteger;","var toNumber = require('./toNumber');\n/** Used as references for various `Number` constants. */\n\n\nvar INFINITY = 1 / 0,\n    MAX_INTEGER = 1.7976931348623157e+308;\n/**\n * Converts `value` to a finite number.\n *\n * @static\n * @memberOf _\n * @since 4.12.0\n * @category Lang\n * @param {*} value The value to convert.\n * @returns {number} Returns the converted number.\n * @example\n *\n * _.toFinite(3.2);\n * // => 3.2\n *\n * _.toFinite(Number.MIN_VALUE);\n * // => 5e-324\n *\n * _.toFinite(Infinity);\n * // => 1.7976931348623157e+308\n *\n * _.toFinite('3.2');\n * // => 3.2\n */\n\nfunction toFinite(value) {\n  if (!value) {\n    return value === 0 ? value : 0;\n  }\n\n  value = toNumber(value);\n\n  if (value === INFINITY || value === -INFINITY) {\n    var sign = value < 0 ? -1 : 1;\n    return sign * MAX_INTEGER;\n  }\n\n  return value === value ? value : 0;\n}\n\nmodule.exports = toFinite;","var baseForOwn = require('./_baseForOwn'),\n    createBaseEach = require('./_createBaseEach');\n/**\n * The base implementation of `_.forEach` without support for iteratee shorthands.\n *\n * @private\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array|Object} Returns `collection`.\n */\n\n\nvar baseEach = createBaseEach(baseForOwn);\nmodule.exports = baseEach;","/**\n * The base implementation of `_.findIndex` and `_.findLastIndex` without\n * support for iteratee shorthands.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {Function} predicate The function invoked per iteration.\n * @param {number} fromIndex The index to search from.\n * @param {boolean} [fromRight] Specify iterating from right to left.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction baseFindIndex(array, predicate, fromIndex, fromRight) {\n  var length = array.length,\n      index = fromIndex + (fromRight ? 1 : -1);\n\n  while (fromRight ? index-- : ++index < length) {\n    if (predicate(array[index], index, array)) {\n      return index;\n    }\n  }\n\n  return -1;\n}\n\nmodule.exports = baseFindIndex;","var isArrayLike = require('./isArrayLike');\n/**\n * Creates a `baseEach` or `baseEachRight` function.\n *\n * @private\n * @param {Function} eachFunc The function to iterate over a collection.\n * @param {boolean} [fromRight] Specify iterating from right to left.\n * @returns {Function} Returns the new base function.\n */\n\n\nfunction createBaseEach(eachFunc, fromRight) {\n  return function (collection, iteratee) {\n    if (collection == null) {\n      return collection;\n    }\n\n    if (!isArrayLike(collection)) {\n      return eachFunc(collection, iteratee);\n    }\n\n    var length = collection.length,\n        index = fromRight ? length : -1,\n        iterable = Object(collection);\n\n    while (fromRight ? index-- : ++index < length) {\n      if (iteratee(iterable[index], index, iterable) === false) {\n        break;\n      }\n    }\n\n    return collection;\n  };\n}\n\nmodule.exports = createBaseEach;","var baseFindIndex = require('./_baseFindIndex'),\n    baseIteratee = require('./_baseIteratee'),\n    toInteger = require('./toInteger');\n/* Built-in method references for those with the same name as other `lodash` methods. */\n\n\nvar nativeMax = Math.max;\n/**\n * This method is like `_.find` except that it returns the index of the first\n * element `predicate` returns truthy for instead of the element itself.\n *\n * @static\n * @memberOf _\n * @since 1.1.0\n * @category Array\n * @param {Array} array The array to inspect.\n * @param {Function} [predicate=_.identity] The function invoked per iteration.\n * @param {number} [fromIndex=0] The index to search from.\n * @returns {number} Returns the index of the found element, else `-1`.\n * @example\n *\n * var users = [\n *   { 'user': 'barney',  'active': false },\n *   { 'user': 'fred',    'active': false },\n *   { 'user': 'pebbles', 'active': true }\n * ];\n *\n * _.findIndex(users, function(o) { return o.user == 'barney'; });\n * // => 0\n *\n * // The `_.matches` iteratee shorthand.\n * _.findIndex(users, { 'user': 'fred', 'active': false });\n * // => 1\n *\n * // The `_.matchesProperty` iteratee shorthand.\n * _.findIndex(users, ['active', false]);\n * // => 0\n *\n * // The `_.property` iteratee shorthand.\n * _.findIndex(users, 'active');\n * // => 2\n */\n\nfunction findIndex(array, predicate, fromIndex) {\n  var length = array == null ? 0 : array.length;\n\n  if (!length) {\n    return -1;\n  }\n\n  var index = fromIndex == null ? 0 : toInteger(fromIndex);\n\n  if (index < 0) {\n    index = nativeMax(length + index, 0);\n  }\n\n  return baseFindIndex(array, baseIteratee(predicate, 3), index);\n}\n\nmodule.exports = findIndex;","var createFind = require('./_createFind'),\n    findIndex = require('./findIndex');\n/**\n * Iterates over elements of `collection`, returning the first element\n * `predicate` returns truthy for. The predicate is invoked with three\n * arguments: (value, index|key, collection).\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Collection\n * @param {Array|Object} collection The collection to inspect.\n * @param {Function} [predicate=_.identity] The function invoked per iteration.\n * @param {number} [fromIndex=0] The index to search from.\n * @returns {*} Returns the matched element, else `undefined`.\n * @example\n *\n * var users = [\n *   { 'user': 'barney',  'age': 36, 'active': true },\n *   { 'user': 'fred',    'age': 40, 'active': false },\n *   { 'user': 'pebbles', 'age': 1,  'active': true }\n * ];\n *\n * _.find(users, function(o) { return o.age < 40; });\n * // => object for 'barney'\n *\n * // The `_.matches` iteratee shorthand.\n * _.find(users, { 'age': 1, 'active': true });\n * // => object for 'pebbles'\n *\n * // The `_.matchesProperty` iteratee shorthand.\n * _.find(users, ['active', false]);\n * // => object for 'fred'\n *\n * // The `_.property` iteratee shorthand.\n * _.find(users, 'active');\n * // => object for 'barney'\n */\n\n\nvar find = createFind(findIndex);\nmodule.exports = find;","var baseIsEqual = require('./_baseIsEqual');\n/**\n * Performs a deep comparison between two values to determine if they are\n * equivalent.\n *\n * **Note:** This method supports comparing arrays, array buffers, booleans,\n * date objects, error objects, maps, numbers, `Object` objects, regexes,\n * sets, strings, symbols, and typed arrays. `Object` objects are compared\n * by their own, not inherited, enumerable properties. Functions and DOM\n * nodes are compared by strict equality, i.e. `===`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.isEqual(object, other);\n * // => true\n *\n * object === other;\n * // => false\n */\n\n\nfunction isEqual(value, other) {\n  return baseIsEqual(value, other);\n}\n\nmodule.exports = isEqual;","var _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nfunction _objectWithoutProperties(obj, keys) {\n  var target = {};\n\n  for (var i in obj) {\n    if (keys.indexOf(i) >= 0) continue;\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n    target[i] = obj[i];\n  }\n\n  return target;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Chart from 'chart.js';\nimport isEqual from 'lodash/isEqual';\nimport find from 'lodash/find';\nimport keyBy from 'lodash/keyBy';\nvar NODE_ENV = typeof process !== 'undefined' && process.env && process.env.NODE_ENV;\n\nvar ChartComponent = function (_React$Component) {\n  _inherits(ChartComponent, _React$Component);\n\n  function ChartComponent() {\n    var _temp, _this, _ret;\n\n    _classCallCheck(this, ChartComponent);\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _React$Component.call.apply(_React$Component, [this].concat(args))), _this), _this.handleOnClick = function (event) {\n      var instance = _this.chartInstance;\n      var _this$props = _this.props,\n          getDatasetAtEvent = _this$props.getDatasetAtEvent,\n          getElementAtEvent = _this$props.getElementAtEvent,\n          getElementsAtEvent = _this$props.getElementsAtEvent,\n          onElementsClick = _this$props.onElementsClick;\n      getDatasetAtEvent && getDatasetAtEvent(instance.getDatasetAtEvent(event), event);\n      getElementAtEvent && getElementAtEvent(instance.getElementAtEvent(event), event);\n      getElementsAtEvent && getElementsAtEvent(instance.getElementsAtEvent(event), event);\n      onElementsClick && onElementsClick(instance.getElementsAtEvent(event), event); // Backward compatibility\n    }, _this.ref = function (element) {\n      _this.element = element;\n    }, _temp), _possibleConstructorReturn(_this, _ret);\n  }\n\n  ChartComponent.prototype.componentWillMount = function componentWillMount() {\n    this.chartInstance = undefined;\n  };\n\n  ChartComponent.prototype.componentDidMount = function componentDidMount() {\n    this.renderChart();\n  };\n\n  ChartComponent.prototype.componentDidUpdate = function componentDidUpdate() {\n    if (this.props.redraw) {\n      this.chartInstance.destroy();\n      this.renderChart();\n      return;\n    }\n\n    this.updateChart();\n  };\n\n  ChartComponent.prototype.shouldComponentUpdate = function shouldComponentUpdate(nextProps) {\n    var _props = this.props,\n        redraw = _props.redraw,\n        type = _props.type,\n        options = _props.options,\n        plugins = _props.plugins,\n        legend = _props.legend,\n        height = _props.height,\n        width = _props.width;\n\n    if (nextProps.redraw === true) {\n      return true;\n    }\n\n    if (height !== nextProps.height || width !== nextProps.width) {\n      return true;\n    }\n\n    if (type !== nextProps.type) {\n      return true;\n    }\n\n    if (!isEqual(legend, nextProps.legend)) {\n      return true;\n    }\n\n    if (!isEqual(options, nextProps.options)) {\n      return true;\n    }\n\n    var nextData = this.transformDataProp(nextProps);\n\n    if (!isEqual(this.shadowDataProp, nextData)) {\n      return true;\n    }\n\n    return !isEqual(plugins, nextProps.plugins);\n  };\n\n  ChartComponent.prototype.componentWillUnmount = function componentWillUnmount() {\n    this.chartInstance.destroy();\n  };\n\n  ChartComponent.prototype.transformDataProp = function transformDataProp(props) {\n    var data = props.data;\n\n    if (typeof data == 'function') {\n      var node = this.element;\n      return data(node);\n    } else {\n      return data;\n    }\n  }; // Chart.js directly mutates the data.dataset objects by adding _meta proprerty\n  // this makes impossible to compare the current and next data changes\n  // therefore we memoize the data prop while sending a fake to Chart.js for mutation.\n  // see https://github.com/chartjs/Chart.js/blob/master/src/core/core.controller.js#L615-L617\n\n\n  ChartComponent.prototype.memoizeDataProps = function memoizeDataProps() {\n    if (!this.props.data) {\n      return;\n    }\n\n    var data = this.transformDataProp(this.props);\n    this.shadowDataProp = _extends({}, data, {\n      datasets: data.datasets && data.datasets.map(function (set) {\n        return _extends({}, set);\n      })\n    });\n    return data;\n  };\n\n  ChartComponent.prototype.checkDatasets = function checkDatasets(datasets) {\n    var isDev = NODE_ENV !== 'production' && NODE_ENV !== 'prod';\n    var usingCustomKeyProvider = this.props.datasetKeyProvider !== ChartComponent.getLabelAsKey;\n    var multipleDatasets = datasets.length > 1;\n\n    if (isDev && multipleDatasets && !usingCustomKeyProvider) {\n      var shouldWarn = false;\n      datasets.forEach(function (dataset) {\n        if (!dataset.label) {\n          shouldWarn = true;\n        }\n      });\n\n      if (shouldWarn) {\n        console.error('[react-chartjs-2] Warning: Each dataset needs a unique key. By default, the \"label\" property on each dataset is used. Alternatively, you may provide a \"datasetKeyProvider\" as a prop that returns a unique key.');\n      }\n    }\n  };\n\n  ChartComponent.prototype.updateChart = function updateChart() {\n    var _this2 = this;\n\n    var options = this.props.options;\n    var data = this.memoizeDataProps(this.props);\n    if (!this.chartInstance) return;\n\n    if (options) {\n      this.chartInstance.options = Chart.helpers.configMerge(this.chartInstance.options, options);\n    } // Pipe datasets to chart instance datasets enabling\n    // seamless transitions\n\n\n    var currentDatasets = this.chartInstance.config.data && this.chartInstance.config.data.datasets || [];\n    var nextDatasets = data.datasets || [];\n    this.checkDatasets(currentDatasets);\n    var currentDatasetsIndexed = keyBy(currentDatasets, this.props.datasetKeyProvider); // We can safely replace the dataset array, as long as we retain the _meta property\n    // on each dataset.\n\n    this.chartInstance.config.data.datasets = nextDatasets.map(function (next) {\n      var current = currentDatasetsIndexed[_this2.props.datasetKeyProvider(next)];\n\n      if (current && current.type === next.type) {\n        // The data array must be edited in place. As chart.js adds listeners to it.\n        current.data.splice(next.data.length);\n        next.data.forEach(function (point, pid) {\n          current.data[pid] = next.data[pid];\n        });\n\n        var _data = next.data,\n            otherProps = _objectWithoutProperties(next, ['data']); // Merge properties. Notice a weakness here. If a property is removed\n        // from next, it will be retained by current and never disappears.\n        // Workaround is to set value to null or undefined in next.\n\n\n        return _extends({}, current, otherProps);\n      } else {\n        return next;\n      }\n    });\n\n    var datasets = data.datasets,\n        rest = _objectWithoutProperties(data, ['datasets']);\n\n    this.chartInstance.config.data = _extends({}, this.chartInstance.config.data, rest);\n    this.chartInstance.update();\n  };\n\n  ChartComponent.prototype.renderChart = function renderChart() {\n    var _props2 = this.props,\n        options = _props2.options,\n        legend = _props2.legend,\n        type = _props2.type,\n        redraw = _props2.redraw,\n        plugins = _props2.plugins;\n    var node = this.element;\n    var data = this.memoizeDataProps();\n\n    if (typeof legend !== 'undefined' && !isEqual(ChartComponent.defaultProps.legend, legend)) {\n      options.legend = legend;\n    }\n\n    this.chartInstance = new Chart(node, {\n      type: type,\n      data: data,\n      options: options,\n      plugins: plugins\n    });\n  };\n\n  ChartComponent.prototype.render = function render() {\n    var _props3 = this.props,\n        height = _props3.height,\n        width = _props3.width,\n        onElementsClick = _props3.onElementsClick,\n        id = _props3.id;\n    return React.createElement('canvas', {\n      ref: this.ref,\n      height: height,\n      width: width,\n      id: id,\n      onClick: this.handleOnClick\n    });\n  };\n\n  return ChartComponent;\n}(React.Component);\n\nChartComponent.getLabelAsKey = function (d) {\n  return d.label;\n};\n\nChartComponent.propTypes = {\n  data: PropTypes.oneOfType([PropTypes.object, PropTypes.func]).isRequired,\n  getDatasetAtEvent: PropTypes.func,\n  getElementAtEvent: PropTypes.func,\n  getElementsAtEvent: PropTypes.func,\n  height: PropTypes.number,\n  legend: PropTypes.object,\n  onElementsClick: PropTypes.func,\n  options: PropTypes.object,\n  plugins: PropTypes.arrayOf(PropTypes.object),\n  redraw: PropTypes.bool,\n  type: function type(props, propName, componentName) {\n    if (!Chart.controllers[props[propName]]) {\n      return new Error('Invalid chart type `' + props[propName] + '` supplied to' + ' `' + componentName + '`.');\n    }\n  },\n  width: PropTypes.number,\n  datasetKeyProvider: PropTypes.func\n};\nChartComponent.defaultProps = {\n  legend: {\n    display: true,\n    position: 'bottom'\n  },\n  type: 'doughnut',\n  height: 150,\n  width: 300,\n  redraw: false,\n  options: {},\n  datasetKeyProvider: ChartComponent.getLabelAsKey\n};\nexport default ChartComponent;\nexport var Doughnut = function (_React$Component2) {\n  _inherits(Doughnut, _React$Component2);\n\n  function Doughnut() {\n    _classCallCheck(this, Doughnut);\n\n    return _possibleConstructorReturn(this, _React$Component2.apply(this, arguments));\n  }\n\n  Doughnut.prototype.render = function render() {\n    var _this4 = this;\n\n    return React.createElement(ChartComponent, _extends({}, this.props, {\n      ref: function ref(_ref) {\n        return _this4.chartInstance = _ref && _ref.chartInstance;\n      },\n      type: 'doughnut'\n    }));\n  };\n\n  return Doughnut;\n}(React.Component);\nexport var Pie = function (_React$Component3) {\n  _inherits(Pie, _React$Component3);\n\n  function Pie() {\n    _classCallCheck(this, Pie);\n\n    return _possibleConstructorReturn(this, _React$Component3.apply(this, arguments));\n  }\n\n  Pie.prototype.render = function render() {\n    var _this6 = this;\n\n    return React.createElement(ChartComponent, _extends({}, this.props, {\n      ref: function ref(_ref2) {\n        return _this6.chartInstance = _ref2 && _ref2.chartInstance;\n      },\n      type: 'pie'\n    }));\n  };\n\n  return Pie;\n}(React.Component);\nexport var Line = function (_React$Component4) {\n  _inherits(Line, _React$Component4);\n\n  function Line() {\n    _classCallCheck(this, Line);\n\n    return _possibleConstructorReturn(this, _React$Component4.apply(this, arguments));\n  }\n\n  Line.prototype.render = function render() {\n    var _this8 = this;\n\n    return React.createElement(ChartComponent, _extends({}, this.props, {\n      ref: function ref(_ref3) {\n        return _this8.chartInstance = _ref3 && _ref3.chartInstance;\n      },\n      type: 'line'\n    }));\n  };\n\n  return Line;\n}(React.Component);\nexport var Bar = function (_React$Component5) {\n  _inherits(Bar, _React$Component5);\n\n  function Bar() {\n    _classCallCheck(this, Bar);\n\n    return _possibleConstructorReturn(this, _React$Component5.apply(this, arguments));\n  }\n\n  Bar.prototype.render = function render() {\n    var _this10 = this;\n\n    return React.createElement(ChartComponent, _extends({}, this.props, {\n      ref: function ref(_ref4) {\n        return _this10.chartInstance = _ref4 && _ref4.chartInstance;\n      },\n      type: 'bar'\n    }));\n  };\n\n  return Bar;\n}(React.Component);\nexport var HorizontalBar = function (_React$Component6) {\n  _inherits(HorizontalBar, _React$Component6);\n\n  function HorizontalBar() {\n    _classCallCheck(this, HorizontalBar);\n\n    return _possibleConstructorReturn(this, _React$Component6.apply(this, arguments));\n  }\n\n  HorizontalBar.prototype.render = function render() {\n    var _this12 = this;\n\n    return React.createElement(ChartComponent, _extends({}, this.props, {\n      ref: function ref(_ref5) {\n        return _this12.chartInstance = _ref5 && _ref5.chartInstance;\n      },\n      type: 'horizontalBar'\n    }));\n  };\n\n  return HorizontalBar;\n}(React.Component);\nexport var Radar = function (_React$Component7) {\n  _inherits(Radar, _React$Component7);\n\n  function Radar() {\n    _classCallCheck(this, Radar);\n\n    return _possibleConstructorReturn(this, _React$Component7.apply(this, arguments));\n  }\n\n  Radar.prototype.render = function render() {\n    var _this14 = this;\n\n    return React.createElement(ChartComponent, _extends({}, this.props, {\n      ref: function ref(_ref6) {\n        return _this14.chartInstance = _ref6 && _ref6.chartInstance;\n      },\n      type: 'radar'\n    }));\n  };\n\n  return Radar;\n}(React.Component);\nexport var Polar = function (_React$Component8) {\n  _inherits(Polar, _React$Component8);\n\n  function Polar() {\n    _classCallCheck(this, Polar);\n\n    return _possibleConstructorReturn(this, _React$Component8.apply(this, arguments));\n  }\n\n  Polar.prototype.render = function render() {\n    var _this16 = this;\n\n    return React.createElement(ChartComponent, _extends({}, this.props, {\n      ref: function ref(_ref7) {\n        return _this16.chartInstance = _ref7 && _ref7.chartInstance;\n      },\n      type: 'polarArea'\n    }));\n  };\n\n  return Polar;\n}(React.Component);\nexport var Bubble = function (_React$Component9) {\n  _inherits(Bubble, _React$Component9);\n\n  function Bubble() {\n    _classCallCheck(this, Bubble);\n\n    return _possibleConstructorReturn(this, _React$Component9.apply(this, arguments));\n  }\n\n  Bubble.prototype.render = function render() {\n    var _this18 = this;\n\n    return React.createElement(ChartComponent, _extends({}, this.props, {\n      ref: function ref(_ref8) {\n        return _this18.chartInstance = _ref8 && _ref8.chartInstance;\n      },\n      type: 'bubble'\n    }));\n  };\n\n  return Bubble;\n}(React.Component);\nexport var Scatter = function (_React$Component10) {\n  _inherits(Scatter, _React$Component10);\n\n  function Scatter() {\n    _classCallCheck(this, Scatter);\n\n    return _possibleConstructorReturn(this, _React$Component10.apply(this, arguments));\n  }\n\n  Scatter.prototype.render = function render() {\n    var _this20 = this;\n\n    return React.createElement(ChartComponent, _extends({}, this.props, {\n      ref: function ref(_ref9) {\n        return _this20.chartInstance = _ref9 && _ref9.chartInstance;\n      },\n      type: 'scatter'\n    }));\n  };\n\n  return Scatter;\n}(React.Component);\nexport var defaults = Chart.defaults;\nexport { Chart };","var baseIteratee = require('./_baseIteratee'),\n    isArrayLike = require('./isArrayLike'),\n    keys = require('./keys');\n/**\n * Creates a `_.find` or `_.findLast` function.\n *\n * @private\n * @param {Function} findIndexFunc The function to find the collection index.\n * @returns {Function} Returns the new find function.\n */\n\n\nfunction createFind(findIndexFunc) {\n  return function (collection, predicate, fromIndex) {\n    var iterable = Object(collection);\n\n    if (!isArrayLike(collection)) {\n      var iteratee = baseIteratee(predicate, 3);\n      collection = keys(collection);\n\n      predicate = function predicate(key) {\n        return iteratee(iterable[key], key, iterable);\n      };\n    }\n\n    var index = findIndexFunc(collection, predicate, fromIndex);\n    return index > -1 ? iterable[iteratee ? collection[index] : index] : undefined;\n  };\n}\n\nmodule.exports = createFind;","/*!\n * Chart.js v2.8.0\n * https://www.chartjs.org\n * (c) 2019 Chart.js Contributors\n * Released under the MIT License\n */\n(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(function () {\n    try {\n      return require('moment');\n    } catch (e) {}\n  }()) : typeof define === 'function' && define.amd ? define(['require'], function (require) {\n    return factory(function () {\n      try {\n        return require('moment');\n      } catch (e) {}\n    }());\n  }) : global.Chart = factory(global.moment);\n})(this, function (moment) {\n  'use strict';\n\n  moment = moment && moment.hasOwnProperty('default') ? moment['default'] : moment;\n  /* MIT license */\n\n  var conversions = {\n    rgb2hsl: rgb2hsl,\n    rgb2hsv: rgb2hsv,\n    rgb2hwb: rgb2hwb,\n    rgb2cmyk: rgb2cmyk,\n    rgb2keyword: rgb2keyword,\n    rgb2xyz: rgb2xyz,\n    rgb2lab: rgb2lab,\n    rgb2lch: rgb2lch,\n    hsl2rgb: hsl2rgb,\n    hsl2hsv: hsl2hsv,\n    hsl2hwb: hsl2hwb,\n    hsl2cmyk: hsl2cmyk,\n    hsl2keyword: hsl2keyword,\n    hsv2rgb: hsv2rgb,\n    hsv2hsl: hsv2hsl,\n    hsv2hwb: hsv2hwb,\n    hsv2cmyk: hsv2cmyk,\n    hsv2keyword: hsv2keyword,\n    hwb2rgb: hwb2rgb,\n    hwb2hsl: hwb2hsl,\n    hwb2hsv: hwb2hsv,\n    hwb2cmyk: hwb2cmyk,\n    hwb2keyword: hwb2keyword,\n    cmyk2rgb: cmyk2rgb,\n    cmyk2hsl: cmyk2hsl,\n    cmyk2hsv: cmyk2hsv,\n    cmyk2hwb: cmyk2hwb,\n    cmyk2keyword: cmyk2keyword,\n    keyword2rgb: keyword2rgb,\n    keyword2hsl: keyword2hsl,\n    keyword2hsv: keyword2hsv,\n    keyword2hwb: keyword2hwb,\n    keyword2cmyk: keyword2cmyk,\n    keyword2lab: keyword2lab,\n    keyword2xyz: keyword2xyz,\n    xyz2rgb: xyz2rgb,\n    xyz2lab: xyz2lab,\n    xyz2lch: xyz2lch,\n    lab2xyz: lab2xyz,\n    lab2rgb: lab2rgb,\n    lab2lch: lab2lch,\n    lch2lab: lch2lab,\n    lch2xyz: lch2xyz,\n    lch2rgb: lch2rgb\n  };\n\n  function rgb2hsl(rgb) {\n    var r = rgb[0] / 255,\n        g = rgb[1] / 255,\n        b = rgb[2] / 255,\n        min = Math.min(r, g, b),\n        max = Math.max(r, g, b),\n        delta = max - min,\n        h,\n        s,\n        l;\n    if (max == min) h = 0;else if (r == max) h = (g - b) / delta;else if (g == max) h = 2 + (b - r) / delta;else if (b == max) h = 4 + (r - g) / delta;\n    h = Math.min(h * 60, 360);\n    if (h < 0) h += 360;\n    l = (min + max) / 2;\n    if (max == min) s = 0;else if (l <= 0.5) s = delta / (max + min);else s = delta / (2 - max - min);\n    return [h, s * 100, l * 100];\n  }\n\n  function rgb2hsv(rgb) {\n    var r = rgb[0],\n        g = rgb[1],\n        b = rgb[2],\n        min = Math.min(r, g, b),\n        max = Math.max(r, g, b),\n        delta = max - min,\n        h,\n        s,\n        v;\n    if (max == 0) s = 0;else s = delta / max * 1000 / 10;\n    if (max == min) h = 0;else if (r == max) h = (g - b) / delta;else if (g == max) h = 2 + (b - r) / delta;else if (b == max) h = 4 + (r - g) / delta;\n    h = Math.min(h * 60, 360);\n    if (h < 0) h += 360;\n    v = max / 255 * 1000 / 10;\n    return [h, s, v];\n  }\n\n  function rgb2hwb(rgb) {\n    var r = rgb[0],\n        g = rgb[1],\n        b = rgb[2],\n        h = rgb2hsl(rgb)[0],\n        w = 1 / 255 * Math.min(r, Math.min(g, b)),\n        b = 1 - 1 / 255 * Math.max(r, Math.max(g, b));\n    return [h, w * 100, b * 100];\n  }\n\n  function rgb2cmyk(rgb) {\n    var r = rgb[0] / 255,\n        g = rgb[1] / 255,\n        b = rgb[2] / 255,\n        c,\n        m,\n        y,\n        k;\n    k = Math.min(1 - r, 1 - g, 1 - b);\n    c = (1 - r - k) / (1 - k) || 0;\n    m = (1 - g - k) / (1 - k) || 0;\n    y = (1 - b - k) / (1 - k) || 0;\n    return [c * 100, m * 100, y * 100, k * 100];\n  }\n\n  function rgb2keyword(rgb) {\n    return reverseKeywords[JSON.stringify(rgb)];\n  }\n\n  function rgb2xyz(rgb) {\n    var r = rgb[0] / 255,\n        g = rgb[1] / 255,\n        b = rgb[2] / 255; // assume sRGB\n\n    r = r > 0.04045 ? Math.pow((r + 0.055) / 1.055, 2.4) : r / 12.92;\n    g = g > 0.04045 ? Math.pow((g + 0.055) / 1.055, 2.4) : g / 12.92;\n    b = b > 0.04045 ? Math.pow((b + 0.055) / 1.055, 2.4) : b / 12.92;\n    var x = r * 0.4124 + g * 0.3576 + b * 0.1805;\n    var y = r * 0.2126 + g * 0.7152 + b * 0.0722;\n    var z = r * 0.0193 + g * 0.1192 + b * 0.9505;\n    return [x * 100, y * 100, z * 100];\n  }\n\n  function rgb2lab(rgb) {\n    var xyz = rgb2xyz(rgb),\n        x = xyz[0],\n        y = xyz[1],\n        z = xyz[2],\n        l,\n        a,\n        b;\n    x /= 95.047;\n    y /= 100;\n    z /= 108.883;\n    x = x > 0.008856 ? Math.pow(x, 1 / 3) : 7.787 * x + 16 / 116;\n    y = y > 0.008856 ? Math.pow(y, 1 / 3) : 7.787 * y + 16 / 116;\n    z = z > 0.008856 ? Math.pow(z, 1 / 3) : 7.787 * z + 16 / 116;\n    l = 116 * y - 16;\n    a = 500 * (x - y);\n    b = 200 * (y - z);\n    return [l, a, b];\n  }\n\n  function rgb2lch(args) {\n    return lab2lch(rgb2lab(args));\n  }\n\n  function hsl2rgb(hsl) {\n    var h = hsl[0] / 360,\n        s = hsl[1] / 100,\n        l = hsl[2] / 100,\n        t1,\n        t2,\n        t3,\n        rgb,\n        val;\n\n    if (s == 0) {\n      val = l * 255;\n      return [val, val, val];\n    }\n\n    if (l < 0.5) t2 = l * (1 + s);else t2 = l + s - l * s;\n    t1 = 2 * l - t2;\n    rgb = [0, 0, 0];\n\n    for (var i = 0; i < 3; i++) {\n      t3 = h + 1 / 3 * -(i - 1);\n      t3 < 0 && t3++;\n      t3 > 1 && t3--;\n      if (6 * t3 < 1) val = t1 + (t2 - t1) * 6 * t3;else if (2 * t3 < 1) val = t2;else if (3 * t3 < 2) val = t1 + (t2 - t1) * (2 / 3 - t3) * 6;else val = t1;\n      rgb[i] = val * 255;\n    }\n\n    return rgb;\n  }\n\n  function hsl2hsv(hsl) {\n    var h = hsl[0],\n        s = hsl[1] / 100,\n        l = hsl[2] / 100,\n        sv,\n        v;\n\n    if (l === 0) {\n      // no need to do calc on black\n      // also avoids divide by 0 error\n      return [0, 0, 0];\n    }\n\n    l *= 2;\n    s *= l <= 1 ? l : 2 - l;\n    v = (l + s) / 2;\n    sv = 2 * s / (l + s);\n    return [h, sv * 100, v * 100];\n  }\n\n  function hsl2hwb(args) {\n    return rgb2hwb(hsl2rgb(args));\n  }\n\n  function hsl2cmyk(args) {\n    return rgb2cmyk(hsl2rgb(args));\n  }\n\n  function hsl2keyword(args) {\n    return rgb2keyword(hsl2rgb(args));\n  }\n\n  function hsv2rgb(hsv) {\n    var h = hsv[0] / 60,\n        s = hsv[1] / 100,\n        v = hsv[2] / 100,\n        hi = Math.floor(h) % 6;\n    var f = h - Math.floor(h),\n        p = 255 * v * (1 - s),\n        q = 255 * v * (1 - s * f),\n        t = 255 * v * (1 - s * (1 - f)),\n        v = 255 * v;\n\n    switch (hi) {\n      case 0:\n        return [v, t, p];\n\n      case 1:\n        return [q, v, p];\n\n      case 2:\n        return [p, v, t];\n\n      case 3:\n        return [p, q, v];\n\n      case 4:\n        return [t, p, v];\n\n      case 5:\n        return [v, p, q];\n    }\n  }\n\n  function hsv2hsl(hsv) {\n    var h = hsv[0],\n        s = hsv[1] / 100,\n        v = hsv[2] / 100,\n        sl,\n        l;\n    l = (2 - s) * v;\n    sl = s * v;\n    sl /= l <= 1 ? l : 2 - l;\n    sl = sl || 0;\n    l /= 2;\n    return [h, sl * 100, l * 100];\n  }\n\n  function hsv2hwb(args) {\n    return rgb2hwb(hsv2rgb(args));\n  }\n\n  function hsv2cmyk(args) {\n    return rgb2cmyk(hsv2rgb(args));\n  }\n\n  function hsv2keyword(args) {\n    return rgb2keyword(hsv2rgb(args));\n  } // http://dev.w3.org/csswg/css-color/#hwb-to-rgb\n\n\n  function hwb2rgb(hwb) {\n    var h = hwb[0] / 360,\n        wh = hwb[1] / 100,\n        bl = hwb[2] / 100,\n        ratio = wh + bl,\n        i,\n        v,\n        f,\n        n; // wh + bl cant be > 1\n\n    if (ratio > 1) {\n      wh /= ratio;\n      bl /= ratio;\n    }\n\n    i = Math.floor(6 * h);\n    v = 1 - bl;\n    f = 6 * h - i;\n\n    if ((i & 0x01) != 0) {\n      f = 1 - f;\n    }\n\n    n = wh + f * (v - wh); // linear interpolation\n\n    switch (i) {\n      default:\n      case 6:\n      case 0:\n        r = v;\n        g = n;\n        b = wh;\n        break;\n\n      case 1:\n        r = n;\n        g = v;\n        b = wh;\n        break;\n\n      case 2:\n        r = wh;\n        g = v;\n        b = n;\n        break;\n\n      case 3:\n        r = wh;\n        g = n;\n        b = v;\n        break;\n\n      case 4:\n        r = n;\n        g = wh;\n        b = v;\n        break;\n\n      case 5:\n        r = v;\n        g = wh;\n        b = n;\n        break;\n    }\n\n    return [r * 255, g * 255, b * 255];\n  }\n\n  function hwb2hsl(args) {\n    return rgb2hsl(hwb2rgb(args));\n  }\n\n  function hwb2hsv(args) {\n    return rgb2hsv(hwb2rgb(args));\n  }\n\n  function hwb2cmyk(args) {\n    return rgb2cmyk(hwb2rgb(args));\n  }\n\n  function hwb2keyword(args) {\n    return rgb2keyword(hwb2rgb(args));\n  }\n\n  function cmyk2rgb(cmyk) {\n    var c = cmyk[0] / 100,\n        m = cmyk[1] / 100,\n        y = cmyk[2] / 100,\n        k = cmyk[3] / 100,\n        r,\n        g,\n        b;\n    r = 1 - Math.min(1, c * (1 - k) + k);\n    g = 1 - Math.min(1, m * (1 - k) + k);\n    b = 1 - Math.min(1, y * (1 - k) + k);\n    return [r * 255, g * 255, b * 255];\n  }\n\n  function cmyk2hsl(args) {\n    return rgb2hsl(cmyk2rgb(args));\n  }\n\n  function cmyk2hsv(args) {\n    return rgb2hsv(cmyk2rgb(args));\n  }\n\n  function cmyk2hwb(args) {\n    return rgb2hwb(cmyk2rgb(args));\n  }\n\n  function cmyk2keyword(args) {\n    return rgb2keyword(cmyk2rgb(args));\n  }\n\n  function xyz2rgb(xyz) {\n    var x = xyz[0] / 100,\n        y = xyz[1] / 100,\n        z = xyz[2] / 100,\n        r,\n        g,\n        b;\n    r = x * 3.2406 + y * -1.5372 + z * -0.4986;\n    g = x * -0.9689 + y * 1.8758 + z * 0.0415;\n    b = x * 0.0557 + y * -0.2040 + z * 1.0570; // assume sRGB\n\n    r = r > 0.0031308 ? 1.055 * Math.pow(r, 1.0 / 2.4) - 0.055 : r = r * 12.92;\n    g = g > 0.0031308 ? 1.055 * Math.pow(g, 1.0 / 2.4) - 0.055 : g = g * 12.92;\n    b = b > 0.0031308 ? 1.055 * Math.pow(b, 1.0 / 2.4) - 0.055 : b = b * 12.92;\n    r = Math.min(Math.max(0, r), 1);\n    g = Math.min(Math.max(0, g), 1);\n    b = Math.min(Math.max(0, b), 1);\n    return [r * 255, g * 255, b * 255];\n  }\n\n  function xyz2lab(xyz) {\n    var x = xyz[0],\n        y = xyz[1],\n        z = xyz[2],\n        l,\n        a,\n        b;\n    x /= 95.047;\n    y /= 100;\n    z /= 108.883;\n    x = x > 0.008856 ? Math.pow(x, 1 / 3) : 7.787 * x + 16 / 116;\n    y = y > 0.008856 ? Math.pow(y, 1 / 3) : 7.787 * y + 16 / 116;\n    z = z > 0.008856 ? Math.pow(z, 1 / 3) : 7.787 * z + 16 / 116;\n    l = 116 * y - 16;\n    a = 500 * (x - y);\n    b = 200 * (y - z);\n    return [l, a, b];\n  }\n\n  function xyz2lch(args) {\n    return lab2lch(xyz2lab(args));\n  }\n\n  function lab2xyz(lab) {\n    var l = lab[0],\n        a = lab[1],\n        b = lab[2],\n        x,\n        y,\n        z,\n        y2;\n\n    if (l <= 8) {\n      y = l * 100 / 903.3;\n      y2 = 7.787 * (y / 100) + 16 / 116;\n    } else {\n      y = 100 * Math.pow((l + 16) / 116, 3);\n      y2 = Math.pow(y / 100, 1 / 3);\n    }\n\n    x = x / 95.047 <= 0.008856 ? x = 95.047 * (a / 500 + y2 - 16 / 116) / 7.787 : 95.047 * Math.pow(a / 500 + y2, 3);\n    z = z / 108.883 <= 0.008859 ? z = 108.883 * (y2 - b / 200 - 16 / 116) / 7.787 : 108.883 * Math.pow(y2 - b / 200, 3);\n    return [x, y, z];\n  }\n\n  function lab2lch(lab) {\n    var l = lab[0],\n        a = lab[1],\n        b = lab[2],\n        hr,\n        h,\n        c;\n    hr = Math.atan2(b, a);\n    h = hr * 360 / 2 / Math.PI;\n\n    if (h < 0) {\n      h += 360;\n    }\n\n    c = Math.sqrt(a * a + b * b);\n    return [l, c, h];\n  }\n\n  function lab2rgb(args) {\n    return xyz2rgb(lab2xyz(args));\n  }\n\n  function lch2lab(lch) {\n    var l = lch[0],\n        c = lch[1],\n        h = lch[2],\n        a,\n        b,\n        hr;\n    hr = h / 360 * 2 * Math.PI;\n    a = c * Math.cos(hr);\n    b = c * Math.sin(hr);\n    return [l, a, b];\n  }\n\n  function lch2xyz(args) {\n    return lab2xyz(lch2lab(args));\n  }\n\n  function lch2rgb(args) {\n    return lab2rgb(lch2lab(args));\n  }\n\n  function keyword2rgb(keyword) {\n    return cssKeywords[keyword];\n  }\n\n  function keyword2hsl(args) {\n    return rgb2hsl(keyword2rgb(args));\n  }\n\n  function keyword2hsv(args) {\n    return rgb2hsv(keyword2rgb(args));\n  }\n\n  function keyword2hwb(args) {\n    return rgb2hwb(keyword2rgb(args));\n  }\n\n  function keyword2cmyk(args) {\n    return rgb2cmyk(keyword2rgb(args));\n  }\n\n  function keyword2lab(args) {\n    return rgb2lab(keyword2rgb(args));\n  }\n\n  function keyword2xyz(args) {\n    return rgb2xyz(keyword2rgb(args));\n  }\n\n  var cssKeywords = {\n    aliceblue: [240, 248, 255],\n    antiquewhite: [250, 235, 215],\n    aqua: [0, 255, 255],\n    aquamarine: [127, 255, 212],\n    azure: [240, 255, 255],\n    beige: [245, 245, 220],\n    bisque: [255, 228, 196],\n    black: [0, 0, 0],\n    blanchedalmond: [255, 235, 205],\n    blue: [0, 0, 255],\n    blueviolet: [138, 43, 226],\n    brown: [165, 42, 42],\n    burlywood: [222, 184, 135],\n    cadetblue: [95, 158, 160],\n    chartreuse: [127, 255, 0],\n    chocolate: [210, 105, 30],\n    coral: [255, 127, 80],\n    cornflowerblue: [100, 149, 237],\n    cornsilk: [255, 248, 220],\n    crimson: [220, 20, 60],\n    cyan: [0, 255, 255],\n    darkblue: [0, 0, 139],\n    darkcyan: [0, 139, 139],\n    darkgoldenrod: [184, 134, 11],\n    darkgray: [169, 169, 169],\n    darkgreen: [0, 100, 0],\n    darkgrey: [169, 169, 169],\n    darkkhaki: [189, 183, 107],\n    darkmagenta: [139, 0, 139],\n    darkolivegreen: [85, 107, 47],\n    darkorange: [255, 140, 0],\n    darkorchid: [153, 50, 204],\n    darkred: [139, 0, 0],\n    darksalmon: [233, 150, 122],\n    darkseagreen: [143, 188, 143],\n    darkslateblue: [72, 61, 139],\n    darkslategray: [47, 79, 79],\n    darkslategrey: [47, 79, 79],\n    darkturquoise: [0, 206, 209],\n    darkviolet: [148, 0, 211],\n    deeppink: [255, 20, 147],\n    deepskyblue: [0, 191, 255],\n    dimgray: [105, 105, 105],\n    dimgrey: [105, 105, 105],\n    dodgerblue: [30, 144, 255],\n    firebrick: [178, 34, 34],\n    floralwhite: [255, 250, 240],\n    forestgreen: [34, 139, 34],\n    fuchsia: [255, 0, 255],\n    gainsboro: [220, 220, 220],\n    ghostwhite: [248, 248, 255],\n    gold: [255, 215, 0],\n    goldenrod: [218, 165, 32],\n    gray: [128, 128, 128],\n    green: [0, 128, 0],\n    greenyellow: [173, 255, 47],\n    grey: [128, 128, 128],\n    honeydew: [240, 255, 240],\n    hotpink: [255, 105, 180],\n    indianred: [205, 92, 92],\n    indigo: [75, 0, 130],\n    ivory: [255, 255, 240],\n    khaki: [240, 230, 140],\n    lavender: [230, 230, 250],\n    lavenderblush: [255, 240, 245],\n    lawngreen: [124, 252, 0],\n    lemonchiffon: [255, 250, 205],\n    lightblue: [173, 216, 230],\n    lightcoral: [240, 128, 128],\n    lightcyan: [224, 255, 255],\n    lightgoldenrodyellow: [250, 250, 210],\n    lightgray: [211, 211, 211],\n    lightgreen: [144, 238, 144],\n    lightgrey: [211, 211, 211],\n    lightpink: [255, 182, 193],\n    lightsalmon: [255, 160, 122],\n    lightseagreen: [32, 178, 170],\n    lightskyblue: [135, 206, 250],\n    lightslategray: [119, 136, 153],\n    lightslategrey: [119, 136, 153],\n    lightsteelblue: [176, 196, 222],\n    lightyellow: [255, 255, 224],\n    lime: [0, 255, 0],\n    limegreen: [50, 205, 50],\n    linen: [250, 240, 230],\n    magenta: [255, 0, 255],\n    maroon: [128, 0, 0],\n    mediumaquamarine: [102, 205, 170],\n    mediumblue: [0, 0, 205],\n    mediumorchid: [186, 85, 211],\n    mediumpurple: [147, 112, 219],\n    mediumseagreen: [60, 179, 113],\n    mediumslateblue: [123, 104, 238],\n    mediumspringgreen: [0, 250, 154],\n    mediumturquoise: [72, 209, 204],\n    mediumvioletred: [199, 21, 133],\n    midnightblue: [25, 25, 112],\n    mintcream: [245, 255, 250],\n    mistyrose: [255, 228, 225],\n    moccasin: [255, 228, 181],\n    navajowhite: [255, 222, 173],\n    navy: [0, 0, 128],\n    oldlace: [253, 245, 230],\n    olive: [128, 128, 0],\n    olivedrab: [107, 142, 35],\n    orange: [255, 165, 0],\n    orangered: [255, 69, 0],\n    orchid: [218, 112, 214],\n    palegoldenrod: [238, 232, 170],\n    palegreen: [152, 251, 152],\n    paleturquoise: [175, 238, 238],\n    palevioletred: [219, 112, 147],\n    papayawhip: [255, 239, 213],\n    peachpuff: [255, 218, 185],\n    peru: [205, 133, 63],\n    pink: [255, 192, 203],\n    plum: [221, 160, 221],\n    powderblue: [176, 224, 230],\n    purple: [128, 0, 128],\n    rebeccapurple: [102, 51, 153],\n    red: [255, 0, 0],\n    rosybrown: [188, 143, 143],\n    royalblue: [65, 105, 225],\n    saddlebrown: [139, 69, 19],\n    salmon: [250, 128, 114],\n    sandybrown: [244, 164, 96],\n    seagreen: [46, 139, 87],\n    seashell: [255, 245, 238],\n    sienna: [160, 82, 45],\n    silver: [192, 192, 192],\n    skyblue: [135, 206, 235],\n    slateblue: [106, 90, 205],\n    slategray: [112, 128, 144],\n    slategrey: [112, 128, 144],\n    snow: [255, 250, 250],\n    springgreen: [0, 255, 127],\n    steelblue: [70, 130, 180],\n    tan: [210, 180, 140],\n    teal: [0, 128, 128],\n    thistle: [216, 191, 216],\n    tomato: [255, 99, 71],\n    turquoise: [64, 224, 208],\n    violet: [238, 130, 238],\n    wheat: [245, 222, 179],\n    white: [255, 255, 255],\n    whitesmoke: [245, 245, 245],\n    yellow: [255, 255, 0],\n    yellowgreen: [154, 205, 50]\n  };\n  var reverseKeywords = {};\n\n  for (var key in cssKeywords) {\n    reverseKeywords[JSON.stringify(cssKeywords[key])] = key;\n  }\n\n  var convert = function convert() {\n    return new Converter();\n  };\n\n  for (var func in conversions) {\n    // export Raw versions\n    convert[func + \"Raw\"] = function (func) {\n      // accept array or plain args\n      return function (arg) {\n        if (typeof arg == \"number\") arg = Array.prototype.slice.call(arguments);\n        return conversions[func](arg);\n      };\n    }(func);\n\n    var pair = /(\\w+)2(\\w+)/.exec(func),\n        from = pair[1],\n        to = pair[2]; // export rgb2hsl and [\"rgb\"][\"hsl\"]\n\n    convert[from] = convert[from] || {};\n\n    convert[from][to] = convert[func] = function (func) {\n      return function (arg) {\n        if (typeof arg == \"number\") arg = Array.prototype.slice.call(arguments);\n        var val = conversions[func](arg);\n        if (typeof val == \"string\" || val === undefined) return val; // keyword\n\n        for (var i = 0; i < val.length; i++) {\n          val[i] = Math.round(val[i]);\n        }\n\n        return val;\n      };\n    }(func);\n  }\n  /* Converter does lazy conversion and caching */\n\n\n  var Converter = function Converter() {\n    this.convs = {};\n  };\n  /* Either get the values for a space or\n    set the values for a space, depending on args */\n\n\n  Converter.prototype.routeSpace = function (space, args) {\n    var values = args[0];\n\n    if (values === undefined) {\n      // color.rgb()\n      return this.getValues(space);\n    } // color.rgb(10, 10, 10)\n\n\n    if (typeof values == \"number\") {\n      values = Array.prototype.slice.call(args);\n    }\n\n    return this.setValues(space, values);\n  };\n  /* Set the values for a space, invalidating cache */\n\n\n  Converter.prototype.setValues = function (space, values) {\n    this.space = space;\n    this.convs = {};\n    this.convs[space] = values;\n    return this;\n  };\n  /* Get the values for a space. If there's already\n    a conversion for the space, fetch it, otherwise\n    compute it */\n\n\n  Converter.prototype.getValues = function (space) {\n    var vals = this.convs[space];\n\n    if (!vals) {\n      var fspace = this.space,\n          from = this.convs[fspace];\n      vals = convert[fspace][space](from);\n      this.convs[space] = vals;\n    }\n\n    return vals;\n  };\n\n  [\"rgb\", \"hsl\", \"hsv\", \"cmyk\", \"keyword\"].forEach(function (space) {\n    Converter.prototype[space] = function (vals) {\n      return this.routeSpace(space, arguments);\n    };\n  });\n  var colorConvert = convert;\n  var colorName = {\n    \"aliceblue\": [240, 248, 255],\n    \"antiquewhite\": [250, 235, 215],\n    \"aqua\": [0, 255, 255],\n    \"aquamarine\": [127, 255, 212],\n    \"azure\": [240, 255, 255],\n    \"beige\": [245, 245, 220],\n    \"bisque\": [255, 228, 196],\n    \"black\": [0, 0, 0],\n    \"blanchedalmond\": [255, 235, 205],\n    \"blue\": [0, 0, 255],\n    \"blueviolet\": [138, 43, 226],\n    \"brown\": [165, 42, 42],\n    \"burlywood\": [222, 184, 135],\n    \"cadetblue\": [95, 158, 160],\n    \"chartreuse\": [127, 255, 0],\n    \"chocolate\": [210, 105, 30],\n    \"coral\": [255, 127, 80],\n    \"cornflowerblue\": [100, 149, 237],\n    \"cornsilk\": [255, 248, 220],\n    \"crimson\": [220, 20, 60],\n    \"cyan\": [0, 255, 255],\n    \"darkblue\": [0, 0, 139],\n    \"darkcyan\": [0, 139, 139],\n    \"darkgoldenrod\": [184, 134, 11],\n    \"darkgray\": [169, 169, 169],\n    \"darkgreen\": [0, 100, 0],\n    \"darkgrey\": [169, 169, 169],\n    \"darkkhaki\": [189, 183, 107],\n    \"darkmagenta\": [139, 0, 139],\n    \"darkolivegreen\": [85, 107, 47],\n    \"darkorange\": [255, 140, 0],\n    \"darkorchid\": [153, 50, 204],\n    \"darkred\": [139, 0, 0],\n    \"darksalmon\": [233, 150, 122],\n    \"darkseagreen\": [143, 188, 143],\n    \"darkslateblue\": [72, 61, 139],\n    \"darkslategray\": [47, 79, 79],\n    \"darkslategrey\": [47, 79, 79],\n    \"darkturquoise\": [0, 206, 209],\n    \"darkviolet\": [148, 0, 211],\n    \"deeppink\": [255, 20, 147],\n    \"deepskyblue\": [0, 191, 255],\n    \"dimgray\": [105, 105, 105],\n    \"dimgrey\": [105, 105, 105],\n    \"dodgerblue\": [30, 144, 255],\n    \"firebrick\": [178, 34, 34],\n    \"floralwhite\": [255, 250, 240],\n    \"forestgreen\": [34, 139, 34],\n    \"fuchsia\": [255, 0, 255],\n    \"gainsboro\": [220, 220, 220],\n    \"ghostwhite\": [248, 248, 255],\n    \"gold\": [255, 215, 0],\n    \"goldenrod\": [218, 165, 32],\n    \"gray\": [128, 128, 128],\n    \"green\": [0, 128, 0],\n    \"greenyellow\": [173, 255, 47],\n    \"grey\": [128, 128, 128],\n    \"honeydew\": [240, 255, 240],\n    \"hotpink\": [255, 105, 180],\n    \"indianred\": [205, 92, 92],\n    \"indigo\": [75, 0, 130],\n    \"ivory\": [255, 255, 240],\n    \"khaki\": [240, 230, 140],\n    \"lavender\": [230, 230, 250],\n    \"lavenderblush\": [255, 240, 245],\n    \"lawngreen\": [124, 252, 0],\n    \"lemonchiffon\": [255, 250, 205],\n    \"lightblue\": [173, 216, 230],\n    \"lightcoral\": [240, 128, 128],\n    \"lightcyan\": [224, 255, 255],\n    \"lightgoldenrodyellow\": [250, 250, 210],\n    \"lightgray\": [211, 211, 211],\n    \"lightgreen\": [144, 238, 144],\n    \"lightgrey\": [211, 211, 211],\n    \"lightpink\": [255, 182, 193],\n    \"lightsalmon\": [255, 160, 122],\n    \"lightseagreen\": [32, 178, 170],\n    \"lightskyblue\": [135, 206, 250],\n    \"lightslategray\": [119, 136, 153],\n    \"lightslategrey\": [119, 136, 153],\n    \"lightsteelblue\": [176, 196, 222],\n    \"lightyellow\": [255, 255, 224],\n    \"lime\": [0, 255, 0],\n    \"limegreen\": [50, 205, 50],\n    \"linen\": [250, 240, 230],\n    \"magenta\": [255, 0, 255],\n    \"maroon\": [128, 0, 0],\n    \"mediumaquamarine\": [102, 205, 170],\n    \"mediumblue\": [0, 0, 205],\n    \"mediumorchid\": [186, 85, 211],\n    \"mediumpurple\": [147, 112, 219],\n    \"mediumseagreen\": [60, 179, 113],\n    \"mediumslateblue\": [123, 104, 238],\n    \"mediumspringgreen\": [0, 250, 154],\n    \"mediumturquoise\": [72, 209, 204],\n    \"mediumvioletred\": [199, 21, 133],\n    \"midnightblue\": [25, 25, 112],\n    \"mintcream\": [245, 255, 250],\n    \"mistyrose\": [255, 228, 225],\n    \"moccasin\": [255, 228, 181],\n    \"navajowhite\": [255, 222, 173],\n    \"navy\": [0, 0, 128],\n    \"oldlace\": [253, 245, 230],\n    \"olive\": [128, 128, 0],\n    \"olivedrab\": [107, 142, 35],\n    \"orange\": [255, 165, 0],\n    \"orangered\": [255, 69, 0],\n    \"orchid\": [218, 112, 214],\n    \"palegoldenrod\": [238, 232, 170],\n    \"palegreen\": [152, 251, 152],\n    \"paleturquoise\": [175, 238, 238],\n    \"palevioletred\": [219, 112, 147],\n    \"papayawhip\": [255, 239, 213],\n    \"peachpuff\": [255, 218, 185],\n    \"peru\": [205, 133, 63],\n    \"pink\": [255, 192, 203],\n    \"plum\": [221, 160, 221],\n    \"powderblue\": [176, 224, 230],\n    \"purple\": [128, 0, 128],\n    \"rebeccapurple\": [102, 51, 153],\n    \"red\": [255, 0, 0],\n    \"rosybrown\": [188, 143, 143],\n    \"royalblue\": [65, 105, 225],\n    \"saddlebrown\": [139, 69, 19],\n    \"salmon\": [250, 128, 114],\n    \"sandybrown\": [244, 164, 96],\n    \"seagreen\": [46, 139, 87],\n    \"seashell\": [255, 245, 238],\n    \"sienna\": [160, 82, 45],\n    \"silver\": [192, 192, 192],\n    \"skyblue\": [135, 206, 235],\n    \"slateblue\": [106, 90, 205],\n    \"slategray\": [112, 128, 144],\n    \"slategrey\": [112, 128, 144],\n    \"snow\": [255, 250, 250],\n    \"springgreen\": [0, 255, 127],\n    \"steelblue\": [70, 130, 180],\n    \"tan\": [210, 180, 140],\n    \"teal\": [0, 128, 128],\n    \"thistle\": [216, 191, 216],\n    \"tomato\": [255, 99, 71],\n    \"turquoise\": [64, 224, 208],\n    \"violet\": [238, 130, 238],\n    \"wheat\": [245, 222, 179],\n    \"white\": [255, 255, 255],\n    \"whitesmoke\": [245, 245, 245],\n    \"yellow\": [255, 255, 0],\n    \"yellowgreen\": [154, 205, 50]\n  };\n  /* MIT license */\n\n  var colorString = {\n    getRgba: getRgba,\n    getHsla: getHsla,\n    getRgb: getRgb,\n    getHsl: getHsl,\n    getHwb: getHwb,\n    getAlpha: getAlpha,\n    hexString: hexString,\n    rgbString: rgbString,\n    rgbaString: rgbaString,\n    percentString: percentString,\n    percentaString: percentaString,\n    hslString: hslString,\n    hslaString: hslaString,\n    hwbString: hwbString,\n    keyword: keyword\n  };\n\n  function getRgba(string) {\n    if (!string) {\n      return;\n    }\n\n    var abbr = /^#([a-fA-F0-9]{3,4})$/i,\n        hex = /^#([a-fA-F0-9]{6}([a-fA-F0-9]{2})?)$/i,\n        rgba = /^rgba?\\(\\s*([+-]?\\d+)\\s*,\\s*([+-]?\\d+)\\s*,\\s*([+-]?\\d+)\\s*(?:,\\s*([+-]?[\\d\\.]+)\\s*)?\\)$/i,\n        per = /^rgba?\\(\\s*([+-]?[\\d\\.]+)\\%\\s*,\\s*([+-]?[\\d\\.]+)\\%\\s*,\\s*([+-]?[\\d\\.]+)\\%\\s*(?:,\\s*([+-]?[\\d\\.]+)\\s*)?\\)$/i,\n        keyword = /(\\w+)/;\n    var rgb = [0, 0, 0],\n        a = 1,\n        match = string.match(abbr),\n        hexAlpha = \"\";\n\n    if (match) {\n      match = match[1];\n      hexAlpha = match[3];\n\n      for (var i = 0; i < rgb.length; i++) {\n        rgb[i] = parseInt(match[i] + match[i], 16);\n      }\n\n      if (hexAlpha) {\n        a = Math.round(parseInt(hexAlpha + hexAlpha, 16) / 255 * 100) / 100;\n      }\n    } else if (match = string.match(hex)) {\n      hexAlpha = match[2];\n      match = match[1];\n\n      for (var i = 0; i < rgb.length; i++) {\n        rgb[i] = parseInt(match.slice(i * 2, i * 2 + 2), 16);\n      }\n\n      if (hexAlpha) {\n        a = Math.round(parseInt(hexAlpha, 16) / 255 * 100) / 100;\n      }\n    } else if (match = string.match(rgba)) {\n      for (var i = 0; i < rgb.length; i++) {\n        rgb[i] = parseInt(match[i + 1]);\n      }\n\n      a = parseFloat(match[4]);\n    } else if (match = string.match(per)) {\n      for (var i = 0; i < rgb.length; i++) {\n        rgb[i] = Math.round(parseFloat(match[i + 1]) * 2.55);\n      }\n\n      a = parseFloat(match[4]);\n    } else if (match = string.match(keyword)) {\n      if (match[1] == \"transparent\") {\n        return [0, 0, 0, 0];\n      }\n\n      rgb = colorName[match[1]];\n\n      if (!rgb) {\n        return;\n      }\n    }\n\n    for (var i = 0; i < rgb.length; i++) {\n      rgb[i] = scale(rgb[i], 0, 255);\n    }\n\n    if (!a && a != 0) {\n      a = 1;\n    } else {\n      a = scale(a, 0, 1);\n    }\n\n    rgb[3] = a;\n    return rgb;\n  }\n\n  function getHsla(string) {\n    if (!string) {\n      return;\n    }\n\n    var hsl = /^hsla?\\(\\s*([+-]?\\d+)(?:deg)?\\s*,\\s*([+-]?[\\d\\.]+)%\\s*,\\s*([+-]?[\\d\\.]+)%\\s*(?:,\\s*([+-]?[\\d\\.]+)\\s*)?\\)/;\n    var match = string.match(hsl);\n\n    if (match) {\n      var alpha = parseFloat(match[4]);\n      var h = scale(parseInt(match[1]), 0, 360),\n          s = scale(parseFloat(match[2]), 0, 100),\n          l = scale(parseFloat(match[3]), 0, 100),\n          a = scale(isNaN(alpha) ? 1 : alpha, 0, 1);\n      return [h, s, l, a];\n    }\n  }\n\n  function getHwb(string) {\n    if (!string) {\n      return;\n    }\n\n    var hwb = /^hwb\\(\\s*([+-]?\\d+)(?:deg)?\\s*,\\s*([+-]?[\\d\\.]+)%\\s*,\\s*([+-]?[\\d\\.]+)%\\s*(?:,\\s*([+-]?[\\d\\.]+)\\s*)?\\)/;\n    var match = string.match(hwb);\n\n    if (match) {\n      var alpha = parseFloat(match[4]);\n      var h = scale(parseInt(match[1]), 0, 360),\n          w = scale(parseFloat(match[2]), 0, 100),\n          b = scale(parseFloat(match[3]), 0, 100),\n          a = scale(isNaN(alpha) ? 1 : alpha, 0, 1);\n      return [h, w, b, a];\n    }\n  }\n\n  function getRgb(string) {\n    var rgba = getRgba(string);\n    return rgba && rgba.slice(0, 3);\n  }\n\n  function getHsl(string) {\n    var hsla = getHsla(string);\n    return hsla && hsla.slice(0, 3);\n  }\n\n  function getAlpha(string) {\n    var vals = getRgba(string);\n\n    if (vals) {\n      return vals[3];\n    } else if (vals = getHsla(string)) {\n      return vals[3];\n    } else if (vals = getHwb(string)) {\n      return vals[3];\n    }\n  } // generators\n\n\n  function hexString(rgba, a) {\n    var a = a !== undefined && rgba.length === 3 ? a : rgba[3];\n    return \"#\" + hexDouble(rgba[0]) + hexDouble(rgba[1]) + hexDouble(rgba[2]) + (a >= 0 && a < 1 ? hexDouble(Math.round(a * 255)) : \"\");\n  }\n\n  function rgbString(rgba, alpha) {\n    if (alpha < 1 || rgba[3] && rgba[3] < 1) {\n      return rgbaString(rgba, alpha);\n    }\n\n    return \"rgb(\" + rgba[0] + \", \" + rgba[1] + \", \" + rgba[2] + \")\";\n  }\n\n  function rgbaString(rgba, alpha) {\n    if (alpha === undefined) {\n      alpha = rgba[3] !== undefined ? rgba[3] : 1;\n    }\n\n    return \"rgba(\" + rgba[0] + \", \" + rgba[1] + \", \" + rgba[2] + \", \" + alpha + \")\";\n  }\n\n  function percentString(rgba, alpha) {\n    if (alpha < 1 || rgba[3] && rgba[3] < 1) {\n      return percentaString(rgba, alpha);\n    }\n\n    var r = Math.round(rgba[0] / 255 * 100),\n        g = Math.round(rgba[1] / 255 * 100),\n        b = Math.round(rgba[2] / 255 * 100);\n    return \"rgb(\" + r + \"%, \" + g + \"%, \" + b + \"%)\";\n  }\n\n  function percentaString(rgba, alpha) {\n    var r = Math.round(rgba[0] / 255 * 100),\n        g = Math.round(rgba[1] / 255 * 100),\n        b = Math.round(rgba[2] / 255 * 100);\n    return \"rgba(\" + r + \"%, \" + g + \"%, \" + b + \"%, \" + (alpha || rgba[3] || 1) + \")\";\n  }\n\n  function hslString(hsla, alpha) {\n    if (alpha < 1 || hsla[3] && hsla[3] < 1) {\n      return hslaString(hsla, alpha);\n    }\n\n    return \"hsl(\" + hsla[0] + \", \" + hsla[1] + \"%, \" + hsla[2] + \"%)\";\n  }\n\n  function hslaString(hsla, alpha) {\n    if (alpha === undefined) {\n      alpha = hsla[3] !== undefined ? hsla[3] : 1;\n    }\n\n    return \"hsla(\" + hsla[0] + \", \" + hsla[1] + \"%, \" + hsla[2] + \"%, \" + alpha + \")\";\n  } // hwb is a bit different than rgb(a) & hsl(a) since there is no alpha specific syntax\n  // (hwb have alpha optional & 1 is default value)\n\n\n  function hwbString(hwb, alpha) {\n    if (alpha === undefined) {\n      alpha = hwb[3] !== undefined ? hwb[3] : 1;\n    }\n\n    return \"hwb(\" + hwb[0] + \", \" + hwb[1] + \"%, \" + hwb[2] + \"%\" + (alpha !== undefined && alpha !== 1 ? \", \" + alpha : \"\") + \")\";\n  }\n\n  function keyword(rgb) {\n    return reverseNames[rgb.slice(0, 3)];\n  } // helpers\n\n\n  function scale(num, min, max) {\n    return Math.min(Math.max(min, num), max);\n  }\n\n  function hexDouble(num) {\n    var str = num.toString(16).toUpperCase();\n    return str.length < 2 ? \"0\" + str : str;\n  } //create a list of reverse color names\n\n\n  var reverseNames = {};\n\n  for (var name in colorName) {\n    reverseNames[colorName[name]] = name;\n  }\n  /* MIT license */\n\n\n  var Color = function Color(obj) {\n    if (obj instanceof Color) {\n      return obj;\n    }\n\n    if (!(this instanceof Color)) {\n      return new Color(obj);\n    }\n\n    this.valid = false;\n    this.values = {\n      rgb: [0, 0, 0],\n      hsl: [0, 0, 0],\n      hsv: [0, 0, 0],\n      hwb: [0, 0, 0],\n      cmyk: [0, 0, 0, 0],\n      alpha: 1\n    }; // parse Color() argument\n\n    var vals;\n\n    if (typeof obj === 'string') {\n      vals = colorString.getRgba(obj);\n\n      if (vals) {\n        this.setValues('rgb', vals);\n      } else if (vals = colorString.getHsla(obj)) {\n        this.setValues('hsl', vals);\n      } else if (vals = colorString.getHwb(obj)) {\n        this.setValues('hwb', vals);\n      }\n    } else if (typeof obj === 'object') {\n      vals = obj;\n\n      if (vals.r !== undefined || vals.red !== undefined) {\n        this.setValues('rgb', vals);\n      } else if (vals.l !== undefined || vals.lightness !== undefined) {\n        this.setValues('hsl', vals);\n      } else if (vals.v !== undefined || vals.value !== undefined) {\n        this.setValues('hsv', vals);\n      } else if (vals.w !== undefined || vals.whiteness !== undefined) {\n        this.setValues('hwb', vals);\n      } else if (vals.c !== undefined || vals.cyan !== undefined) {\n        this.setValues('cmyk', vals);\n      }\n    }\n  };\n\n  Color.prototype = {\n    isValid: function isValid() {\n      return this.valid;\n    },\n    rgb: function rgb() {\n      return this.setSpace('rgb', arguments);\n    },\n    hsl: function hsl() {\n      return this.setSpace('hsl', arguments);\n    },\n    hsv: function hsv() {\n      return this.setSpace('hsv', arguments);\n    },\n    hwb: function hwb() {\n      return this.setSpace('hwb', arguments);\n    },\n    cmyk: function cmyk() {\n      return this.setSpace('cmyk', arguments);\n    },\n    rgbArray: function rgbArray() {\n      return this.values.rgb;\n    },\n    hslArray: function hslArray() {\n      return this.values.hsl;\n    },\n    hsvArray: function hsvArray() {\n      return this.values.hsv;\n    },\n    hwbArray: function hwbArray() {\n      var values = this.values;\n\n      if (values.alpha !== 1) {\n        return values.hwb.concat([values.alpha]);\n      }\n\n      return values.hwb;\n    },\n    cmykArray: function cmykArray() {\n      return this.values.cmyk;\n    },\n    rgbaArray: function rgbaArray() {\n      var values = this.values;\n      return values.rgb.concat([values.alpha]);\n    },\n    hslaArray: function hslaArray() {\n      var values = this.values;\n      return values.hsl.concat([values.alpha]);\n    },\n    alpha: function alpha(val) {\n      if (val === undefined) {\n        return this.values.alpha;\n      }\n\n      this.setValues('alpha', val);\n      return this;\n    },\n    red: function red(val) {\n      return this.setChannel('rgb', 0, val);\n    },\n    green: function green(val) {\n      return this.setChannel('rgb', 1, val);\n    },\n    blue: function blue(val) {\n      return this.setChannel('rgb', 2, val);\n    },\n    hue: function hue(val) {\n      if (val) {\n        val %= 360;\n        val = val < 0 ? 360 + val : val;\n      }\n\n      return this.setChannel('hsl', 0, val);\n    },\n    saturation: function saturation(val) {\n      return this.setChannel('hsl', 1, val);\n    },\n    lightness: function lightness(val) {\n      return this.setChannel('hsl', 2, val);\n    },\n    saturationv: function saturationv(val) {\n      return this.setChannel('hsv', 1, val);\n    },\n    whiteness: function whiteness(val) {\n      return this.setChannel('hwb', 1, val);\n    },\n    blackness: function blackness(val) {\n      return this.setChannel('hwb', 2, val);\n    },\n    value: function value(val) {\n      return this.setChannel('hsv', 2, val);\n    },\n    cyan: function cyan(val) {\n      return this.setChannel('cmyk', 0, val);\n    },\n    magenta: function magenta(val) {\n      return this.setChannel('cmyk', 1, val);\n    },\n    yellow: function yellow(val) {\n      return this.setChannel('cmyk', 2, val);\n    },\n    black: function black(val) {\n      return this.setChannel('cmyk', 3, val);\n    },\n    hexString: function hexString() {\n      return colorString.hexString(this.values.rgb);\n    },\n    rgbString: function rgbString() {\n      return colorString.rgbString(this.values.rgb, this.values.alpha);\n    },\n    rgbaString: function rgbaString() {\n      return colorString.rgbaString(this.values.rgb, this.values.alpha);\n    },\n    percentString: function percentString() {\n      return colorString.percentString(this.values.rgb, this.values.alpha);\n    },\n    hslString: function hslString() {\n      return colorString.hslString(this.values.hsl, this.values.alpha);\n    },\n    hslaString: function hslaString() {\n      return colorString.hslaString(this.values.hsl, this.values.alpha);\n    },\n    hwbString: function hwbString() {\n      return colorString.hwbString(this.values.hwb, this.values.alpha);\n    },\n    keyword: function keyword() {\n      return colorString.keyword(this.values.rgb, this.values.alpha);\n    },\n    rgbNumber: function rgbNumber() {\n      var rgb = this.values.rgb;\n      return rgb[0] << 16 | rgb[1] << 8 | rgb[2];\n    },\n    luminosity: function luminosity() {\n      // http://www.w3.org/TR/WCAG20/#relativeluminancedef\n      var rgb = this.values.rgb;\n      var lum = [];\n\n      for (var i = 0; i < rgb.length; i++) {\n        var chan = rgb[i] / 255;\n        lum[i] = chan <= 0.03928 ? chan / 12.92 : Math.pow((chan + 0.055) / 1.055, 2.4);\n      }\n\n      return 0.2126 * lum[0] + 0.7152 * lum[1] + 0.0722 * lum[2];\n    },\n    contrast: function contrast(color2) {\n      // http://www.w3.org/TR/WCAG20/#contrast-ratiodef\n      var lum1 = this.luminosity();\n      var lum2 = color2.luminosity();\n\n      if (lum1 > lum2) {\n        return (lum1 + 0.05) / (lum2 + 0.05);\n      }\n\n      return (lum2 + 0.05) / (lum1 + 0.05);\n    },\n    level: function level(color2) {\n      var contrastRatio = this.contrast(color2);\n\n      if (contrastRatio >= 7.1) {\n        return 'AAA';\n      }\n\n      return contrastRatio >= 4.5 ? 'AA' : '';\n    },\n    dark: function dark() {\n      // YIQ equation from http://24ways.org/2010/calculating-color-contrast\n      var rgb = this.values.rgb;\n      var yiq = (rgb[0] * 299 + rgb[1] * 587 + rgb[2] * 114) / 1000;\n      return yiq < 128;\n    },\n    light: function light() {\n      return !this.dark();\n    },\n    negate: function negate() {\n      var rgb = [];\n\n      for (var i = 0; i < 3; i++) {\n        rgb[i] = 255 - this.values.rgb[i];\n      }\n\n      this.setValues('rgb', rgb);\n      return this;\n    },\n    lighten: function lighten(ratio) {\n      var hsl = this.values.hsl;\n      hsl[2] += hsl[2] * ratio;\n      this.setValues('hsl', hsl);\n      return this;\n    },\n    darken: function darken(ratio) {\n      var hsl = this.values.hsl;\n      hsl[2] -= hsl[2] * ratio;\n      this.setValues('hsl', hsl);\n      return this;\n    },\n    saturate: function saturate(ratio) {\n      var hsl = this.values.hsl;\n      hsl[1] += hsl[1] * ratio;\n      this.setValues('hsl', hsl);\n      return this;\n    },\n    desaturate: function desaturate(ratio) {\n      var hsl = this.values.hsl;\n      hsl[1] -= hsl[1] * ratio;\n      this.setValues('hsl', hsl);\n      return this;\n    },\n    whiten: function whiten(ratio) {\n      var hwb = this.values.hwb;\n      hwb[1] += hwb[1] * ratio;\n      this.setValues('hwb', hwb);\n      return this;\n    },\n    blacken: function blacken(ratio) {\n      var hwb = this.values.hwb;\n      hwb[2] += hwb[2] * ratio;\n      this.setValues('hwb', hwb);\n      return this;\n    },\n    greyscale: function greyscale() {\n      var rgb = this.values.rgb; // http://en.wikipedia.org/wiki/Grayscale#Converting_color_to_grayscale\n\n      var val = rgb[0] * 0.3 + rgb[1] * 0.59 + rgb[2] * 0.11;\n      this.setValues('rgb', [val, val, val]);\n      return this;\n    },\n    clearer: function clearer(ratio) {\n      var alpha = this.values.alpha;\n      this.setValues('alpha', alpha - alpha * ratio);\n      return this;\n    },\n    opaquer: function opaquer(ratio) {\n      var alpha = this.values.alpha;\n      this.setValues('alpha', alpha + alpha * ratio);\n      return this;\n    },\n    rotate: function rotate(degrees) {\n      var hsl = this.values.hsl;\n      var hue = (hsl[0] + degrees) % 360;\n      hsl[0] = hue < 0 ? 360 + hue : hue;\n      this.setValues('hsl', hsl);\n      return this;\n    },\n\n    /**\n     * Ported from sass implementation in C\n     * https://github.com/sass/libsass/blob/0e6b4a2850092356aa3ece07c6b249f0221caced/functions.cpp#L209\n     */\n    mix: function mix(mixinColor, weight) {\n      var color1 = this;\n      var color2 = mixinColor;\n      var p = weight === undefined ? 0.5 : weight;\n      var w = 2 * p - 1;\n      var a = color1.alpha() - color2.alpha();\n      var w1 = ((w * a === -1 ? w : (w + a) / (1 + w * a)) + 1) / 2.0;\n      var w2 = 1 - w1;\n      return this.rgb(w1 * color1.red() + w2 * color2.red(), w1 * color1.green() + w2 * color2.green(), w1 * color1.blue() + w2 * color2.blue()).alpha(color1.alpha() * p + color2.alpha() * (1 - p));\n    },\n    toJSON: function toJSON() {\n      return this.rgb();\n    },\n    clone: function clone() {\n      // NOTE(SB): using node-clone creates a dependency to Buffer when using browserify,\n      // making the final build way to big to embed in Chart.js. So let's do it manually,\n      // assuming that values to clone are 1 dimension arrays containing only numbers,\n      // except 'alpha' which is a number.\n      var result = new Color();\n      var source = this.values;\n      var target = result.values;\n      var value, type;\n\n      for (var prop in source) {\n        if (source.hasOwnProperty(prop)) {\n          value = source[prop];\n          type = {}.toString.call(value);\n\n          if (type === '[object Array]') {\n            target[prop] = value.slice(0);\n          } else if (type === '[object Number]') {\n            target[prop] = value;\n          } else {\n            console.error('unexpected color value:', value);\n          }\n        }\n      }\n\n      return result;\n    }\n  };\n  Color.prototype.spaces = {\n    rgb: ['red', 'green', 'blue'],\n    hsl: ['hue', 'saturation', 'lightness'],\n    hsv: ['hue', 'saturation', 'value'],\n    hwb: ['hue', 'whiteness', 'blackness'],\n    cmyk: ['cyan', 'magenta', 'yellow', 'black']\n  };\n  Color.prototype.maxes = {\n    rgb: [255, 255, 255],\n    hsl: [360, 100, 100],\n    hsv: [360, 100, 100],\n    hwb: [360, 100, 100],\n    cmyk: [100, 100, 100, 100]\n  };\n\n  Color.prototype.getValues = function (space) {\n    var values = this.values;\n    var vals = {};\n\n    for (var i = 0; i < space.length; i++) {\n      vals[space.charAt(i)] = values[space][i];\n    }\n\n    if (values.alpha !== 1) {\n      vals.a = values.alpha;\n    } // {r: 255, g: 255, b: 255, a: 0.4}\n\n\n    return vals;\n  };\n\n  Color.prototype.setValues = function (space, vals) {\n    var values = this.values;\n    var spaces = this.spaces;\n    var maxes = this.maxes;\n    var alpha = 1;\n    var i;\n    this.valid = true;\n\n    if (space === 'alpha') {\n      alpha = vals;\n    } else if (vals.length) {\n      // [10, 10, 10]\n      values[space] = vals.slice(0, space.length);\n      alpha = vals[space.length];\n    } else if (vals[space.charAt(0)] !== undefined) {\n      // {r: 10, g: 10, b: 10}\n      for (i = 0; i < space.length; i++) {\n        values[space][i] = vals[space.charAt(i)];\n      }\n\n      alpha = vals.a;\n    } else if (vals[spaces[space][0]] !== undefined) {\n      // {red: 10, green: 10, blue: 10}\n      var chans = spaces[space];\n\n      for (i = 0; i < space.length; i++) {\n        values[space][i] = vals[chans[i]];\n      }\n\n      alpha = vals.alpha;\n    }\n\n    values.alpha = Math.max(0, Math.min(1, alpha === undefined ? values.alpha : alpha));\n\n    if (space === 'alpha') {\n      return false;\n    }\n\n    var capped; // cap values of the space prior converting all values\n\n    for (i = 0; i < space.length; i++) {\n      capped = Math.max(0, Math.min(maxes[space][i], values[space][i]));\n      values[space][i] = Math.round(capped);\n    } // convert to all the other color spaces\n\n\n    for (var sname in spaces) {\n      if (sname !== space) {\n        values[sname] = colorConvert[space][sname](values[space]);\n      }\n    }\n\n    return true;\n  };\n\n  Color.prototype.setSpace = function (space, args) {\n    var vals = args[0];\n\n    if (vals === undefined) {\n      // color.rgb()\n      return this.getValues(space);\n    } // color.rgb(10, 10, 10)\n\n\n    if (typeof vals === 'number') {\n      vals = Array.prototype.slice.call(args);\n    }\n\n    this.setValues(space, vals);\n    return this;\n  };\n\n  Color.prototype.setChannel = function (space, index, val) {\n    var svalues = this.values[space];\n\n    if (val === undefined) {\n      // color.red()\n      return svalues[index];\n    } else if (val === svalues[index]) {\n      // color.red(color.red())\n      return this;\n    } // color.red(100)\n\n\n    svalues[index] = val;\n    this.setValues(space, svalues);\n    return this;\n  };\n\n  if (typeof window !== 'undefined') {\n    window.Color = Color;\n  }\n\n  var chartjsColor = Color;\n  /**\n   * @namespace Chart.helpers\n   */\n\n  var helpers = {\n    /**\n     * An empty function that can be used, for example, for optional callback.\n     */\n    noop: function noop() {},\n\n    /**\n     * Returns a unique id, sequentially generated from a global variable.\n     * @returns {number}\n     * @function\n     */\n    uid: function () {\n      var id = 0;\n      return function () {\n        return id++;\n      };\n    }(),\n\n    /**\n     * Returns true if `value` is neither null nor undefined, else returns false.\n     * @param {*} value - The value to test.\n     * @returns {boolean}\n     * @since 2.7.0\n     */\n    isNullOrUndef: function isNullOrUndef(value) {\n      return value === null || typeof value === 'undefined';\n    },\n\n    /**\n     * Returns true if `value` is an array (including typed arrays), else returns false.\n     * @param {*} value - The value to test.\n     * @returns {boolean}\n     * @function\n     */\n    isArray: function isArray(value) {\n      if (Array.isArray && Array.isArray(value)) {\n        return true;\n      }\n\n      var type = Object.prototype.toString.call(value);\n\n      if (type.substr(0, 7) === '[object' && type.substr(-6) === 'Array]') {\n        return true;\n      }\n\n      return false;\n    },\n\n    /**\n     * Returns true if `value` is an object (excluding null), else returns false.\n     * @param {*} value - The value to test.\n     * @returns {boolean}\n     * @since 2.7.0\n     */\n    isObject: function isObject(value) {\n      return value !== null && Object.prototype.toString.call(value) === '[object Object]';\n    },\n\n    /**\n     * Returns true if `value` is a finite number, else returns false\n     * @param {*} value  - The value to test.\n     * @returns {boolean}\n     */\n    isFinite: function (_isFinite) {\n      function isFinite(_x) {\n        return _isFinite.apply(this, arguments);\n      }\n\n      isFinite.toString = function () {\n        return _isFinite.toString();\n      };\n\n      return isFinite;\n    }(function (value) {\n      return (typeof value === 'number' || value instanceof Number) && isFinite(value);\n    }),\n\n    /**\n     * Returns `value` if defined, else returns `defaultValue`.\n     * @param {*} value - The value to return if defined.\n     * @param {*} defaultValue - The value to return if `value` is undefined.\n     * @returns {*}\n     */\n    valueOrDefault: function valueOrDefault(value, defaultValue) {\n      return typeof value === 'undefined' ? defaultValue : value;\n    },\n\n    /**\n     * Returns value at the given `index` in array if defined, else returns `defaultValue`.\n     * @param {Array} value - The array to lookup for value at `index`.\n     * @param {number} index - The index in `value` to lookup for value.\n     * @param {*} defaultValue - The value to return if `value[index]` is undefined.\n     * @returns {*}\n     */\n    valueAtIndexOrDefault: function valueAtIndexOrDefault(value, index, defaultValue) {\n      return helpers.valueOrDefault(helpers.isArray(value) ? value[index] : value, defaultValue);\n    },\n\n    /**\n     * Calls `fn` with the given `args` in the scope defined by `thisArg` and returns the\n     * value returned by `fn`. If `fn` is not a function, this method returns undefined.\n     * @param {function} fn - The function to call.\n     * @param {Array|undefined|null} args - The arguments with which `fn` should be called.\n     * @param {object} [thisArg] - The value of `this` provided for the call to `fn`.\n     * @returns {*}\n     */\n    callback: function callback(fn, args, thisArg) {\n      if (fn && typeof fn.call === 'function') {\n        return fn.apply(thisArg, args);\n      }\n    },\n\n    /**\n     * Note(SB) for performance sake, this method should only be used when loopable type\n     * is unknown or in none intensive code (not called often and small loopable). Else\n     * it's preferable to use a regular for() loop and save extra function calls.\n     * @param {object|Array} loopable - The object or array to be iterated.\n     * @param {function} fn - The function to call for each item.\n     * @param {object} [thisArg] - The value of `this` provided for the call to `fn`.\n     * @param {boolean} [reverse] - If true, iterates backward on the loopable.\n     */\n    each: function each(loopable, fn, thisArg, reverse) {\n      var i, len, keys;\n\n      if (helpers.isArray(loopable)) {\n        len = loopable.length;\n\n        if (reverse) {\n          for (i = len - 1; i >= 0; i--) {\n            fn.call(thisArg, loopable[i], i);\n          }\n        } else {\n          for (i = 0; i < len; i++) {\n            fn.call(thisArg, loopable[i], i);\n          }\n        }\n      } else if (helpers.isObject(loopable)) {\n        keys = Object.keys(loopable);\n        len = keys.length;\n\n        for (i = 0; i < len; i++) {\n          fn.call(thisArg, loopable[keys[i]], keys[i]);\n        }\n      }\n    },\n\n    /**\n     * Returns true if the `a0` and `a1` arrays have the same content, else returns false.\n     * @see https://stackoverflow.com/a/14853974\n     * @param {Array} a0 - The array to compare\n     * @param {Array} a1 - The array to compare\n     * @returns {boolean}\n     */\n    arrayEquals: function arrayEquals(a0, a1) {\n      var i, ilen, v0, v1;\n\n      if (!a0 || !a1 || a0.length !== a1.length) {\n        return false;\n      }\n\n      for (i = 0, ilen = a0.length; i < ilen; ++i) {\n        v0 = a0[i];\n        v1 = a1[i];\n\n        if (v0 instanceof Array && v1 instanceof Array) {\n          if (!helpers.arrayEquals(v0, v1)) {\n            return false;\n          }\n        } else if (v0 !== v1) {\n          // NOTE: two different object instances will never be equal: {x:20} != {x:20}\n          return false;\n        }\n      }\n\n      return true;\n    },\n\n    /**\n     * Returns a deep copy of `source` without keeping references on objects and arrays.\n     * @param {*} source - The value to clone.\n     * @returns {*}\n     */\n    clone: function clone(source) {\n      if (helpers.isArray(source)) {\n        return source.map(helpers.clone);\n      }\n\n      if (helpers.isObject(source)) {\n        var target = {};\n        var keys = Object.keys(source);\n        var klen = keys.length;\n        var k = 0;\n\n        for (; k < klen; ++k) {\n          target[keys[k]] = helpers.clone(source[keys[k]]);\n        }\n\n        return target;\n      }\n\n      return source;\n    },\n\n    /**\n     * The default merger when Chart.helpers.merge is called without merger option.\n     * Note(SB): also used by mergeConfig and mergeScaleConfig as fallback.\n     * @private\n     */\n    _merger: function _merger(key, target, source, options) {\n      var tval = target[key];\n      var sval = source[key];\n\n      if (helpers.isObject(tval) && helpers.isObject(sval)) {\n        helpers.merge(tval, sval, options);\n      } else {\n        target[key] = helpers.clone(sval);\n      }\n    },\n\n    /**\n     * Merges source[key] in target[key] only if target[key] is undefined.\n     * @private\n     */\n    _mergerIf: function _mergerIf(key, target, source) {\n      var tval = target[key];\n      var sval = source[key];\n\n      if (helpers.isObject(tval) && helpers.isObject(sval)) {\n        helpers.mergeIf(tval, sval);\n      } else if (!target.hasOwnProperty(key)) {\n        target[key] = helpers.clone(sval);\n      }\n    },\n\n    /**\n     * Recursively deep copies `source` properties into `target` with the given `options`.\n     * IMPORTANT: `target` is not cloned and will be updated with `source` properties.\n     * @param {object} target - The target object in which all sources are merged into.\n     * @param {object|object[]} source - Object(s) to merge into `target`.\n     * @param {object} [options] - Merging options:\n     * @param {function} [options.merger] - The merge method (key, target, source, options)\n     * @returns {object} The `target` object.\n     */\n    merge: function merge(target, source, options) {\n      var sources = helpers.isArray(source) ? source : [source];\n      var ilen = sources.length;\n      var merge, i, keys, klen, k;\n\n      if (!helpers.isObject(target)) {\n        return target;\n      }\n\n      options = options || {};\n      merge = options.merger || helpers._merger;\n\n      for (i = 0; i < ilen; ++i) {\n        source = sources[i];\n\n        if (!helpers.isObject(source)) {\n          continue;\n        }\n\n        keys = Object.keys(source);\n\n        for (k = 0, klen = keys.length; k < klen; ++k) {\n          merge(keys[k], target, source, options);\n        }\n      }\n\n      return target;\n    },\n\n    /**\n     * Recursively deep copies `source` properties into `target` *only* if not defined in target.\n     * IMPORTANT: `target` is not cloned and will be updated with `source` properties.\n     * @param {object} target - The target object in which all sources are merged into.\n     * @param {object|object[]} source - Object(s) to merge into `target`.\n     * @returns {object} The `target` object.\n     */\n    mergeIf: function mergeIf(target, source) {\n      return helpers.merge(target, source, {\n        merger: helpers._mergerIf\n      });\n    },\n\n    /**\n     * Applies the contents of two or more objects together into the first object.\n     * @param {object} target - The target object in which all objects are merged into.\n     * @param {object} arg1 - Object containing additional properties to merge in target.\n     * @param {object} argN - Additional objects containing properties to merge in target.\n     * @returns {object} The `target` object.\n     */\n    extend: function extend(target) {\n      var setFn = function setFn(value, key) {\n        target[key] = value;\n      };\n\n      for (var i = 1, ilen = arguments.length; i < ilen; ++i) {\n        helpers.each(arguments[i], setFn);\n      }\n\n      return target;\n    },\n\n    /**\n     * Basic javascript inheritance based on the model created in Backbone.js\n     */\n    inherits: function inherits(extensions) {\n      var me = this;\n      var ChartElement = extensions && extensions.hasOwnProperty('constructor') ? extensions.constructor : function () {\n        return me.apply(this, arguments);\n      };\n\n      var Surrogate = function Surrogate() {\n        this.constructor = ChartElement;\n      };\n\n      Surrogate.prototype = me.prototype;\n      ChartElement.prototype = new Surrogate();\n      ChartElement.extend = helpers.inherits;\n\n      if (extensions) {\n        helpers.extend(ChartElement.prototype, extensions);\n      }\n\n      ChartElement.__super__ = me.prototype;\n      return ChartElement;\n    }\n  };\n  var helpers_core = helpers; // DEPRECATIONS\n\n  /**\n   * Provided for backward compatibility, use Chart.helpers.callback instead.\n   * @function Chart.helpers.callCallback\n   * @deprecated since version 2.6.0\n   * @todo remove at version 3\n   * @private\n   */\n\n  helpers.callCallback = helpers.callback;\n  /**\n   * Provided for backward compatibility, use Array.prototype.indexOf instead.\n   * Array.prototype.indexOf compatibility: Chrome, Opera, Safari, FF1.5+, IE9+\n   * @function Chart.helpers.indexOf\n   * @deprecated since version 2.7.0\n   * @todo remove at version 3\n   * @private\n   */\n\n  helpers.indexOf = function (array, item, fromIndex) {\n    return Array.prototype.indexOf.call(array, item, fromIndex);\n  };\n  /**\n   * Provided for backward compatibility, use Chart.helpers.valueOrDefault instead.\n   * @function Chart.helpers.getValueOrDefault\n   * @deprecated since version 2.7.0\n   * @todo remove at version 3\n   * @private\n   */\n\n\n  helpers.getValueOrDefault = helpers.valueOrDefault;\n  /**\n   * Provided for backward compatibility, use Chart.helpers.valueAtIndexOrDefault instead.\n   * @function Chart.helpers.getValueAtIndexOrDefault\n   * @deprecated since version 2.7.0\n   * @todo remove at version 3\n   * @private\n   */\n\n  helpers.getValueAtIndexOrDefault = helpers.valueAtIndexOrDefault;\n  /**\n   * Easing functions adapted from Robert Penner's easing equations.\n   * @namespace Chart.helpers.easingEffects\n   * @see http://www.robertpenner.com/easing/\n   */\n\n  var effects = {\n    linear: function linear(t) {\n      return t;\n    },\n    easeInQuad: function easeInQuad(t) {\n      return t * t;\n    },\n    easeOutQuad: function easeOutQuad(t) {\n      return -t * (t - 2);\n    },\n    easeInOutQuad: function easeInOutQuad(t) {\n      if ((t /= 0.5) < 1) {\n        return 0.5 * t * t;\n      }\n\n      return -0.5 * (--t * (t - 2) - 1);\n    },\n    easeInCubic: function easeInCubic(t) {\n      return t * t * t;\n    },\n    easeOutCubic: function easeOutCubic(t) {\n      return (t = t - 1) * t * t + 1;\n    },\n    easeInOutCubic: function easeInOutCubic(t) {\n      if ((t /= 0.5) < 1) {\n        return 0.5 * t * t * t;\n      }\n\n      return 0.5 * ((t -= 2) * t * t + 2);\n    },\n    easeInQuart: function easeInQuart(t) {\n      return t * t * t * t;\n    },\n    easeOutQuart: function easeOutQuart(t) {\n      return -((t = t - 1) * t * t * t - 1);\n    },\n    easeInOutQuart: function easeInOutQuart(t) {\n      if ((t /= 0.5) < 1) {\n        return 0.5 * t * t * t * t;\n      }\n\n      return -0.5 * ((t -= 2) * t * t * t - 2);\n    },\n    easeInQuint: function easeInQuint(t) {\n      return t * t * t * t * t;\n    },\n    easeOutQuint: function easeOutQuint(t) {\n      return (t = t - 1) * t * t * t * t + 1;\n    },\n    easeInOutQuint: function easeInOutQuint(t) {\n      if ((t /= 0.5) < 1) {\n        return 0.5 * t * t * t * t * t;\n      }\n\n      return 0.5 * ((t -= 2) * t * t * t * t + 2);\n    },\n    easeInSine: function easeInSine(t) {\n      return -Math.cos(t * (Math.PI / 2)) + 1;\n    },\n    easeOutSine: function easeOutSine(t) {\n      return Math.sin(t * (Math.PI / 2));\n    },\n    easeInOutSine: function easeInOutSine(t) {\n      return -0.5 * (Math.cos(Math.PI * t) - 1);\n    },\n    easeInExpo: function easeInExpo(t) {\n      return t === 0 ? 0 : Math.pow(2, 10 * (t - 1));\n    },\n    easeOutExpo: function easeOutExpo(t) {\n      return t === 1 ? 1 : -Math.pow(2, -10 * t) + 1;\n    },\n    easeInOutExpo: function easeInOutExpo(t) {\n      if (t === 0) {\n        return 0;\n      }\n\n      if (t === 1) {\n        return 1;\n      }\n\n      if ((t /= 0.5) < 1) {\n        return 0.5 * Math.pow(2, 10 * (t - 1));\n      }\n\n      return 0.5 * (-Math.pow(2, -10 * --t) + 2);\n    },\n    easeInCirc: function easeInCirc(t) {\n      if (t >= 1) {\n        return t;\n      }\n\n      return -(Math.sqrt(1 - t * t) - 1);\n    },\n    easeOutCirc: function easeOutCirc(t) {\n      return Math.sqrt(1 - (t = t - 1) * t);\n    },\n    easeInOutCirc: function easeInOutCirc(t) {\n      if ((t /= 0.5) < 1) {\n        return -0.5 * (Math.sqrt(1 - t * t) - 1);\n      }\n\n      return 0.5 * (Math.sqrt(1 - (t -= 2) * t) + 1);\n    },\n    easeInElastic: function easeInElastic(t) {\n      var s = 1.70158;\n      var p = 0;\n      var a = 1;\n\n      if (t === 0) {\n        return 0;\n      }\n\n      if (t === 1) {\n        return 1;\n      }\n\n      if (!p) {\n        p = 0.3;\n      }\n\n      if (a < 1) {\n        a = 1;\n        s = p / 4;\n      } else {\n        s = p / (2 * Math.PI) * Math.asin(1 / a);\n      }\n\n      return -(a * Math.pow(2, 10 * (t -= 1)) * Math.sin((t - s) * (2 * Math.PI) / p));\n    },\n    easeOutElastic: function easeOutElastic(t) {\n      var s = 1.70158;\n      var p = 0;\n      var a = 1;\n\n      if (t === 0) {\n        return 0;\n      }\n\n      if (t === 1) {\n        return 1;\n      }\n\n      if (!p) {\n        p = 0.3;\n      }\n\n      if (a < 1) {\n        a = 1;\n        s = p / 4;\n      } else {\n        s = p / (2 * Math.PI) * Math.asin(1 / a);\n      }\n\n      return a * Math.pow(2, -10 * t) * Math.sin((t - s) * (2 * Math.PI) / p) + 1;\n    },\n    easeInOutElastic: function easeInOutElastic(t) {\n      var s = 1.70158;\n      var p = 0;\n      var a = 1;\n\n      if (t === 0) {\n        return 0;\n      }\n\n      if ((t /= 0.5) === 2) {\n        return 1;\n      }\n\n      if (!p) {\n        p = 0.45;\n      }\n\n      if (a < 1) {\n        a = 1;\n        s = p / 4;\n      } else {\n        s = p / (2 * Math.PI) * Math.asin(1 / a);\n      }\n\n      if (t < 1) {\n        return -0.5 * (a * Math.pow(2, 10 * (t -= 1)) * Math.sin((t - s) * (2 * Math.PI) / p));\n      }\n\n      return a * Math.pow(2, -10 * (t -= 1)) * Math.sin((t - s) * (2 * Math.PI) / p) * 0.5 + 1;\n    },\n    easeInBack: function easeInBack(t) {\n      var s = 1.70158;\n      return t * t * ((s + 1) * t - s);\n    },\n    easeOutBack: function easeOutBack(t) {\n      var s = 1.70158;\n      return (t = t - 1) * t * ((s + 1) * t + s) + 1;\n    },\n    easeInOutBack: function easeInOutBack(t) {\n      var s = 1.70158;\n\n      if ((t /= 0.5) < 1) {\n        return 0.5 * (t * t * (((s *= 1.525) + 1) * t - s));\n      }\n\n      return 0.5 * ((t -= 2) * t * (((s *= 1.525) + 1) * t + s) + 2);\n    },\n    easeInBounce: function easeInBounce(t) {\n      return 1 - effects.easeOutBounce(1 - t);\n    },\n    easeOutBounce: function easeOutBounce(t) {\n      if (t < 1 / 2.75) {\n        return 7.5625 * t * t;\n      }\n\n      if (t < 2 / 2.75) {\n        return 7.5625 * (t -= 1.5 / 2.75) * t + 0.75;\n      }\n\n      if (t < 2.5 / 2.75) {\n        return 7.5625 * (t -= 2.25 / 2.75) * t + 0.9375;\n      }\n\n      return 7.5625 * (t -= 2.625 / 2.75) * t + 0.984375;\n    },\n    easeInOutBounce: function easeInOutBounce(t) {\n      if (t < 0.5) {\n        return effects.easeInBounce(t * 2) * 0.5;\n      }\n\n      return effects.easeOutBounce(t * 2 - 1) * 0.5 + 0.5;\n    }\n  };\n  var helpers_easing = {\n    effects: effects\n  }; // DEPRECATIONS\n\n  /**\n   * Provided for backward compatibility, use Chart.helpers.easing.effects instead.\n   * @function Chart.helpers.easingEffects\n   * @deprecated since version 2.7.0\n   * @todo remove at version 3\n   * @private\n   */\n\n  helpers_core.easingEffects = effects;\n  var PI = Math.PI;\n  var RAD_PER_DEG = PI / 180;\n  var DOUBLE_PI = PI * 2;\n  var HALF_PI = PI / 2;\n  var QUARTER_PI = PI / 4;\n  var TWO_THIRDS_PI = PI * 2 / 3;\n  /**\n   * @namespace Chart.helpers.canvas\n   */\n\n  var exports$1 = {\n    /**\n     * Clears the entire canvas associated to the given `chart`.\n     * @param {Chart} chart - The chart for which to clear the canvas.\n     */\n    clear: function clear(chart) {\n      chart.ctx.clearRect(0, 0, chart.width, chart.height);\n    },\n\n    /**\n     * Creates a \"path\" for a rectangle with rounded corners at position (x, y) with a\n     * given size (width, height) and the same `radius` for all corners.\n     * @param {CanvasRenderingContext2D} ctx - The canvas 2D Context.\n     * @param {number} x - The x axis of the coordinate for the rectangle starting point.\n     * @param {number} y - The y axis of the coordinate for the rectangle starting point.\n     * @param {number} width - The rectangle's width.\n     * @param {number} height - The rectangle's height.\n     * @param {number} radius - The rounded amount (in pixels) for the four corners.\n     * @todo handle `radius` as top-left, top-right, bottom-right, bottom-left array/object?\n     */\n    roundedRect: function roundedRect(ctx, x, y, width, height, radius) {\n      if (radius) {\n        var r = Math.min(radius, height / 2, width / 2);\n        var left = x + r;\n        var top = y + r;\n        var right = x + width - r;\n        var bottom = y + height - r;\n        ctx.moveTo(x, top);\n\n        if (left < right && top < bottom) {\n          ctx.arc(left, top, r, -PI, -HALF_PI);\n          ctx.arc(right, top, r, -HALF_PI, 0);\n          ctx.arc(right, bottom, r, 0, HALF_PI);\n          ctx.arc(left, bottom, r, HALF_PI, PI);\n        } else if (left < right) {\n          ctx.moveTo(left, y);\n          ctx.arc(right, top, r, -HALF_PI, HALF_PI);\n          ctx.arc(left, top, r, HALF_PI, PI + HALF_PI);\n        } else if (top < bottom) {\n          ctx.arc(left, top, r, -PI, 0);\n          ctx.arc(left, bottom, r, 0, PI);\n        } else {\n          ctx.arc(left, top, r, -PI, PI);\n        }\n\n        ctx.closePath();\n        ctx.moveTo(x, y);\n      } else {\n        ctx.rect(x, y, width, height);\n      }\n    },\n    drawPoint: function drawPoint(ctx, style, radius, x, y, rotation) {\n      var type, xOffset, yOffset, size, cornerRadius;\n      var rad = (rotation || 0) * RAD_PER_DEG;\n\n      if (style && typeof style === 'object') {\n        type = style.toString();\n\n        if (type === '[object HTMLImageElement]' || type === '[object HTMLCanvasElement]') {\n          ctx.drawImage(style, x - style.width / 2, y - style.height / 2, style.width, style.height);\n          return;\n        }\n      }\n\n      if (isNaN(radius) || radius <= 0) {\n        return;\n      }\n\n      ctx.beginPath();\n\n      switch (style) {\n        // Default includes circle\n        default:\n          ctx.arc(x, y, radius, 0, DOUBLE_PI);\n          ctx.closePath();\n          break;\n\n        case 'triangle':\n          ctx.moveTo(x + Math.sin(rad) * radius, y - Math.cos(rad) * radius);\n          rad += TWO_THIRDS_PI;\n          ctx.lineTo(x + Math.sin(rad) * radius, y - Math.cos(rad) * radius);\n          rad += TWO_THIRDS_PI;\n          ctx.lineTo(x + Math.sin(rad) * radius, y - Math.cos(rad) * radius);\n          ctx.closePath();\n          break;\n\n        case 'rectRounded':\n          // NOTE: the rounded rect implementation changed to use `arc` instead of\n          // `quadraticCurveTo` since it generates better results when rect is\n          // almost a circle. 0.516 (instead of 0.5) produces results with visually\n          // closer proportion to the previous impl and it is inscribed in the\n          // circle with `radius`. For more details, see the following PRs:\n          // https://github.com/chartjs/Chart.js/issues/5597\n          // https://github.com/chartjs/Chart.js/issues/5858\n          cornerRadius = radius * 0.516;\n          size = radius - cornerRadius;\n          xOffset = Math.cos(rad + QUARTER_PI) * size;\n          yOffset = Math.sin(rad + QUARTER_PI) * size;\n          ctx.arc(x - xOffset, y - yOffset, cornerRadius, rad - PI, rad - HALF_PI);\n          ctx.arc(x + yOffset, y - xOffset, cornerRadius, rad - HALF_PI, rad);\n          ctx.arc(x + xOffset, y + yOffset, cornerRadius, rad, rad + HALF_PI);\n          ctx.arc(x - yOffset, y + xOffset, cornerRadius, rad + HALF_PI, rad + PI);\n          ctx.closePath();\n          break;\n\n        case 'rect':\n          if (!rotation) {\n            size = Math.SQRT1_2 * radius;\n            ctx.rect(x - size, y - size, 2 * size, 2 * size);\n            break;\n          }\n\n          rad += QUARTER_PI;\n\n        /* falls through */\n\n        case 'rectRot':\n          xOffset = Math.cos(rad) * radius;\n          yOffset = Math.sin(rad) * radius;\n          ctx.moveTo(x - xOffset, y - yOffset);\n          ctx.lineTo(x + yOffset, y - xOffset);\n          ctx.lineTo(x + xOffset, y + yOffset);\n          ctx.lineTo(x - yOffset, y + xOffset);\n          ctx.closePath();\n          break;\n\n        case 'crossRot':\n          rad += QUARTER_PI;\n\n        /* falls through */\n\n        case 'cross':\n          xOffset = Math.cos(rad) * radius;\n          yOffset = Math.sin(rad) * radius;\n          ctx.moveTo(x - xOffset, y - yOffset);\n          ctx.lineTo(x + xOffset, y + yOffset);\n          ctx.moveTo(x + yOffset, y - xOffset);\n          ctx.lineTo(x - yOffset, y + xOffset);\n          break;\n\n        case 'star':\n          xOffset = Math.cos(rad) * radius;\n          yOffset = Math.sin(rad) * radius;\n          ctx.moveTo(x - xOffset, y - yOffset);\n          ctx.lineTo(x + xOffset, y + yOffset);\n          ctx.moveTo(x + yOffset, y - xOffset);\n          ctx.lineTo(x - yOffset, y + xOffset);\n          rad += QUARTER_PI;\n          xOffset = Math.cos(rad) * radius;\n          yOffset = Math.sin(rad) * radius;\n          ctx.moveTo(x - xOffset, y - yOffset);\n          ctx.lineTo(x + xOffset, y + yOffset);\n          ctx.moveTo(x + yOffset, y - xOffset);\n          ctx.lineTo(x - yOffset, y + xOffset);\n          break;\n\n        case 'line':\n          xOffset = Math.cos(rad) * radius;\n          yOffset = Math.sin(rad) * radius;\n          ctx.moveTo(x - xOffset, y - yOffset);\n          ctx.lineTo(x + xOffset, y + yOffset);\n          break;\n\n        case 'dash':\n          ctx.moveTo(x, y);\n          ctx.lineTo(x + Math.cos(rad) * radius, y + Math.sin(rad) * radius);\n          break;\n      }\n\n      ctx.fill();\n      ctx.stroke();\n    },\n\n    /**\n     * Returns true if the point is inside the rectangle\n     * @param {object} point - The point to test\n     * @param {object} area - The rectangle\n     * @returns {boolean}\n     * @private\n     */\n    _isPointInArea: function _isPointInArea(point, area) {\n      var epsilon = 1e-6; // 1e-6 is margin in pixels for accumulated error.\n\n      return point.x > area.left - epsilon && point.x < area.right + epsilon && point.y > area.top - epsilon && point.y < area.bottom + epsilon;\n    },\n    clipArea: function clipArea(ctx, area) {\n      ctx.save();\n      ctx.beginPath();\n      ctx.rect(area.left, area.top, area.right - area.left, area.bottom - area.top);\n      ctx.clip();\n    },\n    unclipArea: function unclipArea(ctx) {\n      ctx.restore();\n    },\n    lineTo: function lineTo(ctx, previous, target, flip) {\n      var stepped = target.steppedLine;\n\n      if (stepped) {\n        if (stepped === 'middle') {\n          var midpoint = (previous.x + target.x) / 2.0;\n          ctx.lineTo(midpoint, flip ? target.y : previous.y);\n          ctx.lineTo(midpoint, flip ? previous.y : target.y);\n        } else if (stepped === 'after' && !flip || stepped !== 'after' && flip) {\n          ctx.lineTo(previous.x, target.y);\n        } else {\n          ctx.lineTo(target.x, previous.y);\n        }\n\n        ctx.lineTo(target.x, target.y);\n        return;\n      }\n\n      if (!target.tension) {\n        ctx.lineTo(target.x, target.y);\n        return;\n      }\n\n      ctx.bezierCurveTo(flip ? previous.controlPointPreviousX : previous.controlPointNextX, flip ? previous.controlPointPreviousY : previous.controlPointNextY, flip ? target.controlPointNextX : target.controlPointPreviousX, flip ? target.controlPointNextY : target.controlPointPreviousY, target.x, target.y);\n    }\n  };\n  var helpers_canvas = exports$1; // DEPRECATIONS\n\n  /**\n   * Provided for backward compatibility, use Chart.helpers.canvas.clear instead.\n   * @namespace Chart.helpers.clear\n   * @deprecated since version 2.7.0\n   * @todo remove at version 3\n   * @private\n   */\n\n  helpers_core.clear = exports$1.clear;\n  /**\n   * Provided for backward compatibility, use Chart.helpers.canvas.roundedRect instead.\n   * @namespace Chart.helpers.drawRoundedRectangle\n   * @deprecated since version 2.7.0\n   * @todo remove at version 3\n   * @private\n   */\n\n  helpers_core.drawRoundedRectangle = function (ctx) {\n    ctx.beginPath();\n    exports$1.roundedRect.apply(exports$1, arguments);\n  };\n\n  var defaults = {\n    /**\n     * @private\n     */\n    _set: function _set(scope, values) {\n      return helpers_core.merge(this[scope] || (this[scope] = {}), values);\n    }\n  };\n\n  defaults._set('global', {\n    defaultColor: 'rgba(0,0,0,0.1)',\n    defaultFontColor: '#666',\n    defaultFontFamily: \"'Helvetica Neue', 'Helvetica', 'Arial', sans-serif\",\n    defaultFontSize: 12,\n    defaultFontStyle: 'normal',\n    defaultLineHeight: 1.2,\n    showLines: true\n  });\n\n  var core_defaults = defaults;\n  var valueOrDefault = helpers_core.valueOrDefault;\n  /**\n   * Converts the given font object into a CSS font string.\n   * @param {object} font - A font object.\n   * @return {string} The CSS font string. See https://developer.mozilla.org/en-US/docs/Web/CSS/font\n   * @private\n   */\n\n  function toFontString(font) {\n    if (!font || helpers_core.isNullOrUndef(font.size) || helpers_core.isNullOrUndef(font.family)) {\n      return null;\n    }\n\n    return (font.style ? font.style + ' ' : '') + (font.weight ? font.weight + ' ' : '') + font.size + 'px ' + font.family;\n  }\n  /**\n   * @alias Chart.helpers.options\n   * @namespace\n   */\n\n\n  var helpers_options = {\n    /**\n     * Converts the given line height `value` in pixels for a specific font `size`.\n     * @param {number|string} value - The lineHeight to parse (eg. 1.6, '14px', '75%', '1.6em').\n     * @param {number} size - The font size (in pixels) used to resolve relative `value`.\n     * @returns {number} The effective line height in pixels (size * 1.2 if value is invalid).\n     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/line-height\n     * @since 2.7.0\n     */\n    toLineHeight: function toLineHeight(value, size) {\n      var matches = ('' + value).match(/^(normal|(\\d+(?:\\.\\d+)?)(px|em|%)?)$/);\n\n      if (!matches || matches[1] === 'normal') {\n        return size * 1.2;\n      }\n\n      value = +matches[2];\n\n      switch (matches[3]) {\n        case 'px':\n          return value;\n\n        case '%':\n          value /= 100;\n          break;\n\n        default:\n          break;\n      }\n\n      return size * value;\n    },\n\n    /**\n     * Converts the given value into a padding object with pre-computed width/height.\n     * @param {number|object} value - If a number, set the value to all TRBL component,\n     *  else, if and object, use defined properties and sets undefined ones to 0.\n     * @returns {object} The padding values (top, right, bottom, left, width, height)\n     * @since 2.7.0\n     */\n    toPadding: function toPadding(value) {\n      var t, r, b, l;\n\n      if (helpers_core.isObject(value)) {\n        t = +value.top || 0;\n        r = +value.right || 0;\n        b = +value.bottom || 0;\n        l = +value.left || 0;\n      } else {\n        t = r = b = l = +value || 0;\n      }\n\n      return {\n        top: t,\n        right: r,\n        bottom: b,\n        left: l,\n        height: t + b,\n        width: l + r\n      };\n    },\n\n    /**\n     * Parses font options and returns the font object.\n     * @param {object} options - A object that contains font options to be parsed.\n     * @return {object} The font object.\n     * @todo Support font.* options and renamed to toFont().\n     * @private\n     */\n    _parseFont: function _parseFont(options) {\n      var globalDefaults = core_defaults.global;\n      var size = valueOrDefault(options.fontSize, globalDefaults.defaultFontSize);\n      var font = {\n        family: valueOrDefault(options.fontFamily, globalDefaults.defaultFontFamily),\n        lineHeight: helpers_core.options.toLineHeight(valueOrDefault(options.lineHeight, globalDefaults.defaultLineHeight), size),\n        size: size,\n        style: valueOrDefault(options.fontStyle, globalDefaults.defaultFontStyle),\n        weight: null,\n        string: ''\n      };\n      font.string = toFontString(font);\n      return font;\n    },\n\n    /**\n     * Evaluates the given `inputs` sequentially and returns the first defined value.\n     * @param {Array} inputs - An array of values, falling back to the last value.\n     * @param {object} [context] - If defined and the current value is a function, the value\n     * is called with `context` as first argument and the result becomes the new input.\n     * @param {number} [index] - If defined and the current value is an array, the value\n     * at `index` become the new input.\n     * @since 2.7.0\n     */\n    resolve: function resolve(inputs, context, index) {\n      var i, ilen, value;\n\n      for (i = 0, ilen = inputs.length; i < ilen; ++i) {\n        value = inputs[i];\n\n        if (value === undefined) {\n          continue;\n        }\n\n        if (context !== undefined && typeof value === 'function') {\n          value = value(context);\n        }\n\n        if (index !== undefined && helpers_core.isArray(value)) {\n          value = value[index];\n        }\n\n        if (value !== undefined) {\n          return value;\n        }\n      }\n    }\n  };\n  var helpers$1 = helpers_core;\n  var easing = helpers_easing;\n  var canvas = helpers_canvas;\n  var options = helpers_options;\n  helpers$1.easing = easing;\n  helpers$1.canvas = canvas;\n  helpers$1.options = options;\n\n  function interpolate(start, view, model, ease) {\n    var keys = Object.keys(model);\n    var i, ilen, key, actual, origin, target, type, c0, c1;\n\n    for (i = 0, ilen = keys.length; i < ilen; ++i) {\n      key = keys[i];\n      target = model[key]; // if a value is added to the model after pivot() has been called, the view\n      // doesn't contain it, so let's initialize the view to the target value.\n\n      if (!view.hasOwnProperty(key)) {\n        view[key] = target;\n      }\n\n      actual = view[key];\n\n      if (actual === target || key[0] === '_') {\n        continue;\n      }\n\n      if (!start.hasOwnProperty(key)) {\n        start[key] = actual;\n      }\n\n      origin = start[key];\n      type = typeof target;\n\n      if (type === typeof origin) {\n        if (type === 'string') {\n          c0 = chartjsColor(origin);\n\n          if (c0.valid) {\n            c1 = chartjsColor(target);\n\n            if (c1.valid) {\n              view[key] = c1.mix(c0, ease).rgbString();\n              continue;\n            }\n          }\n        } else if (helpers$1.isFinite(origin) && helpers$1.isFinite(target)) {\n          view[key] = origin + (target - origin) * ease;\n          continue;\n        }\n      }\n\n      view[key] = target;\n    }\n  }\n\n  var Element = function Element(configuration) {\n    helpers$1.extend(this, configuration);\n    this.initialize.apply(this, arguments);\n  };\n\n  helpers$1.extend(Element.prototype, {\n    initialize: function initialize() {\n      this.hidden = false;\n    },\n    pivot: function pivot() {\n      var me = this;\n\n      if (!me._view) {\n        me._view = helpers$1.clone(me._model);\n      }\n\n      me._start = {};\n      return me;\n    },\n    transition: function transition(ease) {\n      var me = this;\n      var model = me._model;\n      var start = me._start;\n      var view = me._view; // No animation -> No Transition\n\n      if (!model || ease === 1) {\n        me._view = model;\n        me._start = null;\n        return me;\n      }\n\n      if (!view) {\n        view = me._view = {};\n      }\n\n      if (!start) {\n        start = me._start = {};\n      }\n\n      interpolate(start, view, model, ease);\n      return me;\n    },\n    tooltipPosition: function tooltipPosition() {\n      return {\n        x: this._model.x,\n        y: this._model.y\n      };\n    },\n    hasValue: function hasValue() {\n      return helpers$1.isNumber(this._model.x) && helpers$1.isNumber(this._model.y);\n    }\n  });\n  Element.extend = helpers$1.inherits;\n  var core_element = Element;\n  var exports$2 = core_element.extend({\n    chart: null,\n    // the animation associated chart instance\n    currentStep: 0,\n    // the current animation step\n    numSteps: 60,\n    // default number of steps\n    easing: '',\n    // the easing to use for this animation\n    render: null,\n    // render function used by the animation service\n    onAnimationProgress: null,\n    // user specified callback to fire on each step of the animation\n    onAnimationComplete: null // user specified callback to fire when the animation finishes\n\n  });\n  var core_animation = exports$2; // DEPRECATIONS\n\n  /**\n   * Provided for backward compatibility, use Chart.Animation instead\n   * @prop Chart.Animation#animationObject\n   * @deprecated since version 2.6.0\n   * @todo remove at version 3\n   */\n\n  Object.defineProperty(exports$2.prototype, 'animationObject', {\n    get: function get() {\n      return this;\n    }\n  });\n  /**\n   * Provided for backward compatibility, use Chart.Animation#chart instead\n   * @prop Chart.Animation#chartInstance\n   * @deprecated since version 2.6.0\n   * @todo remove at version 3\n   */\n\n  Object.defineProperty(exports$2.prototype, 'chartInstance', {\n    get: function get() {\n      return this.chart;\n    },\n    set: function set(value) {\n      this.chart = value;\n    }\n  });\n\n  core_defaults._set('global', {\n    animation: {\n      duration: 1000,\n      easing: 'easeOutQuart',\n      onProgress: helpers$1.noop,\n      onComplete: helpers$1.noop\n    }\n  });\n\n  var core_animations = {\n    animations: [],\n    request: null,\n\n    /**\n     * @param {Chart} chart - The chart to animate.\n     * @param {Chart.Animation} animation - The animation that we will animate.\n     * @param {number} duration - The animation duration in ms.\n     * @param {boolean} lazy - if true, the chart is not marked as animating to enable more responsive interactions\n     */\n    addAnimation: function addAnimation(chart, animation, duration, lazy) {\n      var animations = this.animations;\n      var i, ilen;\n      animation.chart = chart;\n      animation.startTime = Date.now();\n      animation.duration = duration;\n\n      if (!lazy) {\n        chart.animating = true;\n      }\n\n      for (i = 0, ilen = animations.length; i < ilen; ++i) {\n        if (animations[i].chart === chart) {\n          animations[i] = animation;\n          return;\n        }\n      }\n\n      animations.push(animation); // If there are no animations queued, manually kickstart a digest, for lack of a better word\n\n      if (animations.length === 1) {\n        this.requestAnimationFrame();\n      }\n    },\n    cancelAnimation: function cancelAnimation(chart) {\n      var index = helpers$1.findIndex(this.animations, function (animation) {\n        return animation.chart === chart;\n      });\n\n      if (index !== -1) {\n        this.animations.splice(index, 1);\n        chart.animating = false;\n      }\n    },\n    requestAnimationFrame: function requestAnimationFrame() {\n      var me = this;\n\n      if (me.request === null) {\n        // Skip animation frame requests until the active one is executed.\n        // This can happen when processing mouse events, e.g. 'mousemove'\n        // and 'mouseout' events will trigger multiple renders.\n        me.request = helpers$1.requestAnimFrame.call(window, function () {\n          me.request = null;\n          me.startDigest();\n        });\n      }\n    },\n\n    /**\n     * @private\n     */\n    startDigest: function startDigest() {\n      var me = this;\n      me.advance(); // Do we have more stuff to animate?\n\n      if (me.animations.length > 0) {\n        me.requestAnimationFrame();\n      }\n    },\n\n    /**\n     * @private\n     */\n    advance: function advance() {\n      var animations = this.animations;\n      var animation, chart, numSteps, nextStep;\n      var i = 0; // 1 animation per chart, so we are looping charts here\n\n      while (i < animations.length) {\n        animation = animations[i];\n        chart = animation.chart;\n        numSteps = animation.numSteps; // Make sure that currentStep starts at 1\n        // https://github.com/chartjs/Chart.js/issues/6104\n\n        nextStep = Math.floor((Date.now() - animation.startTime) / animation.duration * numSteps) + 1;\n        animation.currentStep = Math.min(nextStep, numSteps);\n        helpers$1.callback(animation.render, [chart, animation], chart);\n        helpers$1.callback(animation.onAnimationProgress, [animation], chart);\n\n        if (animation.currentStep >= numSteps) {\n          helpers$1.callback(animation.onAnimationComplete, [animation], chart);\n          chart.animating = false;\n          animations.splice(i, 1);\n        } else {\n          ++i;\n        }\n      }\n    }\n  };\n  var resolve = helpers$1.options.resolve;\n  var arrayEvents = ['push', 'pop', 'shift', 'splice', 'unshift'];\n  /**\n   * Hooks the array methods that add or remove values ('push', pop', 'shift', 'splice',\n   * 'unshift') and notify the listener AFTER the array has been altered. Listeners are\n   * called on the 'onData*' callbacks (e.g. onDataPush, etc.) with same arguments.\n   */\n\n  function listenArrayEvents(array, listener) {\n    if (array._chartjs) {\n      array._chartjs.listeners.push(listener);\n\n      return;\n    }\n\n    Object.defineProperty(array, '_chartjs', {\n      configurable: true,\n      enumerable: false,\n      value: {\n        listeners: [listener]\n      }\n    });\n    arrayEvents.forEach(function (key) {\n      var method = 'onData' + key.charAt(0).toUpperCase() + key.slice(1);\n      var base = array[key];\n      Object.defineProperty(array, key, {\n        configurable: true,\n        enumerable: false,\n        value: function value() {\n          var args = Array.prototype.slice.call(arguments);\n          var res = base.apply(this, args);\n          helpers$1.each(array._chartjs.listeners, function (object) {\n            if (typeof object[method] === 'function') {\n              object[method].apply(object, args);\n            }\n          });\n          return res;\n        }\n      });\n    });\n  }\n  /**\n   * Removes the given array event listener and cleanup extra attached properties (such as\n   * the _chartjs stub and overridden methods) if array doesn't have any more listeners.\n   */\n\n\n  function unlistenArrayEvents(array, listener) {\n    var stub = array._chartjs;\n\n    if (!stub) {\n      return;\n    }\n\n    var listeners = stub.listeners;\n    var index = listeners.indexOf(listener);\n\n    if (index !== -1) {\n      listeners.splice(index, 1);\n    }\n\n    if (listeners.length > 0) {\n      return;\n    }\n\n    arrayEvents.forEach(function (key) {\n      delete array[key];\n    });\n    delete array._chartjs;\n  } // Base class for all dataset controllers (line, bar, etc)\n\n\n  var DatasetController = function DatasetController(chart, datasetIndex) {\n    this.initialize(chart, datasetIndex);\n  };\n\n  helpers$1.extend(DatasetController.prototype, {\n    /**\n     * Element type used to generate a meta dataset (e.g. Chart.element.Line).\n     * @type {Chart.core.element}\n     */\n    datasetElementType: null,\n\n    /**\n     * Element type used to generate a meta data (e.g. Chart.element.Point).\n     * @type {Chart.core.element}\n     */\n    dataElementType: null,\n    initialize: function initialize(chart, datasetIndex) {\n      var me = this;\n      me.chart = chart;\n      me.index = datasetIndex;\n      me.linkScales();\n      me.addElements();\n    },\n    updateIndex: function updateIndex(datasetIndex) {\n      this.index = datasetIndex;\n    },\n    linkScales: function linkScales() {\n      var me = this;\n      var meta = me.getMeta();\n      var dataset = me.getDataset();\n\n      if (meta.xAxisID === null || !(meta.xAxisID in me.chart.scales)) {\n        meta.xAxisID = dataset.xAxisID || me.chart.options.scales.xAxes[0].id;\n      }\n\n      if (meta.yAxisID === null || !(meta.yAxisID in me.chart.scales)) {\n        meta.yAxisID = dataset.yAxisID || me.chart.options.scales.yAxes[0].id;\n      }\n    },\n    getDataset: function getDataset() {\n      return this.chart.data.datasets[this.index];\n    },\n    getMeta: function getMeta() {\n      return this.chart.getDatasetMeta(this.index);\n    },\n    getScaleForId: function getScaleForId(scaleID) {\n      return this.chart.scales[scaleID];\n    },\n\n    /**\n     * @private\n     */\n    _getValueScaleId: function _getValueScaleId() {\n      return this.getMeta().yAxisID;\n    },\n\n    /**\n     * @private\n     */\n    _getIndexScaleId: function _getIndexScaleId() {\n      return this.getMeta().xAxisID;\n    },\n\n    /**\n     * @private\n     */\n    _getValueScale: function _getValueScale() {\n      return this.getScaleForId(this._getValueScaleId());\n    },\n\n    /**\n     * @private\n     */\n    _getIndexScale: function _getIndexScale() {\n      return this.getScaleForId(this._getIndexScaleId());\n    },\n    reset: function reset() {\n      this.update(true);\n    },\n\n    /**\n     * @private\n     */\n    destroy: function destroy() {\n      if (this._data) {\n        unlistenArrayEvents(this._data, this);\n      }\n    },\n    createMetaDataset: function createMetaDataset() {\n      var me = this;\n      var type = me.datasetElementType;\n      return type && new type({\n        _chart: me.chart,\n        _datasetIndex: me.index\n      });\n    },\n    createMetaData: function createMetaData(index) {\n      var me = this;\n      var type = me.dataElementType;\n      return type && new type({\n        _chart: me.chart,\n        _datasetIndex: me.index,\n        _index: index\n      });\n    },\n    addElements: function addElements() {\n      var me = this;\n      var meta = me.getMeta();\n      var data = me.getDataset().data || [];\n      var metaData = meta.data;\n      var i, ilen;\n\n      for (i = 0, ilen = data.length; i < ilen; ++i) {\n        metaData[i] = metaData[i] || me.createMetaData(i);\n      }\n\n      meta.dataset = meta.dataset || me.createMetaDataset();\n    },\n    addElementAndReset: function addElementAndReset(index) {\n      var element = this.createMetaData(index);\n      this.getMeta().data.splice(index, 0, element);\n      this.updateElement(element, index, true);\n    },\n    buildOrUpdateElements: function buildOrUpdateElements() {\n      var me = this;\n      var dataset = me.getDataset();\n      var data = dataset.data || (dataset.data = []); // In order to correctly handle data addition/deletion animation (an thus simulate\n      // real-time charts), we need to monitor these data modifications and synchronize\n      // the internal meta data accordingly.\n\n      if (me._data !== data) {\n        if (me._data) {\n          // This case happens when the user replaced the data array instance.\n          unlistenArrayEvents(me._data, me);\n        }\n\n        if (data && Object.isExtensible(data)) {\n          listenArrayEvents(data, me);\n        }\n\n        me._data = data;\n      } // Re-sync meta data in case the user replaced the data array or if we missed\n      // any updates and so make sure that we handle number of datapoints changing.\n\n\n      me.resyncElements();\n    },\n    update: helpers$1.noop,\n    transition: function transition(easingValue) {\n      var meta = this.getMeta();\n      var elements = meta.data || [];\n      var ilen = elements.length;\n      var i = 0;\n\n      for (; i < ilen; ++i) {\n        elements[i].transition(easingValue);\n      }\n\n      if (meta.dataset) {\n        meta.dataset.transition(easingValue);\n      }\n    },\n    draw: function draw() {\n      var meta = this.getMeta();\n      var elements = meta.data || [];\n      var ilen = elements.length;\n      var i = 0;\n\n      if (meta.dataset) {\n        meta.dataset.draw();\n      }\n\n      for (; i < ilen; ++i) {\n        elements[i].draw();\n      }\n    },\n    removeHoverStyle: function removeHoverStyle(element) {\n      helpers$1.merge(element._model, element.$previousStyle || {});\n      delete element.$previousStyle;\n    },\n    setHoverStyle: function setHoverStyle(element) {\n      var dataset = this.chart.data.datasets[element._datasetIndex];\n      var index = element._index;\n      var custom = element.custom || {};\n      var model = element._model;\n      var getHoverColor = helpers$1.getHoverColor;\n      element.$previousStyle = {\n        backgroundColor: model.backgroundColor,\n        borderColor: model.borderColor,\n        borderWidth: model.borderWidth\n      };\n      model.backgroundColor = resolve([custom.hoverBackgroundColor, dataset.hoverBackgroundColor, getHoverColor(model.backgroundColor)], undefined, index);\n      model.borderColor = resolve([custom.hoverBorderColor, dataset.hoverBorderColor, getHoverColor(model.borderColor)], undefined, index);\n      model.borderWidth = resolve([custom.hoverBorderWidth, dataset.hoverBorderWidth, model.borderWidth], undefined, index);\n    },\n\n    /**\n     * @private\n     */\n    resyncElements: function resyncElements() {\n      var me = this;\n      var meta = me.getMeta();\n      var data = me.getDataset().data;\n      var numMeta = meta.data.length;\n      var numData = data.length;\n\n      if (numData < numMeta) {\n        meta.data.splice(numData, numMeta - numData);\n      } else if (numData > numMeta) {\n        me.insertElements(numMeta, numData - numMeta);\n      }\n    },\n\n    /**\n     * @private\n     */\n    insertElements: function insertElements(start, count) {\n      for (var i = 0; i < count; ++i) {\n        this.addElementAndReset(start + i);\n      }\n    },\n\n    /**\n     * @private\n     */\n    onDataPush: function onDataPush() {\n      var count = arguments.length;\n      this.insertElements(this.getDataset().data.length - count, count);\n    },\n\n    /**\n     * @private\n     */\n    onDataPop: function onDataPop() {\n      this.getMeta().data.pop();\n    },\n\n    /**\n     * @private\n     */\n    onDataShift: function onDataShift() {\n      this.getMeta().data.shift();\n    },\n\n    /**\n     * @private\n     */\n    onDataSplice: function onDataSplice(start, count) {\n      this.getMeta().data.splice(start, count);\n      this.insertElements(start, arguments.length - 2);\n    },\n\n    /**\n     * @private\n     */\n    onDataUnshift: function onDataUnshift() {\n      this.insertElements(0, arguments.length);\n    }\n  });\n  DatasetController.extend = helpers$1.inherits;\n  var core_datasetController = DatasetController;\n\n  core_defaults._set('global', {\n    elements: {\n      arc: {\n        backgroundColor: core_defaults.global.defaultColor,\n        borderColor: '#fff',\n        borderWidth: 2,\n        borderAlign: 'center'\n      }\n    }\n  });\n\n  var element_arc = core_element.extend({\n    inLabelRange: function inLabelRange(mouseX) {\n      var vm = this._view;\n\n      if (vm) {\n        return Math.pow(mouseX - vm.x, 2) < Math.pow(vm.radius + vm.hoverRadius, 2);\n      }\n\n      return false;\n    },\n    inRange: function inRange(chartX, chartY) {\n      var vm = this._view;\n\n      if (vm) {\n        var pointRelativePosition = helpers$1.getAngleFromPoint(vm, {\n          x: chartX,\n          y: chartY\n        });\n        var angle = pointRelativePosition.angle;\n        var distance = pointRelativePosition.distance; // Sanitise angle range\n\n        var startAngle = vm.startAngle;\n        var endAngle = vm.endAngle;\n\n        while (endAngle < startAngle) {\n          endAngle += 2.0 * Math.PI;\n        }\n\n        while (angle > endAngle) {\n          angle -= 2.0 * Math.PI;\n        }\n\n        while (angle < startAngle) {\n          angle += 2.0 * Math.PI;\n        } // Check if within the range of the open/close angle\n\n\n        var betweenAngles = angle >= startAngle && angle <= endAngle;\n        var withinRadius = distance >= vm.innerRadius && distance <= vm.outerRadius;\n        return betweenAngles && withinRadius;\n      }\n\n      return false;\n    },\n    getCenterPoint: function getCenterPoint() {\n      var vm = this._view;\n      var halfAngle = (vm.startAngle + vm.endAngle) / 2;\n      var halfRadius = (vm.innerRadius + vm.outerRadius) / 2;\n      return {\n        x: vm.x + Math.cos(halfAngle) * halfRadius,\n        y: vm.y + Math.sin(halfAngle) * halfRadius\n      };\n    },\n    getArea: function getArea() {\n      var vm = this._view;\n      return Math.PI * ((vm.endAngle - vm.startAngle) / (2 * Math.PI)) * (Math.pow(vm.outerRadius, 2) - Math.pow(vm.innerRadius, 2));\n    },\n    tooltipPosition: function tooltipPosition() {\n      var vm = this._view;\n      var centreAngle = vm.startAngle + (vm.endAngle - vm.startAngle) / 2;\n      var rangeFromCentre = (vm.outerRadius - vm.innerRadius) / 2 + vm.innerRadius;\n      return {\n        x: vm.x + Math.cos(centreAngle) * rangeFromCentre,\n        y: vm.y + Math.sin(centreAngle) * rangeFromCentre\n      };\n    },\n    draw: function draw() {\n      var ctx = this._chart.ctx;\n      var vm = this._view;\n      var sA = vm.startAngle;\n      var eA = vm.endAngle;\n      var pixelMargin = vm.borderAlign === 'inner' ? 0.33 : 0;\n      var angleMargin;\n      ctx.save();\n      ctx.beginPath();\n      ctx.arc(vm.x, vm.y, Math.max(vm.outerRadius - pixelMargin, 0), sA, eA);\n      ctx.arc(vm.x, vm.y, vm.innerRadius, eA, sA, true);\n      ctx.closePath();\n      ctx.fillStyle = vm.backgroundColor;\n      ctx.fill();\n\n      if (vm.borderWidth) {\n        if (vm.borderAlign === 'inner') {\n          // Draw an inner border by cliping the arc and drawing a double-width border\n          // Enlarge the clipping arc by 0.33 pixels to eliminate glitches between borders\n          ctx.beginPath();\n          angleMargin = pixelMargin / vm.outerRadius;\n          ctx.arc(vm.x, vm.y, vm.outerRadius, sA - angleMargin, eA + angleMargin);\n\n          if (vm.innerRadius > pixelMargin) {\n            angleMargin = pixelMargin / vm.innerRadius;\n            ctx.arc(vm.x, vm.y, vm.innerRadius - pixelMargin, eA + angleMargin, sA - angleMargin, true);\n          } else {\n            ctx.arc(vm.x, vm.y, pixelMargin, eA + Math.PI / 2, sA - Math.PI / 2);\n          }\n\n          ctx.closePath();\n          ctx.clip();\n          ctx.beginPath();\n          ctx.arc(vm.x, vm.y, vm.outerRadius, sA, eA);\n          ctx.arc(vm.x, vm.y, vm.innerRadius, eA, sA, true);\n          ctx.closePath();\n          ctx.lineWidth = vm.borderWidth * 2;\n          ctx.lineJoin = 'round';\n        } else {\n          ctx.lineWidth = vm.borderWidth;\n          ctx.lineJoin = 'bevel';\n        }\n\n        ctx.strokeStyle = vm.borderColor;\n        ctx.stroke();\n      }\n\n      ctx.restore();\n    }\n  });\n  var valueOrDefault$1 = helpers$1.valueOrDefault;\n  var defaultColor = core_defaults.global.defaultColor;\n\n  core_defaults._set('global', {\n    elements: {\n      line: {\n        tension: 0.4,\n        backgroundColor: defaultColor,\n        borderWidth: 3,\n        borderColor: defaultColor,\n        borderCapStyle: 'butt',\n        borderDash: [],\n        borderDashOffset: 0.0,\n        borderJoinStyle: 'miter',\n        capBezierPoints: true,\n        fill: true // do we fill in the area between the line and its base axis\n\n      }\n    }\n  });\n\n  var element_line = core_element.extend({\n    draw: function draw() {\n      var me = this;\n      var vm = me._view;\n      var ctx = me._chart.ctx;\n      var spanGaps = vm.spanGaps;\n\n      var points = me._children.slice(); // clone array\n\n\n      var globalDefaults = core_defaults.global;\n      var globalOptionLineElements = globalDefaults.elements.line;\n      var lastDrawnIndex = -1;\n      var index, current, previous, currentVM; // If we are looping, adding the first point again\n\n      if (me._loop && points.length) {\n        points.push(points[0]);\n      }\n\n      ctx.save(); // Stroke Line Options\n\n      ctx.lineCap = vm.borderCapStyle || globalOptionLineElements.borderCapStyle; // IE 9 and 10 do not support line dash\n\n      if (ctx.setLineDash) {\n        ctx.setLineDash(vm.borderDash || globalOptionLineElements.borderDash);\n      }\n\n      ctx.lineDashOffset = valueOrDefault$1(vm.borderDashOffset, globalOptionLineElements.borderDashOffset);\n      ctx.lineJoin = vm.borderJoinStyle || globalOptionLineElements.borderJoinStyle;\n      ctx.lineWidth = valueOrDefault$1(vm.borderWidth, globalOptionLineElements.borderWidth);\n      ctx.strokeStyle = vm.borderColor || globalDefaults.defaultColor; // Stroke Line\n\n      ctx.beginPath();\n      lastDrawnIndex = -1;\n\n      for (index = 0; index < points.length; ++index) {\n        current = points[index];\n        previous = helpers$1.previousItem(points, index);\n        currentVM = current._view; // First point moves to it's starting position no matter what\n\n        if (index === 0) {\n          if (!currentVM.skip) {\n            ctx.moveTo(currentVM.x, currentVM.y);\n            lastDrawnIndex = index;\n          }\n        } else {\n          previous = lastDrawnIndex === -1 ? previous : points[lastDrawnIndex];\n\n          if (!currentVM.skip) {\n            if (lastDrawnIndex !== index - 1 && !spanGaps || lastDrawnIndex === -1) {\n              // There was a gap and this is the first point after the gap\n              ctx.moveTo(currentVM.x, currentVM.y);\n            } else {\n              // Line to next point\n              helpers$1.canvas.lineTo(ctx, previous._view, current._view);\n            }\n\n            lastDrawnIndex = index;\n          }\n        }\n      }\n\n      ctx.stroke();\n      ctx.restore();\n    }\n  });\n  var valueOrDefault$2 = helpers$1.valueOrDefault;\n  var defaultColor$1 = core_defaults.global.defaultColor;\n\n  core_defaults._set('global', {\n    elements: {\n      point: {\n        radius: 3,\n        pointStyle: 'circle',\n        backgroundColor: defaultColor$1,\n        borderColor: defaultColor$1,\n        borderWidth: 1,\n        // Hover\n        hitRadius: 1,\n        hoverRadius: 4,\n        hoverBorderWidth: 1\n      }\n    }\n  });\n\n  function xRange(mouseX) {\n    var vm = this._view;\n    return vm ? Math.abs(mouseX - vm.x) < vm.radius + vm.hitRadius : false;\n  }\n\n  function yRange(mouseY) {\n    var vm = this._view;\n    return vm ? Math.abs(mouseY - vm.y) < vm.radius + vm.hitRadius : false;\n  }\n\n  var element_point = core_element.extend({\n    inRange: function inRange(mouseX, mouseY) {\n      var vm = this._view;\n      return vm ? Math.pow(mouseX - vm.x, 2) + Math.pow(mouseY - vm.y, 2) < Math.pow(vm.hitRadius + vm.radius, 2) : false;\n    },\n    inLabelRange: xRange,\n    inXRange: xRange,\n    inYRange: yRange,\n    getCenterPoint: function getCenterPoint() {\n      var vm = this._view;\n      return {\n        x: vm.x,\n        y: vm.y\n      };\n    },\n    getArea: function getArea() {\n      return Math.PI * Math.pow(this._view.radius, 2);\n    },\n    tooltipPosition: function tooltipPosition() {\n      var vm = this._view;\n      return {\n        x: vm.x,\n        y: vm.y,\n        padding: vm.radius + vm.borderWidth\n      };\n    },\n    draw: function draw(chartArea) {\n      var vm = this._view;\n      var ctx = this._chart.ctx;\n      var pointStyle = vm.pointStyle;\n      var rotation = vm.rotation;\n      var radius = vm.radius;\n      var x = vm.x;\n      var y = vm.y;\n      var globalDefaults = core_defaults.global;\n      var defaultColor = globalDefaults.defaultColor; // eslint-disable-line no-shadow\n\n      if (vm.skip) {\n        return;\n      } // Clipping for Points.\n\n\n      if (chartArea === undefined || helpers$1.canvas._isPointInArea(vm, chartArea)) {\n        ctx.strokeStyle = vm.borderColor || defaultColor;\n        ctx.lineWidth = valueOrDefault$2(vm.borderWidth, globalDefaults.elements.point.borderWidth);\n        ctx.fillStyle = vm.backgroundColor || defaultColor;\n        helpers$1.canvas.drawPoint(ctx, pointStyle, radius, x, y, rotation);\n      }\n    }\n  });\n  var defaultColor$2 = core_defaults.global.defaultColor;\n\n  core_defaults._set('global', {\n    elements: {\n      rectangle: {\n        backgroundColor: defaultColor$2,\n        borderColor: defaultColor$2,\n        borderSkipped: 'bottom',\n        borderWidth: 0\n      }\n    }\n  });\n\n  function isVertical(vm) {\n    return vm && vm.width !== undefined;\n  }\n  /**\n   * Helper function to get the bounds of the bar regardless of the orientation\n   * @param bar {Chart.Element.Rectangle} the bar\n   * @return {Bounds} bounds of the bar\n   * @private\n   */\n\n\n  function getBarBounds(vm) {\n    var x1, x2, y1, y2, half;\n\n    if (isVertical(vm)) {\n      half = vm.width / 2;\n      x1 = vm.x - half;\n      x2 = vm.x + half;\n      y1 = Math.min(vm.y, vm.base);\n      y2 = Math.max(vm.y, vm.base);\n    } else {\n      half = vm.height / 2;\n      x1 = Math.min(vm.x, vm.base);\n      x2 = Math.max(vm.x, vm.base);\n      y1 = vm.y - half;\n      y2 = vm.y + half;\n    }\n\n    return {\n      left: x1,\n      top: y1,\n      right: x2,\n      bottom: y2\n    };\n  }\n\n  function swap(orig, v1, v2) {\n    return orig === v1 ? v2 : orig === v2 ? v1 : orig;\n  }\n\n  function parseBorderSkipped(vm) {\n    var edge = vm.borderSkipped;\n    var res = {};\n\n    if (!edge) {\n      return res;\n    }\n\n    if (vm.horizontal) {\n      if (vm.base > vm.x) {\n        edge = swap(edge, 'left', 'right');\n      }\n    } else if (vm.base < vm.y) {\n      edge = swap(edge, 'bottom', 'top');\n    }\n\n    res[edge] = true;\n    return res;\n  }\n\n  function parseBorderWidth(vm, maxW, maxH) {\n    var value = vm.borderWidth;\n    var skip = parseBorderSkipped(vm);\n    var t, r, b, l;\n\n    if (helpers$1.isObject(value)) {\n      t = +value.top || 0;\n      r = +value.right || 0;\n      b = +value.bottom || 0;\n      l = +value.left || 0;\n    } else {\n      t = r = b = l = +value || 0;\n    }\n\n    return {\n      t: skip.top || t < 0 ? 0 : t > maxH ? maxH : t,\n      r: skip.right || r < 0 ? 0 : r > maxW ? maxW : r,\n      b: skip.bottom || b < 0 ? 0 : b > maxH ? maxH : b,\n      l: skip.left || l < 0 ? 0 : l > maxW ? maxW : l\n    };\n  }\n\n  function boundingRects(vm) {\n    var bounds = getBarBounds(vm);\n    var width = bounds.right - bounds.left;\n    var height = bounds.bottom - bounds.top;\n    var border = parseBorderWidth(vm, width / 2, height / 2);\n    return {\n      outer: {\n        x: bounds.left,\n        y: bounds.top,\n        w: width,\n        h: height\n      },\n      inner: {\n        x: bounds.left + border.l,\n        y: bounds.top + border.t,\n        w: width - border.l - border.r,\n        h: height - border.t - border.b\n      }\n    };\n  }\n\n  function _inRange(vm, x, y) {\n    var skipX = x === null;\n    var skipY = y === null;\n    var bounds = !vm || skipX && skipY ? false : getBarBounds(vm);\n    return bounds && (skipX || x >= bounds.left && x <= bounds.right) && (skipY || y >= bounds.top && y <= bounds.bottom);\n  }\n\n  var element_rectangle = core_element.extend({\n    draw: function draw() {\n      var ctx = this._chart.ctx;\n      var vm = this._view;\n      var rects = boundingRects(vm);\n      var outer = rects.outer;\n      var inner = rects.inner;\n      ctx.fillStyle = vm.backgroundColor;\n      ctx.fillRect(outer.x, outer.y, outer.w, outer.h);\n\n      if (outer.w === inner.w && outer.h === inner.h) {\n        return;\n      }\n\n      ctx.save();\n      ctx.beginPath();\n      ctx.rect(outer.x, outer.y, outer.w, outer.h);\n      ctx.clip();\n      ctx.fillStyle = vm.borderColor;\n      ctx.rect(inner.x, inner.y, inner.w, inner.h);\n      ctx.fill('evenodd');\n      ctx.restore();\n    },\n    height: function height() {\n      var vm = this._view;\n      return vm.base - vm.y;\n    },\n    inRange: function inRange(mouseX, mouseY) {\n      return _inRange(this._view, mouseX, mouseY);\n    },\n    inLabelRange: function inLabelRange(mouseX, mouseY) {\n      var vm = this._view;\n      return isVertical(vm) ? _inRange(vm, mouseX, null) : _inRange(vm, null, mouseY);\n    },\n    inXRange: function inXRange(mouseX) {\n      return _inRange(this._view, mouseX, null);\n    },\n    inYRange: function inYRange(mouseY) {\n      return _inRange(this._view, null, mouseY);\n    },\n    getCenterPoint: function getCenterPoint() {\n      var vm = this._view;\n      var x, y;\n\n      if (isVertical(vm)) {\n        x = vm.x;\n        y = (vm.y + vm.base) / 2;\n      } else {\n        x = (vm.x + vm.base) / 2;\n        y = vm.y;\n      }\n\n      return {\n        x: x,\n        y: y\n      };\n    },\n    getArea: function getArea() {\n      var vm = this._view;\n      return isVertical(vm) ? vm.width * Math.abs(vm.y - vm.base) : vm.height * Math.abs(vm.x - vm.base);\n    },\n    tooltipPosition: function tooltipPosition() {\n      var vm = this._view;\n      return {\n        x: vm.x,\n        y: vm.y\n      };\n    }\n  });\n  var elements = {};\n  var Arc = element_arc;\n  var Line = element_line;\n  var Point = element_point;\n  var Rectangle = element_rectangle;\n  elements.Arc = Arc;\n  elements.Line = Line;\n  elements.Point = Point;\n  elements.Rectangle = Rectangle;\n  var resolve$1 = helpers$1.options.resolve;\n\n  core_defaults._set('bar', {\n    hover: {\n      mode: 'label'\n    },\n    scales: {\n      xAxes: [{\n        type: 'category',\n        categoryPercentage: 0.8,\n        barPercentage: 0.9,\n        offset: true,\n        gridLines: {\n          offsetGridLines: true\n        }\n      }],\n      yAxes: [{\n        type: 'linear'\n      }]\n    }\n  });\n  /**\n   * Computes the \"optimal\" sample size to maintain bars equally sized while preventing overlap.\n   * @private\n   */\n\n\n  function computeMinSampleSize(scale, pixels) {\n    var min = scale.isHorizontal() ? scale.width : scale.height;\n    var ticks = scale.getTicks();\n    var prev, curr, i, ilen;\n\n    for (i = 1, ilen = pixels.length; i < ilen; ++i) {\n      min = Math.min(min, Math.abs(pixels[i] - pixels[i - 1]));\n    }\n\n    for (i = 0, ilen = ticks.length; i < ilen; ++i) {\n      curr = scale.getPixelForTick(i);\n      min = i > 0 ? Math.min(min, curr - prev) : min;\n      prev = curr;\n    }\n\n    return min;\n  }\n  /**\n   * Computes an \"ideal\" category based on the absolute bar thickness or, if undefined or null,\n   * uses the smallest interval (see computeMinSampleSize) that prevents bar overlapping. This\n   * mode currently always generates bars equally sized (until we introduce scriptable options?).\n   * @private\n   */\n\n\n  function computeFitCategoryTraits(index, ruler, options) {\n    var thickness = options.barThickness;\n    var count = ruler.stackCount;\n    var curr = ruler.pixels[index];\n    var size, ratio;\n\n    if (helpers$1.isNullOrUndef(thickness)) {\n      size = ruler.min * options.categoryPercentage;\n      ratio = options.barPercentage;\n    } else {\n      // When bar thickness is enforced, category and bar percentages are ignored.\n      // Note(SB): we could add support for relative bar thickness (e.g. barThickness: '50%')\n      // and deprecate barPercentage since this value is ignored when thickness is absolute.\n      size = thickness * count;\n      ratio = 1;\n    }\n\n    return {\n      chunk: size / count,\n      ratio: ratio,\n      start: curr - size / 2\n    };\n  }\n  /**\n   * Computes an \"optimal\" category that globally arranges bars side by side (no gap when\n   * percentage options are 1), based on the previous and following categories. This mode\n   * generates bars with different widths when data are not evenly spaced.\n   * @private\n   */\n\n\n  function computeFlexCategoryTraits(index, ruler, options) {\n    var pixels = ruler.pixels;\n    var curr = pixels[index];\n    var prev = index > 0 ? pixels[index - 1] : null;\n    var next = index < pixels.length - 1 ? pixels[index + 1] : null;\n    var percent = options.categoryPercentage;\n    var start, size;\n\n    if (prev === null) {\n      // first data: its size is double based on the next point or,\n      // if it's also the last data, we use the scale size.\n      prev = curr - (next === null ? ruler.end - ruler.start : next - curr);\n    }\n\n    if (next === null) {\n      // last data: its size is also double based on the previous point.\n      next = curr + curr - prev;\n    }\n\n    start = curr - (curr - Math.min(prev, next)) / 2 * percent;\n    size = Math.abs(next - prev) / 2 * percent;\n    return {\n      chunk: size / ruler.stackCount,\n      ratio: options.barPercentage,\n      start: start\n    };\n  }\n\n  var controller_bar = core_datasetController.extend({\n    dataElementType: elements.Rectangle,\n    initialize: function initialize() {\n      var me = this;\n      var meta;\n      core_datasetController.prototype.initialize.apply(me, arguments);\n      meta = me.getMeta();\n      meta.stack = me.getDataset().stack;\n      meta.bar = true;\n    },\n    update: function update(reset) {\n      var me = this;\n      var rects = me.getMeta().data;\n      var i, ilen;\n      me._ruler = me.getRuler();\n\n      for (i = 0, ilen = rects.length; i < ilen; ++i) {\n        me.updateElement(rects[i], i, reset);\n      }\n    },\n    updateElement: function updateElement(rectangle, index, reset) {\n      var me = this;\n      var meta = me.getMeta();\n      var dataset = me.getDataset();\n\n      var options = me._resolveElementOptions(rectangle, index);\n\n      rectangle._xScale = me.getScaleForId(meta.xAxisID);\n      rectangle._yScale = me.getScaleForId(meta.yAxisID);\n      rectangle._datasetIndex = me.index;\n      rectangle._index = index;\n      rectangle._model = {\n        backgroundColor: options.backgroundColor,\n        borderColor: options.borderColor,\n        borderSkipped: options.borderSkipped,\n        borderWidth: options.borderWidth,\n        datasetLabel: dataset.label,\n        label: me.chart.data.labels[index]\n      };\n\n      me._updateElementGeometry(rectangle, index, reset);\n\n      rectangle.pivot();\n    },\n\n    /**\n     * @private\n     */\n    _updateElementGeometry: function _updateElementGeometry(rectangle, index, reset) {\n      var me = this;\n      var model = rectangle._model;\n\n      var vscale = me._getValueScale();\n\n      var base = vscale.getBasePixel();\n      var horizontal = vscale.isHorizontal();\n      var ruler = me._ruler || me.getRuler();\n      var vpixels = me.calculateBarValuePixels(me.index, index);\n      var ipixels = me.calculateBarIndexPixels(me.index, index, ruler);\n      model.horizontal = horizontal;\n      model.base = reset ? base : vpixels.base;\n      model.x = horizontal ? reset ? base : vpixels.head : ipixels.center;\n      model.y = horizontal ? ipixels.center : reset ? base : vpixels.head;\n      model.height = horizontal ? ipixels.size : undefined;\n      model.width = horizontal ? undefined : ipixels.size;\n    },\n\n    /**\n     * Returns the stacks based on groups and bar visibility.\n     * @param {number} [last] - The dataset index\n     * @returns {string[]} The list of stack IDs\n     * @private\n     */\n    _getStacks: function _getStacks(last) {\n      var me = this;\n      var chart = me.chart;\n\n      var scale = me._getIndexScale();\n\n      var stacked = scale.options.stacked;\n      var ilen = last === undefined ? chart.data.datasets.length : last + 1;\n      var stacks = [];\n      var i, meta;\n\n      for (i = 0; i < ilen; ++i) {\n        meta = chart.getDatasetMeta(i);\n\n        if (meta.bar && chart.isDatasetVisible(i) && (stacked === false || stacked === true && stacks.indexOf(meta.stack) === -1 || stacked === undefined && (meta.stack === undefined || stacks.indexOf(meta.stack) === -1))) {\n          stacks.push(meta.stack);\n        }\n      }\n\n      return stacks;\n    },\n\n    /**\n     * Returns the effective number of stacks based on groups and bar visibility.\n     * @private\n     */\n    getStackCount: function getStackCount() {\n      return this._getStacks().length;\n    },\n\n    /**\n     * Returns the stack index for the given dataset based on groups and bar visibility.\n     * @param {number} [datasetIndex] - The dataset index\n     * @param {string} [name] - The stack name to find\n     * @returns {number} The stack index\n     * @private\n     */\n    getStackIndex: function getStackIndex(datasetIndex, name) {\n      var stacks = this._getStacks(datasetIndex);\n\n      var index = name !== undefined ? stacks.indexOf(name) : -1; // indexOf returns -1 if element is not present\n\n      return index === -1 ? stacks.length - 1 : index;\n    },\n\n    /**\n     * @private\n     */\n    getRuler: function getRuler() {\n      var me = this;\n\n      var scale = me._getIndexScale();\n\n      var stackCount = me.getStackCount();\n      var datasetIndex = me.index;\n      var isHorizontal = scale.isHorizontal();\n      var start = isHorizontal ? scale.left : scale.top;\n      var end = start + (isHorizontal ? scale.width : scale.height);\n      var pixels = [];\n      var i, ilen, min;\n\n      for (i = 0, ilen = me.getMeta().data.length; i < ilen; ++i) {\n        pixels.push(scale.getPixelForValue(null, i, datasetIndex));\n      }\n\n      min = helpers$1.isNullOrUndef(scale.options.barThickness) ? computeMinSampleSize(scale, pixels) : -1;\n      return {\n        min: min,\n        pixels: pixels,\n        start: start,\n        end: end,\n        stackCount: stackCount,\n        scale: scale\n      };\n    },\n\n    /**\n     * Note: pixel values are not clamped to the scale area.\n     * @private\n     */\n    calculateBarValuePixels: function calculateBarValuePixels(datasetIndex, index) {\n      var me = this;\n      var chart = me.chart;\n      var meta = me.getMeta();\n\n      var scale = me._getValueScale();\n\n      var isHorizontal = scale.isHorizontal();\n      var datasets = chart.data.datasets;\n      var value = +scale.getRightValue(datasets[datasetIndex].data[index]);\n      var minBarLength = scale.options.minBarLength;\n      var stacked = scale.options.stacked;\n      var stack = meta.stack;\n      var start = 0;\n      var i, imeta, ivalue, base, head, size;\n\n      if (stacked || stacked === undefined && stack !== undefined) {\n        for (i = 0; i < datasetIndex; ++i) {\n          imeta = chart.getDatasetMeta(i);\n\n          if (imeta.bar && imeta.stack === stack && imeta.controller._getValueScaleId() === scale.id && chart.isDatasetVisible(i)) {\n            ivalue = +scale.getRightValue(datasets[i].data[index]);\n\n            if (value < 0 && ivalue < 0 || value >= 0 && ivalue > 0) {\n              start += ivalue;\n            }\n          }\n        }\n      }\n\n      base = scale.getPixelForValue(start);\n      head = scale.getPixelForValue(start + value);\n      size = head - base;\n\n      if (minBarLength !== undefined && Math.abs(size) < minBarLength) {\n        size = minBarLength;\n\n        if (value >= 0 && !isHorizontal || value < 0 && isHorizontal) {\n          head = base - minBarLength;\n        } else {\n          head = base + minBarLength;\n        }\n      }\n\n      return {\n        size: size,\n        base: base,\n        head: head,\n        center: head + size / 2\n      };\n    },\n\n    /**\n     * @private\n     */\n    calculateBarIndexPixels: function calculateBarIndexPixels(datasetIndex, index, ruler) {\n      var me = this;\n      var options = ruler.scale.options;\n      var range = options.barThickness === 'flex' ? computeFlexCategoryTraits(index, ruler, options) : computeFitCategoryTraits(index, ruler, options);\n      var stackIndex = me.getStackIndex(datasetIndex, me.getMeta().stack);\n      var center = range.start + range.chunk * stackIndex + range.chunk / 2;\n      var size = Math.min(helpers$1.valueOrDefault(options.maxBarThickness, Infinity), range.chunk * range.ratio);\n      return {\n        base: center - size / 2,\n        head: center + size / 2,\n        center: center,\n        size: size\n      };\n    },\n    draw: function draw() {\n      var me = this;\n      var chart = me.chart;\n\n      var scale = me._getValueScale();\n\n      var rects = me.getMeta().data;\n      var dataset = me.getDataset();\n      var ilen = rects.length;\n      var i = 0;\n      helpers$1.canvas.clipArea(chart.ctx, chart.chartArea);\n\n      for (; i < ilen; ++i) {\n        if (!isNaN(scale.getRightValue(dataset.data[i]))) {\n          rects[i].draw();\n        }\n      }\n\n      helpers$1.canvas.unclipArea(chart.ctx);\n    },\n\n    /**\n     * @private\n     */\n    _resolveElementOptions: function _resolveElementOptions(rectangle, index) {\n      var me = this;\n      var chart = me.chart;\n      var datasets = chart.data.datasets;\n      var dataset = datasets[me.index];\n      var custom = rectangle.custom || {};\n      var options = chart.options.elements.rectangle;\n      var values = {};\n      var i, ilen, key; // Scriptable options\n\n      var context = {\n        chart: chart,\n        dataIndex: index,\n        dataset: dataset,\n        datasetIndex: me.index\n      };\n      var keys = ['backgroundColor', 'borderColor', 'borderSkipped', 'borderWidth'];\n\n      for (i = 0, ilen = keys.length; i < ilen; ++i) {\n        key = keys[i];\n        values[key] = resolve$1([custom[key], dataset[key], options[key]], context, index);\n      }\n\n      return values;\n    }\n  });\n  var valueOrDefault$3 = helpers$1.valueOrDefault;\n  var resolve$2 = helpers$1.options.resolve;\n\n  core_defaults._set('bubble', {\n    hover: {\n      mode: 'single'\n    },\n    scales: {\n      xAxes: [{\n        type: 'linear',\n        // bubble should probably use a linear scale by default\n        position: 'bottom',\n        id: 'x-axis-0' // need an ID so datasets can reference the scale\n\n      }],\n      yAxes: [{\n        type: 'linear',\n        position: 'left',\n        id: 'y-axis-0'\n      }]\n    },\n    tooltips: {\n      callbacks: {\n        title: function title() {\n          // Title doesn't make sense for scatter since we format the data as a point\n          return '';\n        },\n        label: function label(item, data) {\n          var datasetLabel = data.datasets[item.datasetIndex].label || '';\n          var dataPoint = data.datasets[item.datasetIndex].data[item.index];\n          return datasetLabel + ': (' + item.xLabel + ', ' + item.yLabel + ', ' + dataPoint.r + ')';\n        }\n      }\n    }\n  });\n\n  var controller_bubble = core_datasetController.extend({\n    /**\n     * @protected\n     */\n    dataElementType: elements.Point,\n\n    /**\n     * @protected\n     */\n    update: function update(reset) {\n      var me = this;\n      var meta = me.getMeta();\n      var points = meta.data; // Update Points\n\n      helpers$1.each(points, function (point, index) {\n        me.updateElement(point, index, reset);\n      });\n    },\n\n    /**\n     * @protected\n     */\n    updateElement: function updateElement(point, index, reset) {\n      var me = this;\n      var meta = me.getMeta();\n      var custom = point.custom || {};\n      var xScale = me.getScaleForId(meta.xAxisID);\n      var yScale = me.getScaleForId(meta.yAxisID);\n\n      var options = me._resolveElementOptions(point, index);\n\n      var data = me.getDataset().data[index];\n      var dsIndex = me.index;\n      var x = reset ? xScale.getPixelForDecimal(0.5) : xScale.getPixelForValue(typeof data === 'object' ? data : NaN, index, dsIndex);\n      var y = reset ? yScale.getBasePixel() : yScale.getPixelForValue(data, index, dsIndex);\n      point._xScale = xScale;\n      point._yScale = yScale;\n      point._options = options;\n      point._datasetIndex = dsIndex;\n      point._index = index;\n      point._model = {\n        backgroundColor: options.backgroundColor,\n        borderColor: options.borderColor,\n        borderWidth: options.borderWidth,\n        hitRadius: options.hitRadius,\n        pointStyle: options.pointStyle,\n        rotation: options.rotation,\n        radius: reset ? 0 : options.radius,\n        skip: custom.skip || isNaN(x) || isNaN(y),\n        x: x,\n        y: y\n      };\n      point.pivot();\n    },\n\n    /**\n     * @protected\n     */\n    setHoverStyle: function setHoverStyle(point) {\n      var model = point._model;\n      var options = point._options;\n      var getHoverColor = helpers$1.getHoverColor;\n      point.$previousStyle = {\n        backgroundColor: model.backgroundColor,\n        borderColor: model.borderColor,\n        borderWidth: model.borderWidth,\n        radius: model.radius\n      };\n      model.backgroundColor = valueOrDefault$3(options.hoverBackgroundColor, getHoverColor(options.backgroundColor));\n      model.borderColor = valueOrDefault$3(options.hoverBorderColor, getHoverColor(options.borderColor));\n      model.borderWidth = valueOrDefault$3(options.hoverBorderWidth, options.borderWidth);\n      model.radius = options.radius + options.hoverRadius;\n    },\n\n    /**\n     * @private\n     */\n    _resolveElementOptions: function _resolveElementOptions(point, index) {\n      var me = this;\n      var chart = me.chart;\n      var datasets = chart.data.datasets;\n      var dataset = datasets[me.index];\n      var custom = point.custom || {};\n      var options = chart.options.elements.point;\n      var data = dataset.data[index];\n      var values = {};\n      var i, ilen, key; // Scriptable options\n\n      var context = {\n        chart: chart,\n        dataIndex: index,\n        dataset: dataset,\n        datasetIndex: me.index\n      };\n      var keys = ['backgroundColor', 'borderColor', 'borderWidth', 'hoverBackgroundColor', 'hoverBorderColor', 'hoverBorderWidth', 'hoverRadius', 'hitRadius', 'pointStyle', 'rotation'];\n\n      for (i = 0, ilen = keys.length; i < ilen; ++i) {\n        key = keys[i];\n        values[key] = resolve$2([custom[key], dataset[key], options[key]], context, index);\n      } // Custom radius resolution\n\n\n      values.radius = resolve$2([custom.radius, data ? data.r : undefined, dataset.radius, options.radius], context, index);\n      return values;\n    }\n  });\n  var resolve$3 = helpers$1.options.resolve;\n  var valueOrDefault$4 = helpers$1.valueOrDefault;\n\n  core_defaults._set('doughnut', {\n    animation: {\n      // Boolean - Whether we animate the rotation of the Doughnut\n      animateRotate: true,\n      // Boolean - Whether we animate scaling the Doughnut from the centre\n      animateScale: false\n    },\n    hover: {\n      mode: 'single'\n    },\n    legendCallback: function legendCallback(chart) {\n      var text = [];\n      text.push('<ul class=\"' + chart.id + '-legend\">');\n      var data = chart.data;\n      var datasets = data.datasets;\n      var labels = data.labels;\n\n      if (datasets.length) {\n        for (var i = 0; i < datasets[0].data.length; ++i) {\n          text.push('<li><span style=\"background-color:' + datasets[0].backgroundColor[i] + '\"></span>');\n\n          if (labels[i]) {\n            text.push(labels[i]);\n          }\n\n          text.push('</li>');\n        }\n      }\n\n      text.push('</ul>');\n      return text.join('');\n    },\n    legend: {\n      labels: {\n        generateLabels: function generateLabels(chart) {\n          var data = chart.data;\n\n          if (data.labels.length && data.datasets.length) {\n            return data.labels.map(function (label, i) {\n              var meta = chart.getDatasetMeta(0);\n              var ds = data.datasets[0];\n              var arc = meta.data[i];\n              var custom = arc && arc.custom || {};\n              var arcOpts = chart.options.elements.arc;\n              var fill = resolve$3([custom.backgroundColor, ds.backgroundColor, arcOpts.backgroundColor], undefined, i);\n              var stroke = resolve$3([custom.borderColor, ds.borderColor, arcOpts.borderColor], undefined, i);\n              var bw = resolve$3([custom.borderWidth, ds.borderWidth, arcOpts.borderWidth], undefined, i);\n              return {\n                text: label,\n                fillStyle: fill,\n                strokeStyle: stroke,\n                lineWidth: bw,\n                hidden: isNaN(ds.data[i]) || meta.data[i].hidden,\n                // Extra data used for toggling the correct item\n                index: i\n              };\n            });\n          }\n\n          return [];\n        }\n      },\n      onClick: function onClick(e, legendItem) {\n        var index = legendItem.index;\n        var chart = this.chart;\n        var i, ilen, meta;\n\n        for (i = 0, ilen = (chart.data.datasets || []).length; i < ilen; ++i) {\n          meta = chart.getDatasetMeta(i); // toggle visibility of index if exists\n\n          if (meta.data[index]) {\n            meta.data[index].hidden = !meta.data[index].hidden;\n          }\n        }\n\n        chart.update();\n      }\n    },\n    // The percentage of the chart that we cut out of the middle.\n    cutoutPercentage: 50,\n    // The rotation of the chart, where the first data arc begins.\n    rotation: Math.PI * -0.5,\n    // The total circumference of the chart.\n    circumference: Math.PI * 2.0,\n    // Need to override these to give a nice default\n    tooltips: {\n      callbacks: {\n        title: function title() {\n          return '';\n        },\n        label: function label(tooltipItem, data) {\n          var dataLabel = data.labels[tooltipItem.index];\n          var value = ': ' + data.datasets[tooltipItem.datasetIndex].data[tooltipItem.index];\n\n          if (helpers$1.isArray(dataLabel)) {\n            // show value on first line of multiline label\n            // need to clone because we are changing the value\n            dataLabel = dataLabel.slice();\n            dataLabel[0] += value;\n          } else {\n            dataLabel += value;\n          }\n\n          return dataLabel;\n        }\n      }\n    }\n  });\n\n  var controller_doughnut = core_datasetController.extend({\n    dataElementType: elements.Arc,\n    linkScales: helpers$1.noop,\n    // Get index of the dataset in relation to the visible datasets. This allows determining the inner and outer radius correctly\n    getRingIndex: function getRingIndex(datasetIndex) {\n      var ringIndex = 0;\n\n      for (var j = 0; j < datasetIndex; ++j) {\n        if (this.chart.isDatasetVisible(j)) {\n          ++ringIndex;\n        }\n      }\n\n      return ringIndex;\n    },\n    update: function update(reset) {\n      var me = this;\n      var chart = me.chart;\n      var chartArea = chart.chartArea;\n      var opts = chart.options;\n      var availableWidth = chartArea.right - chartArea.left;\n      var availableHeight = chartArea.bottom - chartArea.top;\n      var minSize = Math.min(availableWidth, availableHeight);\n      var offset = {\n        x: 0,\n        y: 0\n      };\n      var meta = me.getMeta();\n      var arcs = meta.data;\n      var cutoutPercentage = opts.cutoutPercentage;\n      var circumference = opts.circumference;\n\n      var chartWeight = me._getRingWeight(me.index);\n\n      var i, ilen; // If the chart's circumference isn't a full circle, calculate minSize as a ratio of the width/height of the arc\n\n      if (circumference < Math.PI * 2.0) {\n        var startAngle = opts.rotation % (Math.PI * 2.0);\n        startAngle += Math.PI * 2.0 * (startAngle >= Math.PI ? -1 : startAngle < -Math.PI ? 1 : 0);\n        var endAngle = startAngle + circumference;\n        var start = {\n          x: Math.cos(startAngle),\n          y: Math.sin(startAngle)\n        };\n        var end = {\n          x: Math.cos(endAngle),\n          y: Math.sin(endAngle)\n        };\n        var contains0 = startAngle <= 0 && endAngle >= 0 || startAngle <= Math.PI * 2.0 && Math.PI * 2.0 <= endAngle;\n        var contains90 = startAngle <= Math.PI * 0.5 && Math.PI * 0.5 <= endAngle || startAngle <= Math.PI * 2.5 && Math.PI * 2.5 <= endAngle;\n        var contains180 = startAngle <= -Math.PI && -Math.PI <= endAngle || startAngle <= Math.PI && Math.PI <= endAngle;\n        var contains270 = startAngle <= -Math.PI * 0.5 && -Math.PI * 0.5 <= endAngle || startAngle <= Math.PI * 1.5 && Math.PI * 1.5 <= endAngle;\n        var cutout = cutoutPercentage / 100.0;\n        var min = {\n          x: contains180 ? -1 : Math.min(start.x * (start.x < 0 ? 1 : cutout), end.x * (end.x < 0 ? 1 : cutout)),\n          y: contains270 ? -1 : Math.min(start.y * (start.y < 0 ? 1 : cutout), end.y * (end.y < 0 ? 1 : cutout))\n        };\n        var max = {\n          x: contains0 ? 1 : Math.max(start.x * (start.x > 0 ? 1 : cutout), end.x * (end.x > 0 ? 1 : cutout)),\n          y: contains90 ? 1 : Math.max(start.y * (start.y > 0 ? 1 : cutout), end.y * (end.y > 0 ? 1 : cutout))\n        };\n        var size = {\n          width: (max.x - min.x) * 0.5,\n          height: (max.y - min.y) * 0.5\n        };\n        minSize = Math.min(availableWidth / size.width, availableHeight / size.height);\n        offset = {\n          x: (max.x + min.x) * -0.5,\n          y: (max.y + min.y) * -0.5\n        };\n      }\n\n      for (i = 0, ilen = arcs.length; i < ilen; ++i) {\n        arcs[i]._options = me._resolveElementOptions(arcs[i], i);\n      }\n\n      chart.borderWidth = me.getMaxBorderWidth();\n      chart.outerRadius = Math.max((minSize - chart.borderWidth) / 2, 0);\n      chart.innerRadius = Math.max(cutoutPercentage ? chart.outerRadius / 100 * cutoutPercentage : 0, 0);\n      chart.radiusLength = (chart.outerRadius - chart.innerRadius) / (me._getVisibleDatasetWeightTotal() || 1);\n      chart.offsetX = offset.x * chart.outerRadius;\n      chart.offsetY = offset.y * chart.outerRadius;\n      meta.total = me.calculateTotal();\n      me.outerRadius = chart.outerRadius - chart.radiusLength * me._getRingWeightOffset(me.index);\n      me.innerRadius = Math.max(me.outerRadius - chart.radiusLength * chartWeight, 0);\n\n      for (i = 0, ilen = arcs.length; i < ilen; ++i) {\n        me.updateElement(arcs[i], i, reset);\n      }\n    },\n    updateElement: function updateElement(arc, index, reset) {\n      var me = this;\n      var chart = me.chart;\n      var chartArea = chart.chartArea;\n      var opts = chart.options;\n      var animationOpts = opts.animation;\n      var centerX = (chartArea.left + chartArea.right) / 2;\n      var centerY = (chartArea.top + chartArea.bottom) / 2;\n      var startAngle = opts.rotation; // non reset case handled later\n\n      var endAngle = opts.rotation; // non reset case handled later\n\n      var dataset = me.getDataset();\n      var circumference = reset && animationOpts.animateRotate ? 0 : arc.hidden ? 0 : me.calculateCircumference(dataset.data[index]) * (opts.circumference / (2.0 * Math.PI));\n      var innerRadius = reset && animationOpts.animateScale ? 0 : me.innerRadius;\n      var outerRadius = reset && animationOpts.animateScale ? 0 : me.outerRadius;\n      var options = arc._options || {};\n      helpers$1.extend(arc, {\n        // Utility\n        _datasetIndex: me.index,\n        _index: index,\n        // Desired view properties\n        _model: {\n          backgroundColor: options.backgroundColor,\n          borderColor: options.borderColor,\n          borderWidth: options.borderWidth,\n          borderAlign: options.borderAlign,\n          x: centerX + chart.offsetX,\n          y: centerY + chart.offsetY,\n          startAngle: startAngle,\n          endAngle: endAngle,\n          circumference: circumference,\n          outerRadius: outerRadius,\n          innerRadius: innerRadius,\n          label: helpers$1.valueAtIndexOrDefault(dataset.label, index, chart.data.labels[index])\n        }\n      });\n      var model = arc._model; // Set correct angles if not resetting\n\n      if (!reset || !animationOpts.animateRotate) {\n        if (index === 0) {\n          model.startAngle = opts.rotation;\n        } else {\n          model.startAngle = me.getMeta().data[index - 1]._model.endAngle;\n        }\n\n        model.endAngle = model.startAngle + model.circumference;\n      }\n\n      arc.pivot();\n    },\n    calculateTotal: function calculateTotal() {\n      var dataset = this.getDataset();\n      var meta = this.getMeta();\n      var total = 0;\n      var value;\n      helpers$1.each(meta.data, function (element, index) {\n        value = dataset.data[index];\n\n        if (!isNaN(value) && !element.hidden) {\n          total += Math.abs(value);\n        }\n      });\n      /* if (total === 0) {\n      \ttotal = NaN;\n      }*/\n\n      return total;\n    },\n    calculateCircumference: function calculateCircumference(value) {\n      var total = this.getMeta().total;\n\n      if (total > 0 && !isNaN(value)) {\n        return Math.PI * 2.0 * (Math.abs(value) / total);\n      }\n\n      return 0;\n    },\n    // gets the max border or hover width to properly scale pie charts\n    getMaxBorderWidth: function getMaxBorderWidth(arcs) {\n      var me = this;\n      var max = 0;\n      var chart = me.chart;\n      var i, ilen, meta, arc, controller, options, borderWidth, hoverWidth;\n\n      if (!arcs) {\n        // Find the outmost visible dataset\n        for (i = 0, ilen = chart.data.datasets.length; i < ilen; ++i) {\n          if (chart.isDatasetVisible(i)) {\n            meta = chart.getDatasetMeta(i);\n            arcs = meta.data;\n\n            if (i !== me.index) {\n              controller = meta.controller;\n            }\n\n            break;\n          }\n        }\n      }\n\n      if (!arcs) {\n        return 0;\n      }\n\n      for (i = 0, ilen = arcs.length; i < ilen; ++i) {\n        arc = arcs[i];\n        options = controller ? controller._resolveElementOptions(arc, i) : arc._options;\n\n        if (options.borderAlign !== 'inner') {\n          borderWidth = options.borderWidth;\n          hoverWidth = options.hoverBorderWidth;\n          max = borderWidth > max ? borderWidth : max;\n          max = hoverWidth > max ? hoverWidth : max;\n        }\n      }\n\n      return max;\n    },\n\n    /**\n     * @protected\n     */\n    setHoverStyle: function setHoverStyle(arc) {\n      var model = arc._model;\n      var options = arc._options;\n      var getHoverColor = helpers$1.getHoverColor;\n      arc.$previousStyle = {\n        backgroundColor: model.backgroundColor,\n        borderColor: model.borderColor,\n        borderWidth: model.borderWidth\n      };\n      model.backgroundColor = valueOrDefault$4(options.hoverBackgroundColor, getHoverColor(options.backgroundColor));\n      model.borderColor = valueOrDefault$4(options.hoverBorderColor, getHoverColor(options.borderColor));\n      model.borderWidth = valueOrDefault$4(options.hoverBorderWidth, options.borderWidth);\n    },\n\n    /**\n     * @private\n     */\n    _resolveElementOptions: function _resolveElementOptions(arc, index) {\n      var me = this;\n      var chart = me.chart;\n      var dataset = me.getDataset();\n      var custom = arc.custom || {};\n      var options = chart.options.elements.arc;\n      var values = {};\n      var i, ilen, key; // Scriptable options\n\n      var context = {\n        chart: chart,\n        dataIndex: index,\n        dataset: dataset,\n        datasetIndex: me.index\n      };\n      var keys = ['backgroundColor', 'borderColor', 'borderWidth', 'borderAlign', 'hoverBackgroundColor', 'hoverBorderColor', 'hoverBorderWidth'];\n\n      for (i = 0, ilen = keys.length; i < ilen; ++i) {\n        key = keys[i];\n        values[key] = resolve$3([custom[key], dataset[key], options[key]], context, index);\n      }\n\n      return values;\n    },\n\n    /**\n     * Get radius length offset of the dataset in relation to the visible datasets weights. This allows determining the inner and outer radius correctly\n     * @private\n     */\n    _getRingWeightOffset: function _getRingWeightOffset(datasetIndex) {\n      var ringWeightOffset = 0;\n\n      for (var i = 0; i < datasetIndex; ++i) {\n        if (this.chart.isDatasetVisible(i)) {\n          ringWeightOffset += this._getRingWeight(i);\n        }\n      }\n\n      return ringWeightOffset;\n    },\n\n    /**\n     * @private\n     */\n    _getRingWeight: function _getRingWeight(dataSetIndex) {\n      return Math.max(valueOrDefault$4(this.chart.data.datasets[dataSetIndex].weight, 1), 0);\n    },\n\n    /**\n     * Returns the sum of all visibile data set weights.  This value can be 0.\n     * @private\n     */\n    _getVisibleDatasetWeightTotal: function _getVisibleDatasetWeightTotal() {\n      return this._getRingWeightOffset(this.chart.data.datasets.length);\n    }\n  });\n\n  core_defaults._set('horizontalBar', {\n    hover: {\n      mode: 'index',\n      axis: 'y'\n    },\n    scales: {\n      xAxes: [{\n        type: 'linear',\n        position: 'bottom'\n      }],\n      yAxes: [{\n        type: 'category',\n        position: 'left',\n        categoryPercentage: 0.8,\n        barPercentage: 0.9,\n        offset: true,\n        gridLines: {\n          offsetGridLines: true\n        }\n      }]\n    },\n    elements: {\n      rectangle: {\n        borderSkipped: 'left'\n      }\n    },\n    tooltips: {\n      mode: 'index',\n      axis: 'y'\n    }\n  });\n\n  var controller_horizontalBar = controller_bar.extend({\n    /**\n     * @private\n     */\n    _getValueScaleId: function _getValueScaleId() {\n      return this.getMeta().xAxisID;\n    },\n\n    /**\n     * @private\n     */\n    _getIndexScaleId: function _getIndexScaleId() {\n      return this.getMeta().yAxisID;\n    }\n  });\n  var valueOrDefault$5 = helpers$1.valueOrDefault;\n  var resolve$4 = helpers$1.options.resolve;\n  var isPointInArea = helpers$1.canvas._isPointInArea;\n\n  core_defaults._set('line', {\n    showLines: true,\n    spanGaps: false,\n    hover: {\n      mode: 'label'\n    },\n    scales: {\n      xAxes: [{\n        type: 'category',\n        id: 'x-axis-0'\n      }],\n      yAxes: [{\n        type: 'linear',\n        id: 'y-axis-0'\n      }]\n    }\n  });\n\n  function lineEnabled(dataset, options) {\n    return valueOrDefault$5(dataset.showLine, options.showLines);\n  }\n\n  var controller_line = core_datasetController.extend({\n    datasetElementType: elements.Line,\n    dataElementType: elements.Point,\n    update: function update(reset) {\n      var me = this;\n      var meta = me.getMeta();\n      var line = meta.dataset;\n      var points = meta.data || [];\n      var scale = me.getScaleForId(meta.yAxisID);\n      var dataset = me.getDataset();\n      var showLine = lineEnabled(dataset, me.chart.options);\n      var i, ilen; // Update Line\n\n      if (showLine) {\n        // Compatibility: If the properties are defined with only the old name, use those values\n        if (dataset.tension !== undefined && dataset.lineTension === undefined) {\n          dataset.lineTension = dataset.tension;\n        } // Utility\n\n\n        line._scale = scale;\n        line._datasetIndex = me.index; // Data\n\n        line._children = points; // Model\n\n        line._model = me._resolveLineOptions(line);\n        line.pivot();\n      } // Update Points\n\n\n      for (i = 0, ilen = points.length; i < ilen; ++i) {\n        me.updateElement(points[i], i, reset);\n      }\n\n      if (showLine && line._model.tension !== 0) {\n        me.updateBezierControlPoints();\n      } // Now pivot the point for animation\n\n\n      for (i = 0, ilen = points.length; i < ilen; ++i) {\n        points[i].pivot();\n      }\n    },\n    updateElement: function updateElement(point, index, reset) {\n      var me = this;\n      var meta = me.getMeta();\n      var custom = point.custom || {};\n      var dataset = me.getDataset();\n      var datasetIndex = me.index;\n      var value = dataset.data[index];\n      var yScale = me.getScaleForId(meta.yAxisID);\n      var xScale = me.getScaleForId(meta.xAxisID);\n      var lineModel = meta.dataset._model;\n      var x, y;\n\n      var options = me._resolvePointOptions(point, index);\n\n      x = xScale.getPixelForValue(typeof value === 'object' ? value : NaN, index, datasetIndex);\n      y = reset ? yScale.getBasePixel() : me.calculatePointY(value, index, datasetIndex); // Utility\n\n      point._xScale = xScale;\n      point._yScale = yScale;\n      point._options = options;\n      point._datasetIndex = datasetIndex;\n      point._index = index; // Desired view properties\n\n      point._model = {\n        x: x,\n        y: y,\n        skip: custom.skip || isNaN(x) || isNaN(y),\n        // Appearance\n        radius: options.radius,\n        pointStyle: options.pointStyle,\n        rotation: options.rotation,\n        backgroundColor: options.backgroundColor,\n        borderColor: options.borderColor,\n        borderWidth: options.borderWidth,\n        tension: valueOrDefault$5(custom.tension, lineModel ? lineModel.tension : 0),\n        steppedLine: lineModel ? lineModel.steppedLine : false,\n        // Tooltip\n        hitRadius: options.hitRadius\n      };\n    },\n\n    /**\n     * @private\n     */\n    _resolvePointOptions: function _resolvePointOptions(element, index) {\n      var me = this;\n      var chart = me.chart;\n      var dataset = chart.data.datasets[me.index];\n      var custom = element.custom || {};\n      var options = chart.options.elements.point;\n      var values = {};\n      var i, ilen, key; // Scriptable options\n\n      var context = {\n        chart: chart,\n        dataIndex: index,\n        dataset: dataset,\n        datasetIndex: me.index\n      };\n      var ELEMENT_OPTIONS = {\n        backgroundColor: 'pointBackgroundColor',\n        borderColor: 'pointBorderColor',\n        borderWidth: 'pointBorderWidth',\n        hitRadius: 'pointHitRadius',\n        hoverBackgroundColor: 'pointHoverBackgroundColor',\n        hoverBorderColor: 'pointHoverBorderColor',\n        hoverBorderWidth: 'pointHoverBorderWidth',\n        hoverRadius: 'pointHoverRadius',\n        pointStyle: 'pointStyle',\n        radius: 'pointRadius',\n        rotation: 'pointRotation'\n      };\n      var keys = Object.keys(ELEMENT_OPTIONS);\n\n      for (i = 0, ilen = keys.length; i < ilen; ++i) {\n        key = keys[i];\n        values[key] = resolve$4([custom[key], dataset[ELEMENT_OPTIONS[key]], dataset[key], options[key]], context, index);\n      }\n\n      return values;\n    },\n\n    /**\n     * @private\n     */\n    _resolveLineOptions: function _resolveLineOptions(element) {\n      var me = this;\n      var chart = me.chart;\n      var dataset = chart.data.datasets[me.index];\n      var custom = element.custom || {};\n      var options = chart.options;\n      var elementOptions = options.elements.line;\n      var values = {};\n      var i, ilen, key;\n      var keys = ['backgroundColor', 'borderWidth', 'borderColor', 'borderCapStyle', 'borderDash', 'borderDashOffset', 'borderJoinStyle', 'fill', 'cubicInterpolationMode'];\n\n      for (i = 0, ilen = keys.length; i < ilen; ++i) {\n        key = keys[i];\n        values[key] = resolve$4([custom[key], dataset[key], elementOptions[key]]);\n      } // The default behavior of lines is to break at null values, according\n      // to https://github.com/chartjs/Chart.js/issues/2435#issuecomment-216718158\n      // This option gives lines the ability to span gaps\n\n\n      values.spanGaps = valueOrDefault$5(dataset.spanGaps, options.spanGaps);\n      values.tension = valueOrDefault$5(dataset.lineTension, elementOptions.tension);\n      values.steppedLine = resolve$4([custom.steppedLine, dataset.steppedLine, elementOptions.stepped]);\n      return values;\n    },\n    calculatePointY: function calculatePointY(value, index, datasetIndex) {\n      var me = this;\n      var chart = me.chart;\n      var meta = me.getMeta();\n      var yScale = me.getScaleForId(meta.yAxisID);\n      var sumPos = 0;\n      var sumNeg = 0;\n      var i, ds, dsMeta;\n\n      if (yScale.options.stacked) {\n        for (i = 0; i < datasetIndex; i++) {\n          ds = chart.data.datasets[i];\n          dsMeta = chart.getDatasetMeta(i);\n\n          if (dsMeta.type === 'line' && dsMeta.yAxisID === yScale.id && chart.isDatasetVisible(i)) {\n            var stackedRightValue = Number(yScale.getRightValue(ds.data[index]));\n\n            if (stackedRightValue < 0) {\n              sumNeg += stackedRightValue || 0;\n            } else {\n              sumPos += stackedRightValue || 0;\n            }\n          }\n        }\n\n        var rightValue = Number(yScale.getRightValue(value));\n\n        if (rightValue < 0) {\n          return yScale.getPixelForValue(sumNeg + rightValue);\n        }\n\n        return yScale.getPixelForValue(sumPos + rightValue);\n      }\n\n      return yScale.getPixelForValue(value);\n    },\n    updateBezierControlPoints: function updateBezierControlPoints() {\n      var me = this;\n      var chart = me.chart;\n      var meta = me.getMeta();\n      var lineModel = meta.dataset._model;\n      var area = chart.chartArea;\n      var points = meta.data || [];\n      var i, ilen, model, controlPoints; // Only consider points that are drawn in case the spanGaps option is used\n\n      if (lineModel.spanGaps) {\n        points = points.filter(function (pt) {\n          return !pt._model.skip;\n        });\n      }\n\n      function capControlPoint(pt, min, max) {\n        return Math.max(Math.min(pt, max), min);\n      }\n\n      if (lineModel.cubicInterpolationMode === 'monotone') {\n        helpers$1.splineCurveMonotone(points);\n      } else {\n        for (i = 0, ilen = points.length; i < ilen; ++i) {\n          model = points[i]._model;\n          controlPoints = helpers$1.splineCurve(helpers$1.previousItem(points, i)._model, model, helpers$1.nextItem(points, i)._model, lineModel.tension);\n          model.controlPointPreviousX = controlPoints.previous.x;\n          model.controlPointPreviousY = controlPoints.previous.y;\n          model.controlPointNextX = controlPoints.next.x;\n          model.controlPointNextY = controlPoints.next.y;\n        }\n      }\n\n      if (chart.options.elements.line.capBezierPoints) {\n        for (i = 0, ilen = points.length; i < ilen; ++i) {\n          model = points[i]._model;\n\n          if (isPointInArea(model, area)) {\n            if (i > 0 && isPointInArea(points[i - 1]._model, area)) {\n              model.controlPointPreviousX = capControlPoint(model.controlPointPreviousX, area.left, area.right);\n              model.controlPointPreviousY = capControlPoint(model.controlPointPreviousY, area.top, area.bottom);\n            }\n\n            if (i < points.length - 1 && isPointInArea(points[i + 1]._model, area)) {\n              model.controlPointNextX = capControlPoint(model.controlPointNextX, area.left, area.right);\n              model.controlPointNextY = capControlPoint(model.controlPointNextY, area.top, area.bottom);\n            }\n          }\n        }\n      }\n    },\n    draw: function draw() {\n      var me = this;\n      var chart = me.chart;\n      var meta = me.getMeta();\n      var points = meta.data || [];\n      var area = chart.chartArea;\n      var ilen = points.length;\n      var halfBorderWidth;\n      var i = 0;\n\n      if (lineEnabled(me.getDataset(), chart.options)) {\n        halfBorderWidth = (meta.dataset._model.borderWidth || 0) / 2;\n        helpers$1.canvas.clipArea(chart.ctx, {\n          left: area.left,\n          right: area.right,\n          top: area.top - halfBorderWidth,\n          bottom: area.bottom + halfBorderWidth\n        });\n        meta.dataset.draw();\n        helpers$1.canvas.unclipArea(chart.ctx);\n      } // Draw the points\n\n\n      for (; i < ilen; ++i) {\n        points[i].draw(area);\n      }\n    },\n\n    /**\n     * @protected\n     */\n    setHoverStyle: function setHoverStyle(point) {\n      var model = point._model;\n      var options = point._options;\n      var getHoverColor = helpers$1.getHoverColor;\n      point.$previousStyle = {\n        backgroundColor: model.backgroundColor,\n        borderColor: model.borderColor,\n        borderWidth: model.borderWidth,\n        radius: model.radius\n      };\n      model.backgroundColor = valueOrDefault$5(options.hoverBackgroundColor, getHoverColor(options.backgroundColor));\n      model.borderColor = valueOrDefault$5(options.hoverBorderColor, getHoverColor(options.borderColor));\n      model.borderWidth = valueOrDefault$5(options.hoverBorderWidth, options.borderWidth);\n      model.radius = valueOrDefault$5(options.hoverRadius, options.radius);\n    }\n  });\n  var resolve$5 = helpers$1.options.resolve;\n\n  core_defaults._set('polarArea', {\n    scale: {\n      type: 'radialLinear',\n      angleLines: {\n        display: false\n      },\n      gridLines: {\n        circular: true\n      },\n      pointLabels: {\n        display: false\n      },\n      ticks: {\n        beginAtZero: true\n      }\n    },\n    // Boolean - Whether to animate the rotation of the chart\n    animation: {\n      animateRotate: true,\n      animateScale: true\n    },\n    startAngle: -0.5 * Math.PI,\n    legendCallback: function legendCallback(chart) {\n      var text = [];\n      text.push('<ul class=\"' + chart.id + '-legend\">');\n      var data = chart.data;\n      var datasets = data.datasets;\n      var labels = data.labels;\n\n      if (datasets.length) {\n        for (var i = 0; i < datasets[0].data.length; ++i) {\n          text.push('<li><span style=\"background-color:' + datasets[0].backgroundColor[i] + '\"></span>');\n\n          if (labels[i]) {\n            text.push(labels[i]);\n          }\n\n          text.push('</li>');\n        }\n      }\n\n      text.push('</ul>');\n      return text.join('');\n    },\n    legend: {\n      labels: {\n        generateLabels: function generateLabels(chart) {\n          var data = chart.data;\n\n          if (data.labels.length && data.datasets.length) {\n            return data.labels.map(function (label, i) {\n              var meta = chart.getDatasetMeta(0);\n              var ds = data.datasets[0];\n              var arc = meta.data[i];\n              var custom = arc.custom || {};\n              var arcOpts = chart.options.elements.arc;\n              var fill = resolve$5([custom.backgroundColor, ds.backgroundColor, arcOpts.backgroundColor], undefined, i);\n              var stroke = resolve$5([custom.borderColor, ds.borderColor, arcOpts.borderColor], undefined, i);\n              var bw = resolve$5([custom.borderWidth, ds.borderWidth, arcOpts.borderWidth], undefined, i);\n              return {\n                text: label,\n                fillStyle: fill,\n                strokeStyle: stroke,\n                lineWidth: bw,\n                hidden: isNaN(ds.data[i]) || meta.data[i].hidden,\n                // Extra data used for toggling the correct item\n                index: i\n              };\n            });\n          }\n\n          return [];\n        }\n      },\n      onClick: function onClick(e, legendItem) {\n        var index = legendItem.index;\n        var chart = this.chart;\n        var i, ilen, meta;\n\n        for (i = 0, ilen = (chart.data.datasets || []).length; i < ilen; ++i) {\n          meta = chart.getDatasetMeta(i);\n          meta.data[index].hidden = !meta.data[index].hidden;\n        }\n\n        chart.update();\n      }\n    },\n    // Need to override these to give a nice default\n    tooltips: {\n      callbacks: {\n        title: function title() {\n          return '';\n        },\n        label: function label(item, data) {\n          return data.labels[item.index] + ': ' + item.yLabel;\n        }\n      }\n    }\n  });\n\n  var controller_polarArea = core_datasetController.extend({\n    dataElementType: elements.Arc,\n    linkScales: helpers$1.noop,\n    update: function update(reset) {\n      var me = this;\n      var dataset = me.getDataset();\n      var meta = me.getMeta();\n      var start = me.chart.options.startAngle || 0;\n      var starts = me._starts = [];\n      var angles = me._angles = [];\n      var arcs = meta.data;\n      var i, ilen, angle;\n\n      me._updateRadius();\n\n      meta.count = me.countVisibleElements();\n\n      for (i = 0, ilen = dataset.data.length; i < ilen; i++) {\n        starts[i] = start;\n        angle = me._computeAngle(i);\n        angles[i] = angle;\n        start += angle;\n      }\n\n      for (i = 0, ilen = arcs.length; i < ilen; ++i) {\n        arcs[i]._options = me._resolveElementOptions(arcs[i], i);\n        me.updateElement(arcs[i], i, reset);\n      }\n    },\n\n    /**\n     * @private\n     */\n    _updateRadius: function _updateRadius() {\n      var me = this;\n      var chart = me.chart;\n      var chartArea = chart.chartArea;\n      var opts = chart.options;\n      var minSize = Math.min(chartArea.right - chartArea.left, chartArea.bottom - chartArea.top);\n      chart.outerRadius = Math.max(minSize / 2, 0);\n      chart.innerRadius = Math.max(opts.cutoutPercentage ? chart.outerRadius / 100 * opts.cutoutPercentage : 1, 0);\n      chart.radiusLength = (chart.outerRadius - chart.innerRadius) / chart.getVisibleDatasetCount();\n      me.outerRadius = chart.outerRadius - chart.radiusLength * me.index;\n      me.innerRadius = me.outerRadius - chart.radiusLength;\n    },\n    updateElement: function updateElement(arc, index, reset) {\n      var me = this;\n      var chart = me.chart;\n      var dataset = me.getDataset();\n      var opts = chart.options;\n      var animationOpts = opts.animation;\n      var scale = chart.scale;\n      var labels = chart.data.labels;\n      var centerX = scale.xCenter;\n      var centerY = scale.yCenter; // var negHalfPI = -0.5 * Math.PI;\n\n      var datasetStartAngle = opts.startAngle;\n      var distance = arc.hidden ? 0 : scale.getDistanceFromCenterForValue(dataset.data[index]);\n      var startAngle = me._starts[index];\n      var endAngle = startAngle + (arc.hidden ? 0 : me._angles[index]);\n      var resetRadius = animationOpts.animateScale ? 0 : scale.getDistanceFromCenterForValue(dataset.data[index]);\n      var options = arc._options || {};\n      helpers$1.extend(arc, {\n        // Utility\n        _datasetIndex: me.index,\n        _index: index,\n        _scale: scale,\n        // Desired view properties\n        _model: {\n          backgroundColor: options.backgroundColor,\n          borderColor: options.borderColor,\n          borderWidth: options.borderWidth,\n          borderAlign: options.borderAlign,\n          x: centerX,\n          y: centerY,\n          innerRadius: 0,\n          outerRadius: reset ? resetRadius : distance,\n          startAngle: reset && animationOpts.animateRotate ? datasetStartAngle : startAngle,\n          endAngle: reset && animationOpts.animateRotate ? datasetStartAngle : endAngle,\n          label: helpers$1.valueAtIndexOrDefault(labels, index, labels[index])\n        }\n      });\n      arc.pivot();\n    },\n    countVisibleElements: function countVisibleElements() {\n      var dataset = this.getDataset();\n      var meta = this.getMeta();\n      var count = 0;\n      helpers$1.each(meta.data, function (element, index) {\n        if (!isNaN(dataset.data[index]) && !element.hidden) {\n          count++;\n        }\n      });\n      return count;\n    },\n\n    /**\n     * @protected\n     */\n    setHoverStyle: function setHoverStyle(arc) {\n      var model = arc._model;\n      var options = arc._options;\n      var getHoverColor = helpers$1.getHoverColor;\n      var valueOrDefault = helpers$1.valueOrDefault;\n      arc.$previousStyle = {\n        backgroundColor: model.backgroundColor,\n        borderColor: model.borderColor,\n        borderWidth: model.borderWidth\n      };\n      model.backgroundColor = valueOrDefault(options.hoverBackgroundColor, getHoverColor(options.backgroundColor));\n      model.borderColor = valueOrDefault(options.hoverBorderColor, getHoverColor(options.borderColor));\n      model.borderWidth = valueOrDefault(options.hoverBorderWidth, options.borderWidth);\n    },\n\n    /**\n     * @private\n     */\n    _resolveElementOptions: function _resolveElementOptions(arc, index) {\n      var me = this;\n      var chart = me.chart;\n      var dataset = me.getDataset();\n      var custom = arc.custom || {};\n      var options = chart.options.elements.arc;\n      var values = {};\n      var i, ilen, key; // Scriptable options\n\n      var context = {\n        chart: chart,\n        dataIndex: index,\n        dataset: dataset,\n        datasetIndex: me.index\n      };\n      var keys = ['backgroundColor', 'borderColor', 'borderWidth', 'borderAlign', 'hoverBackgroundColor', 'hoverBorderColor', 'hoverBorderWidth'];\n\n      for (i = 0, ilen = keys.length; i < ilen; ++i) {\n        key = keys[i];\n        values[key] = resolve$5([custom[key], dataset[key], options[key]], context, index);\n      }\n\n      return values;\n    },\n\n    /**\n     * @private\n     */\n    _computeAngle: function _computeAngle(index) {\n      var me = this;\n      var count = this.getMeta().count;\n      var dataset = me.getDataset();\n      var meta = me.getMeta();\n\n      if (isNaN(dataset.data[index]) || meta.data[index].hidden) {\n        return 0;\n      } // Scriptable options\n\n\n      var context = {\n        chart: me.chart,\n        dataIndex: index,\n        dataset: dataset,\n        datasetIndex: me.index\n      };\n      return resolve$5([me.chart.options.elements.arc.angle, 2 * Math.PI / count], context, index);\n    }\n  });\n\n  core_defaults._set('pie', helpers$1.clone(core_defaults.doughnut));\n\n  core_defaults._set('pie', {\n    cutoutPercentage: 0\n  }); // Pie charts are Doughnut chart with different defaults\n\n\n  var controller_pie = controller_doughnut;\n  var valueOrDefault$6 = helpers$1.valueOrDefault;\n  var resolve$6 = helpers$1.options.resolve;\n\n  core_defaults._set('radar', {\n    scale: {\n      type: 'radialLinear'\n    },\n    elements: {\n      line: {\n        tension: 0 // no bezier in radar\n\n      }\n    }\n  });\n\n  var controller_radar = core_datasetController.extend({\n    datasetElementType: elements.Line,\n    dataElementType: elements.Point,\n    linkScales: helpers$1.noop,\n    update: function update(reset) {\n      var me = this;\n      var meta = me.getMeta();\n      var line = meta.dataset;\n      var points = meta.data || [];\n      var scale = me.chart.scale;\n      var dataset = me.getDataset();\n      var i, ilen; // Compatibility: If the properties are defined with only the old name, use those values\n\n      if (dataset.tension !== undefined && dataset.lineTension === undefined) {\n        dataset.lineTension = dataset.tension;\n      } // Utility\n\n\n      line._scale = scale;\n      line._datasetIndex = me.index; // Data\n\n      line._children = points;\n      line._loop = true; // Model\n\n      line._model = me._resolveLineOptions(line);\n      line.pivot(); // Update Points\n\n      for (i = 0, ilen = points.length; i < ilen; ++i) {\n        me.updateElement(points[i], i, reset);\n      } // Update bezier control points\n\n\n      me.updateBezierControlPoints(); // Now pivot the point for animation\n\n      for (i = 0, ilen = points.length; i < ilen; ++i) {\n        points[i].pivot();\n      }\n    },\n    updateElement: function updateElement(point, index, reset) {\n      var me = this;\n      var custom = point.custom || {};\n      var dataset = me.getDataset();\n      var scale = me.chart.scale;\n      var pointPosition = scale.getPointPositionForValue(index, dataset.data[index]);\n\n      var options = me._resolvePointOptions(point, index);\n\n      var lineModel = me.getMeta().dataset._model;\n\n      var x = reset ? scale.xCenter : pointPosition.x;\n      var y = reset ? scale.yCenter : pointPosition.y; // Utility\n\n      point._scale = scale;\n      point._options = options;\n      point._datasetIndex = me.index;\n      point._index = index; // Desired view properties\n\n      point._model = {\n        x: x,\n        // value not used in dataset scale, but we want a consistent API between scales\n        y: y,\n        skip: custom.skip || isNaN(x) || isNaN(y),\n        // Appearance\n        radius: options.radius,\n        pointStyle: options.pointStyle,\n        rotation: options.rotation,\n        backgroundColor: options.backgroundColor,\n        borderColor: options.borderColor,\n        borderWidth: options.borderWidth,\n        tension: valueOrDefault$6(custom.tension, lineModel ? lineModel.tension : 0),\n        // Tooltip\n        hitRadius: options.hitRadius\n      };\n    },\n\n    /**\n     * @private\n     */\n    _resolvePointOptions: function _resolvePointOptions(element, index) {\n      var me = this;\n      var chart = me.chart;\n      var dataset = chart.data.datasets[me.index];\n      var custom = element.custom || {};\n      var options = chart.options.elements.point;\n      var values = {};\n      var i, ilen, key; // Scriptable options\n\n      var context = {\n        chart: chart,\n        dataIndex: index,\n        dataset: dataset,\n        datasetIndex: me.index\n      };\n      var ELEMENT_OPTIONS = {\n        backgroundColor: 'pointBackgroundColor',\n        borderColor: 'pointBorderColor',\n        borderWidth: 'pointBorderWidth',\n        hitRadius: 'pointHitRadius',\n        hoverBackgroundColor: 'pointHoverBackgroundColor',\n        hoverBorderColor: 'pointHoverBorderColor',\n        hoverBorderWidth: 'pointHoverBorderWidth',\n        hoverRadius: 'pointHoverRadius',\n        pointStyle: 'pointStyle',\n        radius: 'pointRadius',\n        rotation: 'pointRotation'\n      };\n      var keys = Object.keys(ELEMENT_OPTIONS);\n\n      for (i = 0, ilen = keys.length; i < ilen; ++i) {\n        key = keys[i];\n        values[key] = resolve$6([custom[key], dataset[ELEMENT_OPTIONS[key]], dataset[key], options[key]], context, index);\n      }\n\n      return values;\n    },\n\n    /**\n     * @private\n     */\n    _resolveLineOptions: function _resolveLineOptions(element) {\n      var me = this;\n      var chart = me.chart;\n      var dataset = chart.data.datasets[me.index];\n      var custom = element.custom || {};\n      var options = chart.options.elements.line;\n      var values = {};\n      var i, ilen, key;\n      var keys = ['backgroundColor', 'borderWidth', 'borderColor', 'borderCapStyle', 'borderDash', 'borderDashOffset', 'borderJoinStyle', 'fill'];\n\n      for (i = 0, ilen = keys.length; i < ilen; ++i) {\n        key = keys[i];\n        values[key] = resolve$6([custom[key], dataset[key], options[key]]);\n      }\n\n      values.tension = valueOrDefault$6(dataset.lineTension, options.tension);\n      return values;\n    },\n    updateBezierControlPoints: function updateBezierControlPoints() {\n      var me = this;\n      var meta = me.getMeta();\n      var area = me.chart.chartArea;\n      var points = meta.data || [];\n      var i, ilen, model, controlPoints;\n\n      function capControlPoint(pt, min, max) {\n        return Math.max(Math.min(pt, max), min);\n      }\n\n      for (i = 0, ilen = points.length; i < ilen; ++i) {\n        model = points[i]._model;\n        controlPoints = helpers$1.splineCurve(helpers$1.previousItem(points, i, true)._model, model, helpers$1.nextItem(points, i, true)._model, model.tension); // Prevent the bezier going outside of the bounds of the graph\n\n        model.controlPointPreviousX = capControlPoint(controlPoints.previous.x, area.left, area.right);\n        model.controlPointPreviousY = capControlPoint(controlPoints.previous.y, area.top, area.bottom);\n        model.controlPointNextX = capControlPoint(controlPoints.next.x, area.left, area.right);\n        model.controlPointNextY = capControlPoint(controlPoints.next.y, area.top, area.bottom);\n      }\n    },\n    setHoverStyle: function setHoverStyle(point) {\n      var model = point._model;\n      var options = point._options;\n      var getHoverColor = helpers$1.getHoverColor;\n      point.$previousStyle = {\n        backgroundColor: model.backgroundColor,\n        borderColor: model.borderColor,\n        borderWidth: model.borderWidth,\n        radius: model.radius\n      };\n      model.backgroundColor = valueOrDefault$6(options.hoverBackgroundColor, getHoverColor(options.backgroundColor));\n      model.borderColor = valueOrDefault$6(options.hoverBorderColor, getHoverColor(options.borderColor));\n      model.borderWidth = valueOrDefault$6(options.hoverBorderWidth, options.borderWidth);\n      model.radius = valueOrDefault$6(options.hoverRadius, options.radius);\n    }\n  });\n\n  core_defaults._set('scatter', {\n    hover: {\n      mode: 'single'\n    },\n    scales: {\n      xAxes: [{\n        id: 'x-axis-1',\n        // need an ID so datasets can reference the scale\n        type: 'linear',\n        // scatter should not use a category axis\n        position: 'bottom'\n      }],\n      yAxes: [{\n        id: 'y-axis-1',\n        type: 'linear',\n        position: 'left'\n      }]\n    },\n    showLines: false,\n    tooltips: {\n      callbacks: {\n        title: function title() {\n          return ''; // doesn't make sense for scatter since data are formatted as a point\n        },\n        label: function label(item) {\n          return '(' + item.xLabel + ', ' + item.yLabel + ')';\n        }\n      }\n    }\n  }); // Scatter charts use line controllers\n\n\n  var controller_scatter = controller_line; // NOTE export a map in which the key represents the controller type, not\n  // the class, and so must be CamelCase in order to be correctly retrieved\n  // by the controller in core.controller.js (`controllers[meta.type]`).\n\n  var controllers = {\n    bar: controller_bar,\n    bubble: controller_bubble,\n    doughnut: controller_doughnut,\n    horizontalBar: controller_horizontalBar,\n    line: controller_line,\n    polarArea: controller_polarArea,\n    pie: controller_pie,\n    radar: controller_radar,\n    scatter: controller_scatter\n  };\n  /**\n   * Helper function to get relative position for an event\n   * @param {Event|IEvent} event - The event to get the position for\n   * @param {Chart} chart - The chart\n   * @returns {object} the event position\n   */\n\n  function getRelativePosition(e, chart) {\n    if (e.native) {\n      return {\n        x: e.x,\n        y: e.y\n      };\n    }\n\n    return helpers$1.getRelativePosition(e, chart);\n  }\n  /**\n   * Helper function to traverse all of the visible elements in the chart\n   * @param {Chart} chart - the chart\n   * @param {function} handler - the callback to execute for each visible item\n   */\n\n\n  function parseVisibleItems(chart, handler) {\n    var datasets = chart.data.datasets;\n    var meta, i, j, ilen, jlen;\n\n    for (i = 0, ilen = datasets.length; i < ilen; ++i) {\n      if (!chart.isDatasetVisible(i)) {\n        continue;\n      }\n\n      meta = chart.getDatasetMeta(i);\n\n      for (j = 0, jlen = meta.data.length; j < jlen; ++j) {\n        var element = meta.data[j];\n\n        if (!element._view.skip) {\n          handler(element);\n        }\n      }\n    }\n  }\n  /**\n   * Helper function to get the items that intersect the event position\n   * @param {ChartElement[]} items - elements to filter\n   * @param {object} position - the point to be nearest to\n   * @return {ChartElement[]} the nearest items\n   */\n\n\n  function getIntersectItems(chart, position) {\n    var elements = [];\n    parseVisibleItems(chart, function (element) {\n      if (element.inRange(position.x, position.y)) {\n        elements.push(element);\n      }\n    });\n    return elements;\n  }\n  /**\n   * Helper function to get the items nearest to the event position considering all visible items in teh chart\n   * @param {Chart} chart - the chart to look at elements from\n   * @param {object} position - the point to be nearest to\n   * @param {boolean} intersect - if true, only consider items that intersect the position\n   * @param {function} distanceMetric - function to provide the distance between points\n   * @return {ChartElement[]} the nearest items\n   */\n\n\n  function getNearestItems(chart, position, intersect, distanceMetric) {\n    var minDistance = Number.POSITIVE_INFINITY;\n    var nearestItems = [];\n    parseVisibleItems(chart, function (element) {\n      if (intersect && !element.inRange(position.x, position.y)) {\n        return;\n      }\n\n      var center = element.getCenterPoint();\n      var distance = distanceMetric(position, center);\n\n      if (distance < minDistance) {\n        nearestItems = [element];\n        minDistance = distance;\n      } else if (distance === minDistance) {\n        // Can have multiple items at the same distance in which case we sort by size\n        nearestItems.push(element);\n      }\n    });\n    return nearestItems;\n  }\n  /**\n   * Get a distance metric function for two points based on the\n   * axis mode setting\n   * @param {string} axis - the axis mode. x|y|xy\n   */\n\n\n  function getDistanceMetricForAxis(axis) {\n    var useX = axis.indexOf('x') !== -1;\n    var useY = axis.indexOf('y') !== -1;\n    return function (pt1, pt2) {\n      var deltaX = useX ? Math.abs(pt1.x - pt2.x) : 0;\n      var deltaY = useY ? Math.abs(pt1.y - pt2.y) : 0;\n      return Math.sqrt(Math.pow(deltaX, 2) + Math.pow(deltaY, 2));\n    };\n  }\n\n  function indexMode(chart, e, options) {\n    var position = getRelativePosition(e, chart); // Default axis for index mode is 'x' to match old behaviour\n\n    options.axis = options.axis || 'x';\n    var distanceMetric = getDistanceMetricForAxis(options.axis);\n    var items = options.intersect ? getIntersectItems(chart, position) : getNearestItems(chart, position, false, distanceMetric);\n    var elements = [];\n\n    if (!items.length) {\n      return [];\n    }\n\n    chart.data.datasets.forEach(function (dataset, datasetIndex) {\n      if (chart.isDatasetVisible(datasetIndex)) {\n        var meta = chart.getDatasetMeta(datasetIndex);\n        var element = meta.data[items[0]._index]; // don't count items that are skipped (null data)\n\n        if (element && !element._view.skip) {\n          elements.push(element);\n        }\n      }\n    });\n    return elements;\n  }\n  /**\n   * @interface IInteractionOptions\n   */\n\n  /**\n   * If true, only consider items that intersect the point\n   * @name IInterfaceOptions#boolean\n   * @type Boolean\n   */\n\n  /**\n   * Contains interaction related functions\n   * @namespace Chart.Interaction\n   */\n\n\n  var core_interaction = {\n    // Helper function for different modes\n    modes: {\n      single: function single(chart, e) {\n        var position = getRelativePosition(e, chart);\n        var elements = [];\n        parseVisibleItems(chart, function (element) {\n          if (element.inRange(position.x, position.y)) {\n            elements.push(element);\n            return elements;\n          }\n        });\n        return elements.slice(0, 1);\n      },\n\n      /**\n       * @function Chart.Interaction.modes.label\n       * @deprecated since version 2.4.0\n       * @todo remove at version 3\n       * @private\n       */\n      label: indexMode,\n\n      /**\n       * Returns items at the same index. If the options.intersect parameter is true, we only return items if we intersect something\n       * If the options.intersect mode is false, we find the nearest item and return the items at the same index as that item\n       * @function Chart.Interaction.modes.index\n       * @since v2.4.0\n       * @param {Chart} chart - the chart we are returning items from\n       * @param {Event} e - the event we are find things at\n       * @param {IInteractionOptions} options - options to use during interaction\n       * @return {Chart.Element[]} Array of elements that are under the point. If none are found, an empty array is returned\n       */\n      index: indexMode,\n\n      /**\n       * Returns items in the same dataset. If the options.intersect parameter is true, we only return items if we intersect something\n       * If the options.intersect is false, we find the nearest item and return the items in that dataset\n       * @function Chart.Interaction.modes.dataset\n       * @param {Chart} chart - the chart we are returning items from\n       * @param {Event} e - the event we are find things at\n       * @param {IInteractionOptions} options - options to use during interaction\n       * @return {Chart.Element[]} Array of elements that are under the point. If none are found, an empty array is returned\n       */\n      dataset: function dataset(chart, e, options) {\n        var position = getRelativePosition(e, chart);\n        options.axis = options.axis || 'xy';\n        var distanceMetric = getDistanceMetricForAxis(options.axis);\n        var items = options.intersect ? getIntersectItems(chart, position) : getNearestItems(chart, position, false, distanceMetric);\n\n        if (items.length > 0) {\n          items = chart.getDatasetMeta(items[0]._datasetIndex).data;\n        }\n\n        return items;\n      },\n\n      /**\n       * @function Chart.Interaction.modes.x-axis\n       * @deprecated since version 2.4.0. Use index mode and intersect == true\n       * @todo remove at version 3\n       * @private\n       */\n      'x-axis': function xAxis(chart, e) {\n        return indexMode(chart, e, {\n          intersect: false\n        });\n      },\n\n      /**\n       * Point mode returns all elements that hit test based on the event position\n       * of the event\n       * @function Chart.Interaction.modes.intersect\n       * @param {Chart} chart - the chart we are returning items from\n       * @param {Event} e - the event we are find things at\n       * @return {Chart.Element[]} Array of elements that are under the point. If none are found, an empty array is returned\n       */\n      point: function point(chart, e) {\n        var position = getRelativePosition(e, chart);\n        return getIntersectItems(chart, position);\n      },\n\n      /**\n       * nearest mode returns the element closest to the point\n       * @function Chart.Interaction.modes.intersect\n       * @param {Chart} chart - the chart we are returning items from\n       * @param {Event} e - the event we are find things at\n       * @param {IInteractionOptions} options - options to use\n       * @return {Chart.Element[]} Array of elements that are under the point. If none are found, an empty array is returned\n       */\n      nearest: function nearest(chart, e, options) {\n        var position = getRelativePosition(e, chart);\n        options.axis = options.axis || 'xy';\n        var distanceMetric = getDistanceMetricForAxis(options.axis);\n        return getNearestItems(chart, position, options.intersect, distanceMetric);\n      },\n\n      /**\n       * x mode returns the elements that hit-test at the current x coordinate\n       * @function Chart.Interaction.modes.x\n       * @param {Chart} chart - the chart we are returning items from\n       * @param {Event} e - the event we are find things at\n       * @param {IInteractionOptions} options - options to use\n       * @return {Chart.Element[]} Array of elements that are under the point. If none are found, an empty array is returned\n       */\n      x: function x(chart, e, options) {\n        var position = getRelativePosition(e, chart);\n        var items = [];\n        var intersectsItem = false;\n        parseVisibleItems(chart, function (element) {\n          if (element.inXRange(position.x)) {\n            items.push(element);\n          }\n\n          if (element.inRange(position.x, position.y)) {\n            intersectsItem = true;\n          }\n        }); // If we want to trigger on an intersect and we don't have any items\n        // that intersect the position, return nothing\n\n        if (options.intersect && !intersectsItem) {\n          items = [];\n        }\n\n        return items;\n      },\n\n      /**\n       * y mode returns the elements that hit-test at the current y coordinate\n       * @function Chart.Interaction.modes.y\n       * @param {Chart} chart - the chart we are returning items from\n       * @param {Event} e - the event we are find things at\n       * @param {IInteractionOptions} options - options to use\n       * @return {Chart.Element[]} Array of elements that are under the point. If none are found, an empty array is returned\n       */\n      y: function y(chart, e, options) {\n        var position = getRelativePosition(e, chart);\n        var items = [];\n        var intersectsItem = false;\n        parseVisibleItems(chart, function (element) {\n          if (element.inYRange(position.y)) {\n            items.push(element);\n          }\n\n          if (element.inRange(position.x, position.y)) {\n            intersectsItem = true;\n          }\n        }); // If we want to trigger on an intersect and we don't have any items\n        // that intersect the position, return nothing\n\n        if (options.intersect && !intersectsItem) {\n          items = [];\n        }\n\n        return items;\n      }\n    }\n  };\n\n  function filterByPosition(array, position) {\n    return helpers$1.where(array, function (v) {\n      return v.position === position;\n    });\n  }\n\n  function sortByWeight(array, reverse) {\n    array.forEach(function (v, i) {\n      v._tmpIndex_ = i;\n      return v;\n    });\n    array.sort(function (a, b) {\n      var v0 = reverse ? b : a;\n      var v1 = reverse ? a : b;\n      return v0.weight === v1.weight ? v0._tmpIndex_ - v1._tmpIndex_ : v0.weight - v1.weight;\n    });\n    array.forEach(function (v) {\n      delete v._tmpIndex_;\n    });\n  }\n\n  function findMaxPadding(boxes) {\n    var top = 0;\n    var left = 0;\n    var bottom = 0;\n    var right = 0;\n    helpers$1.each(boxes, function (box) {\n      if (box.getPadding) {\n        var boxPadding = box.getPadding();\n        top = Math.max(top, boxPadding.top);\n        left = Math.max(left, boxPadding.left);\n        bottom = Math.max(bottom, boxPadding.bottom);\n        right = Math.max(right, boxPadding.right);\n      }\n    });\n    return {\n      top: top,\n      left: left,\n      bottom: bottom,\n      right: right\n    };\n  }\n\n  function addSizeByPosition(boxes, size) {\n    helpers$1.each(boxes, function (box) {\n      size[box.position] += box.isHorizontal() ? box.height : box.width;\n    });\n  }\n\n  core_defaults._set('global', {\n    layout: {\n      padding: {\n        top: 0,\n        right: 0,\n        bottom: 0,\n        left: 0\n      }\n    }\n  });\n  /**\n   * @interface ILayoutItem\n   * @prop {string} position - The position of the item in the chart layout. Possible values are\n   * 'left', 'top', 'right', 'bottom', and 'chartArea'\n   * @prop {number} weight - The weight used to sort the item. Higher weights are further away from the chart area\n   * @prop {boolean} fullWidth - if true, and the item is horizontal, then push vertical boxes down\n   * @prop {function} isHorizontal - returns true if the layout item is horizontal (ie. top or bottom)\n   * @prop {function} update - Takes two parameters: width and height. Returns size of item\n   * @prop {function} getPadding -  Returns an object with padding on the edges\n   * @prop {number} width - Width of item. Must be valid after update()\n   * @prop {number} height - Height of item. Must be valid after update()\n   * @prop {number} left - Left edge of the item. Set by layout system and cannot be used in update\n   * @prop {number} top - Top edge of the item. Set by layout system and cannot be used in update\n   * @prop {number} right - Right edge of the item. Set by layout system and cannot be used in update\n   * @prop {number} bottom - Bottom edge of the item. Set by layout system and cannot be used in update\n   */\n  // The layout service is very self explanatory.  It's responsible for the layout within a chart.\n  // Scales, Legends and Plugins all rely on the layout service and can easily register to be placed anywhere they need\n  // It is this service's responsibility of carrying out that layout.\n\n\n  var core_layouts = {\n    defaults: {},\n\n    /**\n     * Register a box to a chart.\n     * A box is simply a reference to an object that requires layout. eg. Scales, Legend, Title.\n     * @param {Chart} chart - the chart to use\n     * @param {ILayoutItem} item - the item to add to be layed out\n     */\n    addBox: function addBox(chart, item) {\n      if (!chart.boxes) {\n        chart.boxes = [];\n      } // initialize item with default values\n\n\n      item.fullWidth = item.fullWidth || false;\n      item.position = item.position || 'top';\n      item.weight = item.weight || 0;\n      chart.boxes.push(item);\n    },\n\n    /**\n     * Remove a layoutItem from a chart\n     * @param {Chart} chart - the chart to remove the box from\n     * @param {ILayoutItem} layoutItem - the item to remove from the layout\n     */\n    removeBox: function removeBox(chart, layoutItem) {\n      var index = chart.boxes ? chart.boxes.indexOf(layoutItem) : -1;\n\n      if (index !== -1) {\n        chart.boxes.splice(index, 1);\n      }\n    },\n\n    /**\n     * Sets (or updates) options on the given `item`.\n     * @param {Chart} chart - the chart in which the item lives (or will be added to)\n     * @param {ILayoutItem} item - the item to configure with the given options\n     * @param {object} options - the new item options.\n     */\n    configure: function configure(chart, item, options) {\n      var props = ['fullWidth', 'position', 'weight'];\n      var ilen = props.length;\n      var i = 0;\n      var prop;\n\n      for (; i < ilen; ++i) {\n        prop = props[i];\n\n        if (options.hasOwnProperty(prop)) {\n          item[prop] = options[prop];\n        }\n      }\n    },\n\n    /**\n     * Fits boxes of the given chart into the given size by having each box measure itself\n     * then running a fitting algorithm\n     * @param {Chart} chart - the chart\n     * @param {number} width - the width to fit into\n     * @param {number} height - the height to fit into\n     */\n    update: function update(chart, width, height) {\n      if (!chart) {\n        return;\n      }\n\n      var layoutOptions = chart.options.layout || {};\n      var padding = helpers$1.options.toPadding(layoutOptions.padding);\n      var leftPadding = padding.left;\n      var rightPadding = padding.right;\n      var topPadding = padding.top;\n      var bottomPadding = padding.bottom;\n      var leftBoxes = filterByPosition(chart.boxes, 'left');\n      var rightBoxes = filterByPosition(chart.boxes, 'right');\n      var topBoxes = filterByPosition(chart.boxes, 'top');\n      var bottomBoxes = filterByPosition(chart.boxes, 'bottom');\n      var chartAreaBoxes = filterByPosition(chart.boxes, 'chartArea'); // Sort boxes by weight. A higher weight is further away from the chart area\n\n      sortByWeight(leftBoxes, true);\n      sortByWeight(rightBoxes, false);\n      sortByWeight(topBoxes, true);\n      sortByWeight(bottomBoxes, false);\n      var verticalBoxes = leftBoxes.concat(rightBoxes);\n      var horizontalBoxes = topBoxes.concat(bottomBoxes);\n      var outerBoxes = verticalBoxes.concat(horizontalBoxes); // Essentially we now have any number of boxes on each of the 4 sides.\n      // Our canvas looks like the following.\n      // The areas L1 and L2 are the left axes. R1 is the right axis, T1 is the top axis and\n      // B1 is the bottom axis\n      // There are also 4 quadrant-like locations (left to right instead of clockwise) reserved for chart overlays\n      // These locations are single-box locations only, when trying to register a chartArea location that is already taken,\n      // an error will be thrown.\n      //\n      // |----------------------------------------------------|\n      // |                  T1 (Full Width)                   |\n      // |----------------------------------------------------|\n      // |    |    |                 T2                  |    |\n      // |    |----|-------------------------------------|----|\n      // |    |    | C1 |                           | C2 |    |\n      // |    |    |----|                           |----|    |\n      // |    |    |                                     |    |\n      // | L1 | L2 |           ChartArea (C0)            | R1 |\n      // |    |    |                                     |    |\n      // |    |    |----|                           |----|    |\n      // |    |    | C3 |                           | C4 |    |\n      // |    |----|-------------------------------------|----|\n      // |    |    |                 B1                  |    |\n      // |----------------------------------------------------|\n      // |                  B2 (Full Width)                   |\n      // |----------------------------------------------------|\n      //\n      // What we do to find the best sizing, we do the following\n      // 1. Determine the minimum size of the chart area.\n      // 2. Split the remaining width equally between each vertical axis\n      // 3. Split the remaining height equally between each horizontal axis\n      // 4. Give each layout the maximum size it can be. The layout will return it's minimum size\n      // 5. Adjust the sizes of each axis based on it's minimum reported size.\n      // 6. Refit each axis\n      // 7. Position each axis in the final location\n      // 8. Tell the chart the final location of the chart area\n      // 9. Tell any axes that overlay the chart area the positions of the chart area\n      // Step 1\n\n      var chartWidth = width - leftPadding - rightPadding;\n      var chartHeight = height - topPadding - bottomPadding;\n      var chartAreaWidth = chartWidth / 2; // min 50%\n      // Step 2\n\n      var verticalBoxWidth = (width - chartAreaWidth) / verticalBoxes.length; // Step 3\n      // TODO re-limit horizontal axis height (this limit has affected only padding calculation since PR 1837)\n      // var horizontalBoxHeight = (height - chartAreaHeight) / horizontalBoxes.length;\n      // Step 4\n\n      var maxChartAreaWidth = chartWidth;\n      var maxChartAreaHeight = chartHeight;\n      var outerBoxSizes = {\n        top: topPadding,\n        left: leftPadding,\n        bottom: bottomPadding,\n        right: rightPadding\n      };\n      var minBoxSizes = [];\n      var maxPadding;\n\n      function getMinimumBoxSize(box) {\n        var minSize;\n        var isHorizontal = box.isHorizontal();\n\n        if (isHorizontal) {\n          minSize = box.update(box.fullWidth ? chartWidth : maxChartAreaWidth, chartHeight / 2);\n          maxChartAreaHeight -= minSize.height;\n        } else {\n          minSize = box.update(verticalBoxWidth, maxChartAreaHeight);\n          maxChartAreaWidth -= minSize.width;\n        }\n\n        minBoxSizes.push({\n          horizontal: isHorizontal,\n          width: minSize.width,\n          box: box\n        });\n      }\n\n      helpers$1.each(outerBoxes, getMinimumBoxSize); // If a horizontal box has padding, we move the left boxes over to avoid ugly charts (see issue #2478)\n\n      maxPadding = findMaxPadding(outerBoxes); // At this point, maxChartAreaHeight and maxChartAreaWidth are the size the chart area could\n      // be if the axes are drawn at their minimum sizes.\n      // Steps 5 & 6\n      // Function to fit a box\n\n      function fitBox(box) {\n        var minBoxSize = helpers$1.findNextWhere(minBoxSizes, function (minBox) {\n          return minBox.box === box;\n        });\n\n        if (minBoxSize) {\n          if (minBoxSize.horizontal) {\n            var scaleMargin = {\n              left: Math.max(outerBoxSizes.left, maxPadding.left),\n              right: Math.max(outerBoxSizes.right, maxPadding.right),\n              top: 0,\n              bottom: 0\n            }; // Don't use min size here because of label rotation. When the labels are rotated, their rotation highly depends\n            // on the margin. Sometimes they need to increase in size slightly\n\n            box.update(box.fullWidth ? chartWidth : maxChartAreaWidth, chartHeight / 2, scaleMargin);\n          } else {\n            box.update(minBoxSize.width, maxChartAreaHeight);\n          }\n        }\n      } // Update, and calculate the left and right margins for the horizontal boxes\n\n\n      helpers$1.each(verticalBoxes, fitBox);\n      addSizeByPosition(verticalBoxes, outerBoxSizes); // Set the Left and Right margins for the horizontal boxes\n\n      helpers$1.each(horizontalBoxes, fitBox);\n      addSizeByPosition(horizontalBoxes, outerBoxSizes);\n\n      function finalFitVerticalBox(box) {\n        var minBoxSize = helpers$1.findNextWhere(minBoxSizes, function (minSize) {\n          return minSize.box === box;\n        });\n        var scaleMargin = {\n          left: 0,\n          right: 0,\n          top: outerBoxSizes.top,\n          bottom: outerBoxSizes.bottom\n        };\n\n        if (minBoxSize) {\n          box.update(minBoxSize.width, maxChartAreaHeight, scaleMargin);\n        }\n      } // Let the left layout know the final margin\n\n\n      helpers$1.each(verticalBoxes, finalFitVerticalBox); // Recalculate because the size of each layout might have changed slightly due to the margins (label rotation for instance)\n\n      outerBoxSizes = {\n        top: topPadding,\n        left: leftPadding,\n        bottom: bottomPadding,\n        right: rightPadding\n      };\n      addSizeByPosition(outerBoxes, outerBoxSizes); // We may be adding some padding to account for rotated x axis labels\n\n      var leftPaddingAddition = Math.max(maxPadding.left - outerBoxSizes.left, 0);\n      outerBoxSizes.left += leftPaddingAddition;\n      outerBoxSizes.right += Math.max(maxPadding.right - outerBoxSizes.right, 0);\n      var topPaddingAddition = Math.max(maxPadding.top - outerBoxSizes.top, 0);\n      outerBoxSizes.top += topPaddingAddition;\n      outerBoxSizes.bottom += Math.max(maxPadding.bottom - outerBoxSizes.bottom, 0); // Figure out if our chart area changed. This would occur if the dataset layout label rotation\n      // changed due to the application of the margins in step 6. Since we can only get bigger, this is safe to do\n      // without calling `fit` again\n\n      var newMaxChartAreaHeight = height - outerBoxSizes.top - outerBoxSizes.bottom;\n      var newMaxChartAreaWidth = width - outerBoxSizes.left - outerBoxSizes.right;\n\n      if (newMaxChartAreaWidth !== maxChartAreaWidth || newMaxChartAreaHeight !== maxChartAreaHeight) {\n        helpers$1.each(verticalBoxes, function (box) {\n          box.height = newMaxChartAreaHeight;\n        });\n        helpers$1.each(horizontalBoxes, function (box) {\n          if (!box.fullWidth) {\n            box.width = newMaxChartAreaWidth;\n          }\n        });\n        maxChartAreaHeight = newMaxChartAreaHeight;\n        maxChartAreaWidth = newMaxChartAreaWidth;\n      } // Step 7 - Position the boxes\n\n\n      var left = leftPadding + leftPaddingAddition;\n      var top = topPadding + topPaddingAddition;\n\n      function placeBox(box) {\n        if (box.isHorizontal()) {\n          box.left = box.fullWidth ? leftPadding : outerBoxSizes.left;\n          box.right = box.fullWidth ? width - rightPadding : outerBoxSizes.left + maxChartAreaWidth;\n          box.top = top;\n          box.bottom = top + box.height; // Move to next point\n\n          top = box.bottom;\n        } else {\n          box.left = left;\n          box.right = left + box.width;\n          box.top = outerBoxSizes.top;\n          box.bottom = outerBoxSizes.top + maxChartAreaHeight; // Move to next point\n\n          left = box.right;\n        }\n      }\n\n      helpers$1.each(leftBoxes.concat(topBoxes), placeBox); // Account for chart width and height\n\n      left += maxChartAreaWidth;\n      top += maxChartAreaHeight;\n      helpers$1.each(rightBoxes, placeBox);\n      helpers$1.each(bottomBoxes, placeBox); // Step 8\n\n      chart.chartArea = {\n        left: outerBoxSizes.left,\n        top: outerBoxSizes.top,\n        right: outerBoxSizes.left + maxChartAreaWidth,\n        bottom: outerBoxSizes.top + maxChartAreaHeight\n      }; // Step 9\n\n      helpers$1.each(chartAreaBoxes, function (box) {\n        box.left = chart.chartArea.left;\n        box.top = chart.chartArea.top;\n        box.right = chart.chartArea.right;\n        box.bottom = chart.chartArea.bottom;\n        box.update(maxChartAreaWidth, maxChartAreaHeight);\n      });\n    }\n  };\n  /**\n   * Platform fallback implementation (minimal).\n   * @see https://github.com/chartjs/Chart.js/pull/4591#issuecomment-319575939\n   */\n\n  var platform_basic = {\n    acquireContext: function acquireContext(item) {\n      if (item && item.canvas) {\n        // Support for any object associated to a canvas (including a context2d)\n        item = item.canvas;\n      }\n\n      return item && item.getContext('2d') || null;\n    }\n  };\n  var platform_dom = \"/*\\n * DOM element rendering detection\\n * https://davidwalsh.name/detect-node-insertion\\n */\\n@keyframes chartjs-render-animation {\\n\\tfrom { opacity: 0.99; }\\n\\tto { opacity: 1; }\\n}\\n\\n.chartjs-render-monitor {\\n\\tanimation: chartjs-render-animation 0.001s;\\n}\\n\\n/*\\n * DOM element resizing detection\\n * https://github.com/marcj/css-element-queries\\n */\\n.chartjs-size-monitor,\\n.chartjs-size-monitor-expand,\\n.chartjs-size-monitor-shrink {\\n\\tposition: absolute;\\n\\tdirection: ltr;\\n\\tleft: 0;\\n\\ttop: 0;\\n\\tright: 0;\\n\\tbottom: 0;\\n\\toverflow: hidden;\\n\\tpointer-events: none;\\n\\tvisibility: hidden;\\n\\tz-index: -1;\\n}\\n\\n.chartjs-size-monitor-expand > div {\\n\\tposition: absolute;\\n\\twidth: 1000000px;\\n\\theight: 1000000px;\\n\\tleft: 0;\\n\\ttop: 0;\\n}\\n\\n.chartjs-size-monitor-shrink > div {\\n\\tposition: absolute;\\n\\twidth: 200%;\\n\\theight: 200%;\\n\\tleft: 0;\\n\\ttop: 0;\\n}\\n\";\n  var platform_dom$1 =\n  /*#__PURE__*/\n  Object.freeze({\n    default: platform_dom\n  });\n\n  function getCjsExportFromNamespace(n) {\n    return n && n.default || n;\n  }\n\n  var stylesheet = getCjsExportFromNamespace(platform_dom$1);\n  var EXPANDO_KEY = '$chartjs';\n  var CSS_PREFIX = 'chartjs-';\n  var CSS_SIZE_MONITOR = CSS_PREFIX + 'size-monitor';\n  var CSS_RENDER_MONITOR = CSS_PREFIX + 'render-monitor';\n  var CSS_RENDER_ANIMATION = CSS_PREFIX + 'render-animation';\n  var ANIMATION_START_EVENTS = ['animationstart', 'webkitAnimationStart'];\n  /**\n   * DOM event types -> Chart.js event types.\n   * Note: only events with different types are mapped.\n   * @see https://developer.mozilla.org/en-US/docs/Web/Events\n   */\n\n  var EVENT_TYPES = {\n    touchstart: 'mousedown',\n    touchmove: 'mousemove',\n    touchend: 'mouseup',\n    pointerenter: 'mouseenter',\n    pointerdown: 'mousedown',\n    pointermove: 'mousemove',\n    pointerup: 'mouseup',\n    pointerleave: 'mouseout',\n    pointerout: 'mouseout'\n  };\n  /**\n   * The \"used\" size is the final value of a dimension property after all calculations have\n   * been performed. This method uses the computed style of `element` but returns undefined\n   * if the computed style is not expressed in pixels. That can happen in some cases where\n   * `element` has a size relative to its parent and this last one is not yet displayed,\n   * for example because of `display: none` on a parent node.\n   * @see https://developer.mozilla.org/en-US/docs/Web/CSS/used_value\n   * @returns {number} Size in pixels or undefined if unknown.\n   */\n\n  function readUsedSize(element, property) {\n    var value = helpers$1.getStyle(element, property);\n    var matches = value && value.match(/^(\\d+)(\\.\\d+)?px$/);\n    return matches ? Number(matches[1]) : undefined;\n  }\n  /**\n   * Initializes the canvas style and render size without modifying the canvas display size,\n   * since responsiveness is handled by the controller.resize() method. The config is used\n   * to determine the aspect ratio to apply in case no explicit height has been specified.\n   */\n\n\n  function initCanvas(canvas, config) {\n    var style = canvas.style; // NOTE(SB) canvas.getAttribute('width') !== canvas.width: in the first case it\n    // returns null or '' if no explicit value has been set to the canvas attribute.\n\n    var renderHeight = canvas.getAttribute('height');\n    var renderWidth = canvas.getAttribute('width'); // Chart.js modifies some canvas values that we want to restore on destroy\n\n    canvas[EXPANDO_KEY] = {\n      initial: {\n        height: renderHeight,\n        width: renderWidth,\n        style: {\n          display: style.display,\n          height: style.height,\n          width: style.width\n        }\n      }\n    }; // Force canvas to display as block to avoid extra space caused by inline\n    // elements, which would interfere with the responsive resize process.\n    // https://github.com/chartjs/Chart.js/issues/2538\n\n    style.display = style.display || 'block';\n\n    if (renderWidth === null || renderWidth === '') {\n      var displayWidth = readUsedSize(canvas, 'width');\n\n      if (displayWidth !== undefined) {\n        canvas.width = displayWidth;\n      }\n    }\n\n    if (renderHeight === null || renderHeight === '') {\n      if (canvas.style.height === '') {\n        // If no explicit render height and style height, let's apply the aspect ratio,\n        // which one can be specified by the user but also by charts as default option\n        // (i.e. options.aspectRatio). If not specified, use canvas aspect ratio of 2.\n        canvas.height = canvas.width / (config.options.aspectRatio || 2);\n      } else {\n        var displayHeight = readUsedSize(canvas, 'height');\n\n        if (displayWidth !== undefined) {\n          canvas.height = displayHeight;\n        }\n      }\n    }\n\n    return canvas;\n  }\n  /**\n   * Detects support for options object argument in addEventListener.\n   * https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener#Safely_detecting_option_support\n   * @private\n   */\n\n\n  var supportsEventListenerOptions = function () {\n    var supports = false;\n\n    try {\n      var options = Object.defineProperty({}, 'passive', {\n        // eslint-disable-next-line getter-return\n        get: function get() {\n          supports = true;\n        }\n      });\n      window.addEventListener('e', null, options);\n    } catch (e) {// continue regardless of error\n    }\n\n    return supports;\n  }(); // Default passive to true as expected by Chrome for 'touchstart' and 'touchend' events.\n  // https://github.com/chartjs/Chart.js/issues/4287\n\n\n  var eventListenerOptions = supportsEventListenerOptions ? {\n    passive: true\n  } : false;\n\n  function addListener(node, type, listener) {\n    node.addEventListener(type, listener, eventListenerOptions);\n  }\n\n  function removeListener(node, type, listener) {\n    node.removeEventListener(type, listener, eventListenerOptions);\n  }\n\n  function createEvent(type, chart, x, y, nativeEvent) {\n    return {\n      type: type,\n      chart: chart,\n      native: nativeEvent || null,\n      x: x !== undefined ? x : null,\n      y: y !== undefined ? y : null\n    };\n  }\n\n  function fromNativeEvent(event, chart) {\n    var type = EVENT_TYPES[event.type] || event.type;\n    var pos = helpers$1.getRelativePosition(event, chart);\n    return createEvent(type, chart, pos.x, pos.y, event);\n  }\n\n  function throttled(fn, thisArg) {\n    var ticking = false;\n    var args = [];\n    return function () {\n      args = Array.prototype.slice.call(arguments);\n      thisArg = thisArg || this;\n\n      if (!ticking) {\n        ticking = true;\n        helpers$1.requestAnimFrame.call(window, function () {\n          ticking = false;\n          fn.apply(thisArg, args);\n        });\n      }\n    };\n  }\n\n  function createDiv(cls) {\n    var el = document.createElement('div');\n    el.className = cls || '';\n    return el;\n  } // Implementation based on https://github.com/marcj/css-element-queries\n\n\n  function createResizer(handler) {\n    var maxSize = 1000000; // NOTE(SB) Don't use innerHTML because it could be considered unsafe.\n    // https://github.com/chartjs/Chart.js/issues/5902\n\n    var resizer = createDiv(CSS_SIZE_MONITOR);\n    var expand = createDiv(CSS_SIZE_MONITOR + '-expand');\n    var shrink = createDiv(CSS_SIZE_MONITOR + '-shrink');\n    expand.appendChild(createDiv());\n    shrink.appendChild(createDiv());\n    resizer.appendChild(expand);\n    resizer.appendChild(shrink);\n\n    resizer._reset = function () {\n      expand.scrollLeft = maxSize;\n      expand.scrollTop = maxSize;\n      shrink.scrollLeft = maxSize;\n      shrink.scrollTop = maxSize;\n    };\n\n    var onScroll = function onScroll() {\n      resizer._reset();\n\n      handler();\n    };\n\n    addListener(expand, 'scroll', onScroll.bind(expand, 'expand'));\n    addListener(shrink, 'scroll', onScroll.bind(shrink, 'shrink'));\n    return resizer;\n  } // https://davidwalsh.name/detect-node-insertion\n\n\n  function watchForRender(node, handler) {\n    var expando = node[EXPANDO_KEY] || (node[EXPANDO_KEY] = {});\n\n    var proxy = expando.renderProxy = function (e) {\n      if (e.animationName === CSS_RENDER_ANIMATION) {\n        handler();\n      }\n    };\n\n    helpers$1.each(ANIMATION_START_EVENTS, function (type) {\n      addListener(node, type, proxy);\n    }); // #4737: Chrome might skip the CSS animation when the CSS_RENDER_MONITOR class\n    // is removed then added back immediately (same animation frame?). Accessing the\n    // `offsetParent` property will force a reflow and re-evaluate the CSS animation.\n    // https://gist.github.com/paulirish/5d52fb081b3570c81e3a#box-metrics\n    // https://github.com/chartjs/Chart.js/issues/4737\n\n    expando.reflow = !!node.offsetParent;\n    node.classList.add(CSS_RENDER_MONITOR);\n  }\n\n  function unwatchForRender(node) {\n    var expando = node[EXPANDO_KEY] || {};\n    var proxy = expando.renderProxy;\n\n    if (proxy) {\n      helpers$1.each(ANIMATION_START_EVENTS, function (type) {\n        removeListener(node, type, proxy);\n      });\n      delete expando.renderProxy;\n    }\n\n    node.classList.remove(CSS_RENDER_MONITOR);\n  }\n\n  function addResizeListener(node, listener, chart) {\n    var expando = node[EXPANDO_KEY] || (node[EXPANDO_KEY] = {}); // Let's keep track of this added resizer and thus avoid DOM query when removing it.\n\n    var resizer = expando.resizer = createResizer(throttled(function () {\n      if (expando.resizer) {\n        var container = chart.options.maintainAspectRatio && node.parentNode;\n        var w = container ? container.clientWidth : 0;\n        listener(createEvent('resize', chart));\n\n        if (container && container.clientWidth < w && chart.canvas) {\n          // If the container size shrank during chart resize, let's assume\n          // scrollbar appeared. So we resize again with the scrollbar visible -\n          // effectively making chart smaller and the scrollbar hidden again.\n          // Because we are inside `throttled`, and currently `ticking`, scroll\n          // events are ignored during this whole 2 resize process.\n          // If we assumed wrong and something else happened, we are resizing\n          // twice in a frame (potential performance issue)\n          listener(createEvent('resize', chart));\n        }\n      }\n    })); // The resizer needs to be attached to the node parent, so we first need to be\n    // sure that `node` is attached to the DOM before injecting the resizer element.\n\n    watchForRender(node, function () {\n      if (expando.resizer) {\n        var container = node.parentNode;\n\n        if (container && container !== resizer.parentNode) {\n          container.insertBefore(resizer, container.firstChild);\n        } // The container size might have changed, let's reset the resizer state.\n\n\n        resizer._reset();\n      }\n    });\n  }\n\n  function removeResizeListener(node) {\n    var expando = node[EXPANDO_KEY] || {};\n    var resizer = expando.resizer;\n    delete expando.resizer;\n    unwatchForRender(node);\n\n    if (resizer && resizer.parentNode) {\n      resizer.parentNode.removeChild(resizer);\n    }\n  }\n\n  function injectCSS(platform, css) {\n    // https://stackoverflow.com/q/3922139\n    var style = platform._style || document.createElement('style');\n\n    if (!platform._style) {\n      platform._style = style;\n      css = '/* Chart.js */\\n' + css;\n      style.setAttribute('type', 'text/css');\n      document.getElementsByTagName('head')[0].appendChild(style);\n    }\n\n    style.appendChild(document.createTextNode(css));\n  }\n\n  var platform_dom$2 = {\n    /**\n     * When `true`, prevents the automatic injection of the stylesheet required to\n     * correctly detect when the chart is added to the DOM and then resized. This\n     * switch has been added to allow external stylesheet (`dist/Chart(.min)?.js`)\n     * to be manually imported to make this library compatible with any CSP.\n     * See https://github.com/chartjs/Chart.js/issues/5208\n     */\n    disableCSSInjection: false,\n\n    /**\n     * This property holds whether this platform is enabled for the current environment.\n     * Currently used by platform.js to select the proper implementation.\n     * @private\n     */\n    _enabled: typeof window !== 'undefined' && typeof document !== 'undefined',\n\n    /**\n     * @private\n     */\n    _ensureLoaded: function _ensureLoaded() {\n      if (this._loaded) {\n        return;\n      }\n\n      this._loaded = true; // https://github.com/chartjs/Chart.js/issues/5208\n\n      if (!this.disableCSSInjection) {\n        injectCSS(this, stylesheet);\n      }\n    },\n    acquireContext: function acquireContext(item, config) {\n      if (typeof item === 'string') {\n        item = document.getElementById(item);\n      } else if (item.length) {\n        // Support for array based queries (such as jQuery)\n        item = item[0];\n      }\n\n      if (item && item.canvas) {\n        // Support for any object associated to a canvas (including a context2d)\n        item = item.canvas;\n      } // To prevent canvas fingerprinting, some add-ons undefine the getContext\n      // method, for example: https://github.com/kkapsner/CanvasBlocker\n      // https://github.com/chartjs/Chart.js/issues/2807\n\n\n      var context = item && item.getContext && item.getContext('2d'); // Load platform resources on first chart creation, to make possible to change\n      // platform options after importing the library (e.g. `disableCSSInjection`).\n\n      this._ensureLoaded(); // `instanceof HTMLCanvasElement/CanvasRenderingContext2D` fails when the item is\n      // inside an iframe or when running in a protected environment. We could guess the\n      // types from their toString() value but let's keep things flexible and assume it's\n      // a sufficient condition if the item has a context2D which has item as `canvas`.\n      // https://github.com/chartjs/Chart.js/issues/3887\n      // https://github.com/chartjs/Chart.js/issues/4102\n      // https://github.com/chartjs/Chart.js/issues/4152\n\n\n      if (context && context.canvas === item) {\n        initCanvas(item, config);\n        return context;\n      }\n\n      return null;\n    },\n    releaseContext: function releaseContext(context) {\n      var canvas = context.canvas;\n\n      if (!canvas[EXPANDO_KEY]) {\n        return;\n      }\n\n      var initial = canvas[EXPANDO_KEY].initial;\n      ['height', 'width'].forEach(function (prop) {\n        var value = initial[prop];\n\n        if (helpers$1.isNullOrUndef(value)) {\n          canvas.removeAttribute(prop);\n        } else {\n          canvas.setAttribute(prop, value);\n        }\n      });\n      helpers$1.each(initial.style || {}, function (value, key) {\n        canvas.style[key] = value;\n      }); // The canvas render size might have been changed (and thus the state stack discarded),\n      // we can't use save() and restore() to restore the initial state. So make sure that at\n      // least the canvas context is reset to the default state by setting the canvas width.\n      // https://www.w3.org/TR/2011/WD-html5-20110525/the-canvas-element.html\n      // eslint-disable-next-line no-self-assign\n\n      canvas.width = canvas.width;\n      delete canvas[EXPANDO_KEY];\n    },\n    addEventListener: function addEventListener(chart, type, listener) {\n      var canvas = chart.canvas;\n\n      if (type === 'resize') {\n        // Note: the resize event is not supported on all browsers.\n        addResizeListener(canvas, listener, chart);\n        return;\n      }\n\n      var expando = listener[EXPANDO_KEY] || (listener[EXPANDO_KEY] = {});\n      var proxies = expando.proxies || (expando.proxies = {});\n\n      var proxy = proxies[chart.id + '_' + type] = function (event) {\n        listener(fromNativeEvent(event, chart));\n      };\n\n      addListener(canvas, type, proxy);\n    },\n    removeEventListener: function removeEventListener(chart, type, listener) {\n      var canvas = chart.canvas;\n\n      if (type === 'resize') {\n        // Note: the resize event is not supported on all browsers.\n        removeResizeListener(canvas);\n        return;\n      }\n\n      var expando = listener[EXPANDO_KEY] || {};\n      var proxies = expando.proxies || {};\n      var proxy = proxies[chart.id + '_' + type];\n\n      if (!proxy) {\n        return;\n      }\n\n      removeListener(canvas, type, proxy);\n    }\n  }; // DEPRECATIONS\n\n  /**\n   * Provided for backward compatibility, use EventTarget.addEventListener instead.\n   * EventTarget.addEventListener compatibility: Chrome, Opera 7, Safari, FF1.5+, IE9+\n   * @see https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener\n   * @function Chart.helpers.addEvent\n   * @deprecated since version 2.7.0\n   * @todo remove at version 3\n   * @private\n   */\n\n  helpers$1.addEvent = addListener;\n  /**\n   * Provided for backward compatibility, use EventTarget.removeEventListener instead.\n   * EventTarget.removeEventListener compatibility: Chrome, Opera 7, Safari, FF1.5+, IE9+\n   * @see https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/removeEventListener\n   * @function Chart.helpers.removeEvent\n   * @deprecated since version 2.7.0\n   * @todo remove at version 3\n   * @private\n   */\n\n  helpers$1.removeEvent = removeListener; // @TODO Make possible to select another platform at build time.\n\n  var implementation = platform_dom$2._enabled ? platform_dom$2 : platform_basic;\n  /**\n   * @namespace Chart.platform\n   * @see https://chartjs.gitbooks.io/proposals/content/Platform.html\n   * @since 2.4.0\n   */\n\n  var platform = helpers$1.extend({\n    /**\n     * @since 2.7.0\n     */\n    initialize: function initialize() {},\n\n    /**\n     * Called at chart construction time, returns a context2d instance implementing\n     * the [W3C Canvas 2D Context API standard]{@link https://www.w3.org/TR/2dcontext/}.\n     * @param {*} item - The native item from which to acquire context (platform specific)\n     * @param {object} options - The chart options\n     * @returns {CanvasRenderingContext2D} context2d instance\n     */\n    acquireContext: function acquireContext() {},\n\n    /**\n     * Called at chart destruction time, releases any resources associated to the context\n     * previously returned by the acquireContext() method.\n     * @param {CanvasRenderingContext2D} context - The context2d instance\n     * @returns {boolean} true if the method succeeded, else false\n     */\n    releaseContext: function releaseContext() {},\n\n    /**\n     * Registers the specified listener on the given chart.\n     * @param {Chart} chart - Chart from which to listen for event\n     * @param {string} type - The ({@link IEvent}) type to listen for\n     * @param {function} listener - Receives a notification (an object that implements\n     * the {@link IEvent} interface) when an event of the specified type occurs.\n     */\n    addEventListener: function addEventListener() {},\n\n    /**\n     * Removes the specified listener previously registered with addEventListener.\n     * @param {Chart} chart - Chart from which to remove the listener\n     * @param {string} type - The ({@link IEvent}) type to remove\n     * @param {function} listener - The listener function to remove from the event target.\n     */\n    removeEventListener: function removeEventListener() {}\n  }, implementation);\n\n  core_defaults._set('global', {\n    plugins: {}\n  });\n  /**\n   * The plugin service singleton\n   * @namespace Chart.plugins\n   * @since 2.1.0\n   */\n\n\n  var core_plugins = {\n    /**\n     * Globally registered plugins.\n     * @private\n     */\n    _plugins: [],\n\n    /**\n     * This identifier is used to invalidate the descriptors cache attached to each chart\n     * when a global plugin is registered or unregistered. In this case, the cache ID is\n     * incremented and descriptors are regenerated during following API calls.\n     * @private\n     */\n    _cacheId: 0,\n\n    /**\n     * Registers the given plugin(s) if not already registered.\n     * @param {IPlugin[]|IPlugin} plugins plugin instance(s).\n     */\n    register: function register(plugins) {\n      var p = this._plugins;\n      [].concat(plugins).forEach(function (plugin) {\n        if (p.indexOf(plugin) === -1) {\n          p.push(plugin);\n        }\n      });\n      this._cacheId++;\n    },\n\n    /**\n     * Unregisters the given plugin(s) only if registered.\n     * @param {IPlugin[]|IPlugin} plugins plugin instance(s).\n     */\n    unregister: function unregister(plugins) {\n      var p = this._plugins;\n      [].concat(plugins).forEach(function (plugin) {\n        var idx = p.indexOf(plugin);\n\n        if (idx !== -1) {\n          p.splice(idx, 1);\n        }\n      });\n      this._cacheId++;\n    },\n\n    /**\n     * Remove all registered plugins.\n     * @since 2.1.5\n     */\n    clear: function clear() {\n      this._plugins = [];\n      this._cacheId++;\n    },\n\n    /**\n     * Returns the number of registered plugins?\n     * @returns {number}\n     * @since 2.1.5\n     */\n    count: function count() {\n      return this._plugins.length;\n    },\n\n    /**\n     * Returns all registered plugin instances.\n     * @returns {IPlugin[]} array of plugin objects.\n     * @since 2.1.5\n     */\n    getAll: function getAll() {\n      return this._plugins;\n    },\n\n    /**\n     * Calls enabled plugins for `chart` on the specified hook and with the given args.\n     * This method immediately returns as soon as a plugin explicitly returns false. The\n     * returned value can be used, for instance, to interrupt the current action.\n     * @param {Chart} chart - The chart instance for which plugins should be called.\n     * @param {string} hook - The name of the plugin method to call (e.g. 'beforeUpdate').\n     * @param {Array} [args] - Extra arguments to apply to the hook call.\n     * @returns {boolean} false if any of the plugins return false, else returns true.\n     */\n    notify: function notify(chart, hook, args) {\n      var descriptors = this.descriptors(chart);\n      var ilen = descriptors.length;\n      var i, descriptor, plugin, params, method;\n\n      for (i = 0; i < ilen; ++i) {\n        descriptor = descriptors[i];\n        plugin = descriptor.plugin;\n        method = plugin[hook];\n\n        if (typeof method === 'function') {\n          params = [chart].concat(args || []);\n          params.push(descriptor.options);\n\n          if (method.apply(plugin, params) === false) {\n            return false;\n          }\n        }\n      }\n\n      return true;\n    },\n\n    /**\n     * Returns descriptors of enabled plugins for the given chart.\n     * @returns {object[]} [{ plugin, options }]\n     * @private\n     */\n    descriptors: function descriptors(chart) {\n      var cache = chart.$plugins || (chart.$plugins = {});\n\n      if (cache.id === this._cacheId) {\n        return cache.descriptors;\n      }\n\n      var plugins = [];\n      var descriptors = [];\n      var config = chart && chart.config || {};\n      var options = config.options && config.options.plugins || {};\n\n      this._plugins.concat(config.plugins || []).forEach(function (plugin) {\n        var idx = plugins.indexOf(plugin);\n\n        if (idx !== -1) {\n          return;\n        }\n\n        var id = plugin.id;\n        var opts = options[id];\n\n        if (opts === false) {\n          return;\n        }\n\n        if (opts === true) {\n          opts = helpers$1.clone(core_defaults.global.plugins[id]);\n        }\n\n        plugins.push(plugin);\n        descriptors.push({\n          plugin: plugin,\n          options: opts || {}\n        });\n      });\n\n      cache.descriptors = descriptors;\n      cache.id = this._cacheId;\n      return descriptors;\n    },\n\n    /**\n     * Invalidates cache for the given chart: descriptors hold a reference on plugin option,\n     * but in some cases, this reference can be changed by the user when updating options.\n     * https://github.com/chartjs/Chart.js/issues/5111#issuecomment-355934167\n     * @private\n     */\n    _invalidate: function _invalidate(chart) {\n      delete chart.$plugins;\n    }\n  };\n  var core_scaleService = {\n    // Scale registration object. Extensions can register new scale types (such as log or DB scales) and then\n    // use the new chart options to grab the correct scale\n    constructors: {},\n    // Use a registration function so that we can move to an ES6 map when we no longer need to support\n    // old browsers\n    // Scale config defaults\n    defaults: {},\n    registerScaleType: function registerScaleType(type, scaleConstructor, scaleDefaults) {\n      this.constructors[type] = scaleConstructor;\n      this.defaults[type] = helpers$1.clone(scaleDefaults);\n    },\n    getScaleConstructor: function getScaleConstructor(type) {\n      return this.constructors.hasOwnProperty(type) ? this.constructors[type] : undefined;\n    },\n    getScaleDefaults: function getScaleDefaults(type) {\n      // Return the scale defaults merged with the global settings so that we always use the latest ones\n      return this.defaults.hasOwnProperty(type) ? helpers$1.merge({}, [core_defaults.scale, this.defaults[type]]) : {};\n    },\n    updateScaleDefaults: function updateScaleDefaults(type, additions) {\n      var me = this;\n\n      if (me.defaults.hasOwnProperty(type)) {\n        me.defaults[type] = helpers$1.extend(me.defaults[type], additions);\n      }\n    },\n    addScalesToLayout: function addScalesToLayout(chart) {\n      // Adds each scale to the chart.boxes array to be sized accordingly\n      helpers$1.each(chart.scales, function (scale) {\n        // Set ILayoutItem parameters for backwards compatibility\n        scale.fullWidth = scale.options.fullWidth;\n        scale.position = scale.options.position;\n        scale.weight = scale.options.weight;\n        core_layouts.addBox(chart, scale);\n      });\n    }\n  };\n  var valueOrDefault$7 = helpers$1.valueOrDefault;\n\n  core_defaults._set('global', {\n    tooltips: {\n      enabled: true,\n      custom: null,\n      mode: 'nearest',\n      position: 'average',\n      intersect: true,\n      backgroundColor: 'rgba(0,0,0,0.8)',\n      titleFontStyle: 'bold',\n      titleSpacing: 2,\n      titleMarginBottom: 6,\n      titleFontColor: '#fff',\n      titleAlign: 'left',\n      bodySpacing: 2,\n      bodyFontColor: '#fff',\n      bodyAlign: 'left',\n      footerFontStyle: 'bold',\n      footerSpacing: 2,\n      footerMarginTop: 6,\n      footerFontColor: '#fff',\n      footerAlign: 'left',\n      yPadding: 6,\n      xPadding: 6,\n      caretPadding: 2,\n      caretSize: 5,\n      cornerRadius: 6,\n      multiKeyBackground: '#fff',\n      displayColors: true,\n      borderColor: 'rgba(0,0,0,0)',\n      borderWidth: 0,\n      callbacks: {\n        // Args are: (tooltipItems, data)\n        beforeTitle: helpers$1.noop,\n        title: function title(tooltipItems, data) {\n          var title = '';\n          var labels = data.labels;\n          var labelCount = labels ? labels.length : 0;\n\n          if (tooltipItems.length > 0) {\n            var item = tooltipItems[0];\n\n            if (item.label) {\n              title = item.label;\n            } else if (item.xLabel) {\n              title = item.xLabel;\n            } else if (labelCount > 0 && item.index < labelCount) {\n              title = labels[item.index];\n            }\n          }\n\n          return title;\n        },\n        afterTitle: helpers$1.noop,\n        // Args are: (tooltipItems, data)\n        beforeBody: helpers$1.noop,\n        // Args are: (tooltipItem, data)\n        beforeLabel: helpers$1.noop,\n        label: function label(tooltipItem, data) {\n          var label = data.datasets[tooltipItem.datasetIndex].label || '';\n\n          if (label) {\n            label += ': ';\n          }\n\n          if (!helpers$1.isNullOrUndef(tooltipItem.value)) {\n            label += tooltipItem.value;\n          } else {\n            label += tooltipItem.yLabel;\n          }\n\n          return label;\n        },\n        labelColor: function labelColor(tooltipItem, chart) {\n          var meta = chart.getDatasetMeta(tooltipItem.datasetIndex);\n          var activeElement = meta.data[tooltipItem.index];\n          var view = activeElement._view;\n          return {\n            borderColor: view.borderColor,\n            backgroundColor: view.backgroundColor\n          };\n        },\n        labelTextColor: function labelTextColor() {\n          return this._options.bodyFontColor;\n        },\n        afterLabel: helpers$1.noop,\n        // Args are: (tooltipItems, data)\n        afterBody: helpers$1.noop,\n        // Args are: (tooltipItems, data)\n        beforeFooter: helpers$1.noop,\n        footer: helpers$1.noop,\n        afterFooter: helpers$1.noop\n      }\n    }\n  });\n\n  var positioners = {\n    /**\n     * Average mode places the tooltip at the average position of the elements shown\n     * @function Chart.Tooltip.positioners.average\n     * @param elements {ChartElement[]} the elements being displayed in the tooltip\n     * @returns {object} tooltip position\n     */\n    average: function average(elements) {\n      if (!elements.length) {\n        return false;\n      }\n\n      var i, len;\n      var x = 0;\n      var y = 0;\n      var count = 0;\n\n      for (i = 0, len = elements.length; i < len; ++i) {\n        var el = elements[i];\n\n        if (el && el.hasValue()) {\n          var pos = el.tooltipPosition();\n          x += pos.x;\n          y += pos.y;\n          ++count;\n        }\n      }\n\n      return {\n        x: x / count,\n        y: y / count\n      };\n    },\n\n    /**\n     * Gets the tooltip position nearest of the item nearest to the event position\n     * @function Chart.Tooltip.positioners.nearest\n     * @param elements {Chart.Element[]} the tooltip elements\n     * @param eventPosition {object} the position of the event in canvas coordinates\n     * @returns {object} the tooltip position\n     */\n    nearest: function nearest(elements, eventPosition) {\n      var x = eventPosition.x;\n      var y = eventPosition.y;\n      var minDistance = Number.POSITIVE_INFINITY;\n      var i, len, nearestElement;\n\n      for (i = 0, len = elements.length; i < len; ++i) {\n        var el = elements[i];\n\n        if (el && el.hasValue()) {\n          var center = el.getCenterPoint();\n          var d = helpers$1.distanceBetweenPoints(eventPosition, center);\n\n          if (d < minDistance) {\n            minDistance = d;\n            nearestElement = el;\n          }\n        }\n      }\n\n      if (nearestElement) {\n        var tp = nearestElement.tooltipPosition();\n        x = tp.x;\n        y = tp.y;\n      }\n\n      return {\n        x: x,\n        y: y\n      };\n    }\n  }; // Helper to push or concat based on if the 2nd parameter is an array or not\n\n  function pushOrConcat(base, toPush) {\n    if (toPush) {\n      if (helpers$1.isArray(toPush)) {\n        // base = base.concat(toPush);\n        Array.prototype.push.apply(base, toPush);\n      } else {\n        base.push(toPush);\n      }\n    }\n\n    return base;\n  }\n  /**\n   * Returns array of strings split by newline\n   * @param {string} value - The value to split by newline.\n   * @returns {string[]} value if newline present - Returned from String split() method\n   * @function\n   */\n\n\n  function splitNewlines(str) {\n    if ((typeof str === 'string' || str instanceof String) && str.indexOf('\\n') > -1) {\n      return str.split('\\n');\n    }\n\n    return str;\n  }\n  /**\n   * Private helper to create a tooltip item model\n   * @param element - the chart element (point, arc, bar) to create the tooltip item for\n   * @return new tooltip item\n   */\n\n\n  function createTooltipItem(element) {\n    var xScale = element._xScale;\n    var yScale = element._yScale || element._scale; // handle radar || polarArea charts\n\n    var index = element._index;\n    var datasetIndex = element._datasetIndex;\n\n    var controller = element._chart.getDatasetMeta(datasetIndex).controller;\n\n    var indexScale = controller._getIndexScale();\n\n    var valueScale = controller._getValueScale();\n\n    return {\n      xLabel: xScale ? xScale.getLabelForIndex(index, datasetIndex) : '',\n      yLabel: yScale ? yScale.getLabelForIndex(index, datasetIndex) : '',\n      label: indexScale ? '' + indexScale.getLabelForIndex(index, datasetIndex) : '',\n      value: valueScale ? '' + valueScale.getLabelForIndex(index, datasetIndex) : '',\n      index: index,\n      datasetIndex: datasetIndex,\n      x: element._model.x,\n      y: element._model.y\n    };\n  }\n  /**\n   * Helper to get the reset model for the tooltip\n   * @param tooltipOpts {object} the tooltip options\n   */\n\n\n  function getBaseModel(tooltipOpts) {\n    var globalDefaults = core_defaults.global;\n    return {\n      // Positioning\n      xPadding: tooltipOpts.xPadding,\n      yPadding: tooltipOpts.yPadding,\n      xAlign: tooltipOpts.xAlign,\n      yAlign: tooltipOpts.yAlign,\n      // Body\n      bodyFontColor: tooltipOpts.bodyFontColor,\n      _bodyFontFamily: valueOrDefault$7(tooltipOpts.bodyFontFamily, globalDefaults.defaultFontFamily),\n      _bodyFontStyle: valueOrDefault$7(tooltipOpts.bodyFontStyle, globalDefaults.defaultFontStyle),\n      _bodyAlign: tooltipOpts.bodyAlign,\n      bodyFontSize: valueOrDefault$7(tooltipOpts.bodyFontSize, globalDefaults.defaultFontSize),\n      bodySpacing: tooltipOpts.bodySpacing,\n      // Title\n      titleFontColor: tooltipOpts.titleFontColor,\n      _titleFontFamily: valueOrDefault$7(tooltipOpts.titleFontFamily, globalDefaults.defaultFontFamily),\n      _titleFontStyle: valueOrDefault$7(tooltipOpts.titleFontStyle, globalDefaults.defaultFontStyle),\n      titleFontSize: valueOrDefault$7(tooltipOpts.titleFontSize, globalDefaults.defaultFontSize),\n      _titleAlign: tooltipOpts.titleAlign,\n      titleSpacing: tooltipOpts.titleSpacing,\n      titleMarginBottom: tooltipOpts.titleMarginBottom,\n      // Footer\n      footerFontColor: tooltipOpts.footerFontColor,\n      _footerFontFamily: valueOrDefault$7(tooltipOpts.footerFontFamily, globalDefaults.defaultFontFamily),\n      _footerFontStyle: valueOrDefault$7(tooltipOpts.footerFontStyle, globalDefaults.defaultFontStyle),\n      footerFontSize: valueOrDefault$7(tooltipOpts.footerFontSize, globalDefaults.defaultFontSize),\n      _footerAlign: tooltipOpts.footerAlign,\n      footerSpacing: tooltipOpts.footerSpacing,\n      footerMarginTop: tooltipOpts.footerMarginTop,\n      // Appearance\n      caretSize: tooltipOpts.caretSize,\n      cornerRadius: tooltipOpts.cornerRadius,\n      backgroundColor: tooltipOpts.backgroundColor,\n      opacity: 0,\n      legendColorBackground: tooltipOpts.multiKeyBackground,\n      displayColors: tooltipOpts.displayColors,\n      borderColor: tooltipOpts.borderColor,\n      borderWidth: tooltipOpts.borderWidth\n    };\n  }\n  /**\n   * Get the size of the tooltip\n   */\n\n\n  function getTooltipSize(tooltip, model) {\n    var ctx = tooltip._chart.ctx;\n    var height = model.yPadding * 2; // Tooltip Padding\n\n    var width = 0; // Count of all lines in the body\n\n    var body = model.body;\n    var combinedBodyLength = body.reduce(function (count, bodyItem) {\n      return count + bodyItem.before.length + bodyItem.lines.length + bodyItem.after.length;\n    }, 0);\n    combinedBodyLength += model.beforeBody.length + model.afterBody.length;\n    var titleLineCount = model.title.length;\n    var footerLineCount = model.footer.length;\n    var titleFontSize = model.titleFontSize;\n    var bodyFontSize = model.bodyFontSize;\n    var footerFontSize = model.footerFontSize;\n    height += titleLineCount * titleFontSize; // Title Lines\n\n    height += titleLineCount ? (titleLineCount - 1) * model.titleSpacing : 0; // Title Line Spacing\n\n    height += titleLineCount ? model.titleMarginBottom : 0; // Title's bottom Margin\n\n    height += combinedBodyLength * bodyFontSize; // Body Lines\n\n    height += combinedBodyLength ? (combinedBodyLength - 1) * model.bodySpacing : 0; // Body Line Spacing\n\n    height += footerLineCount ? model.footerMarginTop : 0; // Footer Margin\n\n    height += footerLineCount * footerFontSize; // Footer Lines\n\n    height += footerLineCount ? (footerLineCount - 1) * model.footerSpacing : 0; // Footer Line Spacing\n    // Title width\n\n    var widthPadding = 0;\n\n    var maxLineWidth = function maxLineWidth(line) {\n      width = Math.max(width, ctx.measureText(line).width + widthPadding);\n    };\n\n    ctx.font = helpers$1.fontString(titleFontSize, model._titleFontStyle, model._titleFontFamily);\n    helpers$1.each(model.title, maxLineWidth); // Body width\n\n    ctx.font = helpers$1.fontString(bodyFontSize, model._bodyFontStyle, model._bodyFontFamily);\n    helpers$1.each(model.beforeBody.concat(model.afterBody), maxLineWidth); // Body lines may include some extra width due to the color box\n\n    widthPadding = model.displayColors ? bodyFontSize + 2 : 0;\n    helpers$1.each(body, function (bodyItem) {\n      helpers$1.each(bodyItem.before, maxLineWidth);\n      helpers$1.each(bodyItem.lines, maxLineWidth);\n      helpers$1.each(bodyItem.after, maxLineWidth);\n    }); // Reset back to 0\n\n    widthPadding = 0; // Footer width\n\n    ctx.font = helpers$1.fontString(footerFontSize, model._footerFontStyle, model._footerFontFamily);\n    helpers$1.each(model.footer, maxLineWidth); // Add padding\n\n    width += 2 * model.xPadding;\n    return {\n      width: width,\n      height: height\n    };\n  }\n  /**\n   * Helper to get the alignment of a tooltip given the size\n   */\n\n\n  function determineAlignment(tooltip, size) {\n    var model = tooltip._model;\n    var chart = tooltip._chart;\n    var chartArea = tooltip._chart.chartArea;\n    var xAlign = 'center';\n    var yAlign = 'center';\n\n    if (model.y < size.height) {\n      yAlign = 'top';\n    } else if (model.y > chart.height - size.height) {\n      yAlign = 'bottom';\n    }\n\n    var lf, rf; // functions to determine left, right alignment\n\n    var olf, orf; // functions to determine if left/right alignment causes tooltip to go outside chart\n\n    var yf; // function to get the y alignment if the tooltip goes outside of the left or right edges\n\n    var midX = (chartArea.left + chartArea.right) / 2;\n    var midY = (chartArea.top + chartArea.bottom) / 2;\n\n    if (yAlign === 'center') {\n      lf = function lf(x) {\n        return x <= midX;\n      };\n\n      rf = function rf(x) {\n        return x > midX;\n      };\n    } else {\n      lf = function lf(x) {\n        return x <= size.width / 2;\n      };\n\n      rf = function rf(x) {\n        return x >= chart.width - size.width / 2;\n      };\n    }\n\n    olf = function olf(x) {\n      return x + size.width + model.caretSize + model.caretPadding > chart.width;\n    };\n\n    orf = function orf(x) {\n      return x - size.width - model.caretSize - model.caretPadding < 0;\n    };\n\n    yf = function yf(y) {\n      return y <= midY ? 'top' : 'bottom';\n    };\n\n    if (lf(model.x)) {\n      xAlign = 'left'; // Is tooltip too wide and goes over the right side of the chart.?\n\n      if (olf(model.x)) {\n        xAlign = 'center';\n        yAlign = yf(model.y);\n      }\n    } else if (rf(model.x)) {\n      xAlign = 'right'; // Is tooltip too wide and goes outside left edge of canvas?\n\n      if (orf(model.x)) {\n        xAlign = 'center';\n        yAlign = yf(model.y);\n      }\n    }\n\n    var opts = tooltip._options;\n    return {\n      xAlign: opts.xAlign ? opts.xAlign : xAlign,\n      yAlign: opts.yAlign ? opts.yAlign : yAlign\n    };\n  }\n  /**\n   * Helper to get the location a tooltip needs to be placed at given the initial position (via the vm) and the size and alignment\n   */\n\n\n  function getBackgroundPoint(vm, size, alignment, chart) {\n    // Background Position\n    var x = vm.x;\n    var y = vm.y;\n    var caretSize = vm.caretSize;\n    var caretPadding = vm.caretPadding;\n    var cornerRadius = vm.cornerRadius;\n    var xAlign = alignment.xAlign;\n    var yAlign = alignment.yAlign;\n    var paddingAndSize = caretSize + caretPadding;\n    var radiusAndPadding = cornerRadius + caretPadding;\n\n    if (xAlign === 'right') {\n      x -= size.width;\n    } else if (xAlign === 'center') {\n      x -= size.width / 2;\n\n      if (x + size.width > chart.width) {\n        x = chart.width - size.width;\n      }\n\n      if (x < 0) {\n        x = 0;\n      }\n    }\n\n    if (yAlign === 'top') {\n      y += paddingAndSize;\n    } else if (yAlign === 'bottom') {\n      y -= size.height + paddingAndSize;\n    } else {\n      y -= size.height / 2;\n    }\n\n    if (yAlign === 'center') {\n      if (xAlign === 'left') {\n        x += paddingAndSize;\n      } else if (xAlign === 'right') {\n        x -= paddingAndSize;\n      }\n    } else if (xAlign === 'left') {\n      x -= radiusAndPadding;\n    } else if (xAlign === 'right') {\n      x += radiusAndPadding;\n    }\n\n    return {\n      x: x,\n      y: y\n    };\n  }\n\n  function getAlignedX(vm, align) {\n    return align === 'center' ? vm.x + vm.width / 2 : align === 'right' ? vm.x + vm.width - vm.xPadding : vm.x + vm.xPadding;\n  }\n  /**\n   * Helper to build before and after body lines\n   */\n\n\n  function getBeforeAfterBodyLines(callback) {\n    return pushOrConcat([], splitNewlines(callback));\n  }\n\n  var exports$3 = core_element.extend({\n    initialize: function initialize() {\n      this._model = getBaseModel(this._options);\n      this._lastActive = [];\n    },\n    // Get the title\n    // Args are: (tooltipItem, data)\n    getTitle: function getTitle() {\n      var me = this;\n      var opts = me._options;\n      var callbacks = opts.callbacks;\n      var beforeTitle = callbacks.beforeTitle.apply(me, arguments);\n      var title = callbacks.title.apply(me, arguments);\n      var afterTitle = callbacks.afterTitle.apply(me, arguments);\n      var lines = [];\n      lines = pushOrConcat(lines, splitNewlines(beforeTitle));\n      lines = pushOrConcat(lines, splitNewlines(title));\n      lines = pushOrConcat(lines, splitNewlines(afterTitle));\n      return lines;\n    },\n    // Args are: (tooltipItem, data)\n    getBeforeBody: function getBeforeBody() {\n      return getBeforeAfterBodyLines(this._options.callbacks.beforeBody.apply(this, arguments));\n    },\n    // Args are: (tooltipItem, data)\n    getBody: function getBody(tooltipItems, data) {\n      var me = this;\n      var callbacks = me._options.callbacks;\n      var bodyItems = [];\n      helpers$1.each(tooltipItems, function (tooltipItem) {\n        var bodyItem = {\n          before: [],\n          lines: [],\n          after: []\n        };\n        pushOrConcat(bodyItem.before, splitNewlines(callbacks.beforeLabel.call(me, tooltipItem, data)));\n        pushOrConcat(bodyItem.lines, callbacks.label.call(me, tooltipItem, data));\n        pushOrConcat(bodyItem.after, splitNewlines(callbacks.afterLabel.call(me, tooltipItem, data)));\n        bodyItems.push(bodyItem);\n      });\n      return bodyItems;\n    },\n    // Args are: (tooltipItem, data)\n    getAfterBody: function getAfterBody() {\n      return getBeforeAfterBodyLines(this._options.callbacks.afterBody.apply(this, arguments));\n    },\n    // Get the footer and beforeFooter and afterFooter lines\n    // Args are: (tooltipItem, data)\n    getFooter: function getFooter() {\n      var me = this;\n      var callbacks = me._options.callbacks;\n      var beforeFooter = callbacks.beforeFooter.apply(me, arguments);\n      var footer = callbacks.footer.apply(me, arguments);\n      var afterFooter = callbacks.afterFooter.apply(me, arguments);\n      var lines = [];\n      lines = pushOrConcat(lines, splitNewlines(beforeFooter));\n      lines = pushOrConcat(lines, splitNewlines(footer));\n      lines = pushOrConcat(lines, splitNewlines(afterFooter));\n      return lines;\n    },\n    update: function update(changed) {\n      var me = this;\n      var opts = me._options; // Need to regenerate the model because its faster than using extend and it is necessary due to the optimization in Chart.Element.transition\n      // that does _view = _model if ease === 1. This causes the 2nd tooltip update to set properties in both the view and model at the same time\n      // which breaks any animations.\n\n      var existingModel = me._model;\n      var model = me._model = getBaseModel(opts);\n      var active = me._active;\n      var data = me._data; // In the case where active.length === 0 we need to keep these at existing values for good animations\n\n      var alignment = {\n        xAlign: existingModel.xAlign,\n        yAlign: existingModel.yAlign\n      };\n      var backgroundPoint = {\n        x: existingModel.x,\n        y: existingModel.y\n      };\n      var tooltipSize = {\n        width: existingModel.width,\n        height: existingModel.height\n      };\n      var tooltipPosition = {\n        x: existingModel.caretX,\n        y: existingModel.caretY\n      };\n      var i, len;\n\n      if (active.length) {\n        model.opacity = 1;\n        var labelColors = [];\n        var labelTextColors = [];\n        tooltipPosition = positioners[opts.position].call(me, active, me._eventPosition);\n        var tooltipItems = [];\n\n        for (i = 0, len = active.length; i < len; ++i) {\n          tooltipItems.push(createTooltipItem(active[i]));\n        } // If the user provided a filter function, use it to modify the tooltip items\n\n\n        if (opts.filter) {\n          tooltipItems = tooltipItems.filter(function (a) {\n            return opts.filter(a, data);\n          });\n        } // If the user provided a sorting function, use it to modify the tooltip items\n\n\n        if (opts.itemSort) {\n          tooltipItems = tooltipItems.sort(function (a, b) {\n            return opts.itemSort(a, b, data);\n          });\n        } // Determine colors for boxes\n\n\n        helpers$1.each(tooltipItems, function (tooltipItem) {\n          labelColors.push(opts.callbacks.labelColor.call(me, tooltipItem, me._chart));\n          labelTextColors.push(opts.callbacks.labelTextColor.call(me, tooltipItem, me._chart));\n        }); // Build the Text Lines\n\n        model.title = me.getTitle(tooltipItems, data);\n        model.beforeBody = me.getBeforeBody(tooltipItems, data);\n        model.body = me.getBody(tooltipItems, data);\n        model.afterBody = me.getAfterBody(tooltipItems, data);\n        model.footer = me.getFooter(tooltipItems, data); // Initial positioning and colors\n\n        model.x = tooltipPosition.x;\n        model.y = tooltipPosition.y;\n        model.caretPadding = opts.caretPadding;\n        model.labelColors = labelColors;\n        model.labelTextColors = labelTextColors; // data points\n\n        model.dataPoints = tooltipItems; // We need to determine alignment of the tooltip\n\n        tooltipSize = getTooltipSize(this, model);\n        alignment = determineAlignment(this, tooltipSize); // Final Size and Position\n\n        backgroundPoint = getBackgroundPoint(model, tooltipSize, alignment, me._chart);\n      } else {\n        model.opacity = 0;\n      }\n\n      model.xAlign = alignment.xAlign;\n      model.yAlign = alignment.yAlign;\n      model.x = backgroundPoint.x;\n      model.y = backgroundPoint.y;\n      model.width = tooltipSize.width;\n      model.height = tooltipSize.height; // Point where the caret on the tooltip points to\n\n      model.caretX = tooltipPosition.x;\n      model.caretY = tooltipPosition.y;\n      me._model = model;\n\n      if (changed && opts.custom) {\n        opts.custom.call(me, model);\n      }\n\n      return me;\n    },\n    drawCaret: function drawCaret(tooltipPoint, size) {\n      var ctx = this._chart.ctx;\n      var vm = this._view;\n      var caretPosition = this.getCaretPosition(tooltipPoint, size, vm);\n      ctx.lineTo(caretPosition.x1, caretPosition.y1);\n      ctx.lineTo(caretPosition.x2, caretPosition.y2);\n      ctx.lineTo(caretPosition.x3, caretPosition.y3);\n    },\n    getCaretPosition: function getCaretPosition(tooltipPoint, size, vm) {\n      var x1, x2, x3, y1, y2, y3;\n      var caretSize = vm.caretSize;\n      var cornerRadius = vm.cornerRadius;\n      var xAlign = vm.xAlign;\n      var yAlign = vm.yAlign;\n      var ptX = tooltipPoint.x;\n      var ptY = tooltipPoint.y;\n      var width = size.width;\n      var height = size.height;\n\n      if (yAlign === 'center') {\n        y2 = ptY + height / 2;\n\n        if (xAlign === 'left') {\n          x1 = ptX;\n          x2 = x1 - caretSize;\n          x3 = x1;\n          y1 = y2 + caretSize;\n          y3 = y2 - caretSize;\n        } else {\n          x1 = ptX + width;\n          x2 = x1 + caretSize;\n          x3 = x1;\n          y1 = y2 - caretSize;\n          y3 = y2 + caretSize;\n        }\n      } else {\n        if (xAlign === 'left') {\n          x2 = ptX + cornerRadius + caretSize;\n          x1 = x2 - caretSize;\n          x3 = x2 + caretSize;\n        } else if (xAlign === 'right') {\n          x2 = ptX + width - cornerRadius - caretSize;\n          x1 = x2 - caretSize;\n          x3 = x2 + caretSize;\n        } else {\n          x2 = vm.caretX;\n          x1 = x2 - caretSize;\n          x3 = x2 + caretSize;\n        }\n\n        if (yAlign === 'top') {\n          y1 = ptY;\n          y2 = y1 - caretSize;\n          y3 = y1;\n        } else {\n          y1 = ptY + height;\n          y2 = y1 + caretSize;\n          y3 = y1; // invert drawing order\n\n          var tmp = x3;\n          x3 = x1;\n          x1 = tmp;\n        }\n      }\n\n      return {\n        x1: x1,\n        x2: x2,\n        x3: x3,\n        y1: y1,\n        y2: y2,\n        y3: y3\n      };\n    },\n    drawTitle: function drawTitle(pt, vm, ctx) {\n      var title = vm.title;\n\n      if (title.length) {\n        pt.x = getAlignedX(vm, vm._titleAlign);\n        ctx.textAlign = vm._titleAlign;\n        ctx.textBaseline = 'top';\n        var titleFontSize = vm.titleFontSize;\n        var titleSpacing = vm.titleSpacing;\n        ctx.fillStyle = vm.titleFontColor;\n        ctx.font = helpers$1.fontString(titleFontSize, vm._titleFontStyle, vm._titleFontFamily);\n        var i, len;\n\n        for (i = 0, len = title.length; i < len; ++i) {\n          ctx.fillText(title[i], pt.x, pt.y);\n          pt.y += titleFontSize + titleSpacing; // Line Height and spacing\n\n          if (i + 1 === title.length) {\n            pt.y += vm.titleMarginBottom - titleSpacing; // If Last, add margin, remove spacing\n          }\n        }\n      }\n    },\n    drawBody: function drawBody(pt, vm, ctx) {\n      var bodyFontSize = vm.bodyFontSize;\n      var bodySpacing = vm.bodySpacing;\n      var bodyAlign = vm._bodyAlign;\n      var body = vm.body;\n      var drawColorBoxes = vm.displayColors;\n      var labelColors = vm.labelColors;\n      var xLinePadding = 0;\n      var colorX = drawColorBoxes ? getAlignedX(vm, 'left') : 0;\n      var textColor;\n      ctx.textAlign = bodyAlign;\n      ctx.textBaseline = 'top';\n      ctx.font = helpers$1.fontString(bodyFontSize, vm._bodyFontStyle, vm._bodyFontFamily);\n      pt.x = getAlignedX(vm, bodyAlign); // Before Body\n\n      var fillLineOfText = function fillLineOfText(line) {\n        ctx.fillText(line, pt.x + xLinePadding, pt.y);\n        pt.y += bodyFontSize + bodySpacing;\n      }; // Before body lines\n\n\n      ctx.fillStyle = vm.bodyFontColor;\n      helpers$1.each(vm.beforeBody, fillLineOfText);\n      xLinePadding = drawColorBoxes && bodyAlign !== 'right' ? bodyAlign === 'center' ? bodyFontSize / 2 + 1 : bodyFontSize + 2 : 0; // Draw body lines now\n\n      helpers$1.each(body, function (bodyItem, i) {\n        textColor = vm.labelTextColors[i];\n        ctx.fillStyle = textColor;\n        helpers$1.each(bodyItem.before, fillLineOfText);\n        helpers$1.each(bodyItem.lines, function (line) {\n          // Draw Legend-like boxes if needed\n          if (drawColorBoxes) {\n            // Fill a white rect so that colours merge nicely if the opacity is < 1\n            ctx.fillStyle = vm.legendColorBackground;\n            ctx.fillRect(colorX, pt.y, bodyFontSize, bodyFontSize); // Border\n\n            ctx.lineWidth = 1;\n            ctx.strokeStyle = labelColors[i].borderColor;\n            ctx.strokeRect(colorX, pt.y, bodyFontSize, bodyFontSize); // Inner square\n\n            ctx.fillStyle = labelColors[i].backgroundColor;\n            ctx.fillRect(colorX + 1, pt.y + 1, bodyFontSize - 2, bodyFontSize - 2);\n            ctx.fillStyle = textColor;\n          }\n\n          fillLineOfText(line);\n        });\n        helpers$1.each(bodyItem.after, fillLineOfText);\n      }); // Reset back to 0 for after body\n\n      xLinePadding = 0; // After body lines\n\n      helpers$1.each(vm.afterBody, fillLineOfText);\n      pt.y -= bodySpacing; // Remove last body spacing\n    },\n    drawFooter: function drawFooter(pt, vm, ctx) {\n      var footer = vm.footer;\n\n      if (footer.length) {\n        pt.x = getAlignedX(vm, vm._footerAlign);\n        pt.y += vm.footerMarginTop;\n        ctx.textAlign = vm._footerAlign;\n        ctx.textBaseline = 'top';\n        ctx.fillStyle = vm.footerFontColor;\n        ctx.font = helpers$1.fontString(vm.footerFontSize, vm._footerFontStyle, vm._footerFontFamily);\n        helpers$1.each(footer, function (line) {\n          ctx.fillText(line, pt.x, pt.y);\n          pt.y += vm.footerFontSize + vm.footerSpacing;\n        });\n      }\n    },\n    drawBackground: function drawBackground(pt, vm, ctx, tooltipSize) {\n      ctx.fillStyle = vm.backgroundColor;\n      ctx.strokeStyle = vm.borderColor;\n      ctx.lineWidth = vm.borderWidth;\n      var xAlign = vm.xAlign;\n      var yAlign = vm.yAlign;\n      var x = pt.x;\n      var y = pt.y;\n      var width = tooltipSize.width;\n      var height = tooltipSize.height;\n      var radius = vm.cornerRadius;\n      ctx.beginPath();\n      ctx.moveTo(x + radius, y);\n\n      if (yAlign === 'top') {\n        this.drawCaret(pt, tooltipSize);\n      }\n\n      ctx.lineTo(x + width - radius, y);\n      ctx.quadraticCurveTo(x + width, y, x + width, y + radius);\n\n      if (yAlign === 'center' && xAlign === 'right') {\n        this.drawCaret(pt, tooltipSize);\n      }\n\n      ctx.lineTo(x + width, y + height - radius);\n      ctx.quadraticCurveTo(x + width, y + height, x + width - radius, y + height);\n\n      if (yAlign === 'bottom') {\n        this.drawCaret(pt, tooltipSize);\n      }\n\n      ctx.lineTo(x + radius, y + height);\n      ctx.quadraticCurveTo(x, y + height, x, y + height - radius);\n\n      if (yAlign === 'center' && xAlign === 'left') {\n        this.drawCaret(pt, tooltipSize);\n      }\n\n      ctx.lineTo(x, y + radius);\n      ctx.quadraticCurveTo(x, y, x + radius, y);\n      ctx.closePath();\n      ctx.fill();\n\n      if (vm.borderWidth > 0) {\n        ctx.stroke();\n      }\n    },\n    draw: function draw() {\n      var ctx = this._chart.ctx;\n      var vm = this._view;\n\n      if (vm.opacity === 0) {\n        return;\n      }\n\n      var tooltipSize = {\n        width: vm.width,\n        height: vm.height\n      };\n      var pt = {\n        x: vm.x,\n        y: vm.y\n      }; // IE11/Edge does not like very small opacities, so snap to 0\n\n      var opacity = Math.abs(vm.opacity < 1e-3) ? 0 : vm.opacity; // Truthy/falsey value for empty tooltip\n\n      var hasTooltipContent = vm.title.length || vm.beforeBody.length || vm.body.length || vm.afterBody.length || vm.footer.length;\n\n      if (this._options.enabled && hasTooltipContent) {\n        ctx.save();\n        ctx.globalAlpha = opacity; // Draw Background\n\n        this.drawBackground(pt, vm, ctx, tooltipSize); // Draw Title, Body, and Footer\n\n        pt.y += vm.yPadding; // Titles\n\n        this.drawTitle(pt, vm, ctx); // Body\n\n        this.drawBody(pt, vm, ctx); // Footer\n\n        this.drawFooter(pt, vm, ctx);\n        ctx.restore();\n      }\n    },\n\n    /**\n     * Handle an event\n     * @private\n     * @param {IEvent} event - The event to handle\n     * @returns {boolean} true if the tooltip changed\n     */\n    handleEvent: function handleEvent(e) {\n      var me = this;\n      var options = me._options;\n      var changed = false;\n      me._lastActive = me._lastActive || []; // Find Active Elements for tooltips\n\n      if (e.type === 'mouseout') {\n        me._active = [];\n      } else {\n        me._active = me._chart.getElementsAtEventForMode(e, options.mode, options);\n      } // Remember Last Actives\n\n\n      changed = !helpers$1.arrayEquals(me._active, me._lastActive); // Only handle target event on tooltip change\n\n      if (changed) {\n        me._lastActive = me._active;\n\n        if (options.enabled || options.custom) {\n          me._eventPosition = {\n            x: e.x,\n            y: e.y\n          };\n          me.update(true);\n          me.pivot();\n        }\n      }\n\n      return changed;\n    }\n  });\n  /**\n   * @namespace Chart.Tooltip.positioners\n   */\n\n  var positioners_1 = positioners;\n  var core_tooltip = exports$3;\n  core_tooltip.positioners = positioners_1;\n  var valueOrDefault$8 = helpers$1.valueOrDefault;\n\n  core_defaults._set('global', {\n    elements: {},\n    events: ['mousemove', 'mouseout', 'click', 'touchstart', 'touchmove'],\n    hover: {\n      onHover: null,\n      mode: 'nearest',\n      intersect: true,\n      animationDuration: 400\n    },\n    onClick: null,\n    maintainAspectRatio: true,\n    responsive: true,\n    responsiveAnimationDuration: 0\n  });\n  /**\n   * Recursively merge the given config objects representing the `scales` option\n   * by incorporating scale defaults in `xAxes` and `yAxes` array items, then\n   * returns a deep copy of the result, thus doesn't alter inputs.\n   */\n\n\n  function mergeScaleConfig()\n  /* config objects ... */\n  {\n    return helpers$1.merge({}, [].slice.call(arguments), {\n      merger: function merger(key, target, source, options) {\n        if (key === 'xAxes' || key === 'yAxes') {\n          var slen = source[key].length;\n          var i, type, scale;\n\n          if (!target[key]) {\n            target[key] = [];\n          }\n\n          for (i = 0; i < slen; ++i) {\n            scale = source[key][i];\n            type = valueOrDefault$8(scale.type, key === 'xAxes' ? 'category' : 'linear');\n\n            if (i >= target[key].length) {\n              target[key].push({});\n            }\n\n            if (!target[key][i].type || scale.type && scale.type !== target[key][i].type) {\n              // new/untyped scale or type changed: let's apply the new defaults\n              // then merge source scale to correctly overwrite the defaults.\n              helpers$1.merge(target[key][i], [core_scaleService.getScaleDefaults(type), scale]);\n            } else {\n              // scales type are the same\n              helpers$1.merge(target[key][i], scale);\n            }\n          }\n        } else {\n          helpers$1._merger(key, target, source, options);\n        }\n      }\n    });\n  }\n  /**\n   * Recursively merge the given config objects as the root options by handling\n   * default scale options for the `scales` and `scale` properties, then returns\n   * a deep copy of the result, thus doesn't alter inputs.\n   */\n\n\n  function mergeConfig()\n  /* config objects ... */\n  {\n    return helpers$1.merge({}, [].slice.call(arguments), {\n      merger: function merger(key, target, source, options) {\n        var tval = target[key] || {};\n        var sval = source[key];\n\n        if (key === 'scales') {\n          // scale config merging is complex. Add our own function here for that\n          target[key] = mergeScaleConfig(tval, sval);\n        } else if (key === 'scale') {\n          // used in polar area & radar charts since there is only one scale\n          target[key] = helpers$1.merge(tval, [core_scaleService.getScaleDefaults(sval.type), sval]);\n        } else {\n          helpers$1._merger(key, target, source, options);\n        }\n      }\n    });\n  }\n\n  function initConfig(config) {\n    config = config || {}; // Do NOT use mergeConfig for the data object because this method merges arrays\n    // and so would change references to labels and datasets, preventing data updates.\n\n    var data = config.data = config.data || {};\n    data.datasets = data.datasets || [];\n    data.labels = data.labels || [];\n    config.options = mergeConfig(core_defaults.global, core_defaults[config.type], config.options || {});\n    return config;\n  }\n\n  function updateConfig(chart) {\n    var newOptions = chart.options;\n    helpers$1.each(chart.scales, function (scale) {\n      core_layouts.removeBox(chart, scale);\n    });\n    newOptions = mergeConfig(core_defaults.global, core_defaults[chart.config.type], newOptions);\n    chart.options = chart.config.options = newOptions;\n    chart.ensureScalesHaveIDs();\n    chart.buildOrUpdateScales(); // Tooltip\n\n    chart.tooltip._options = newOptions.tooltips;\n    chart.tooltip.initialize();\n  }\n\n  function positionIsHorizontal(position) {\n    return position === 'top' || position === 'bottom';\n  }\n\n  var Chart = function Chart(item, config) {\n    this.construct(item, config);\n    return this;\n  };\n\n  helpers$1.extend(Chart.prototype,\n  /** @lends Chart */\n  {\n    /**\n     * @private\n     */\n    construct: function construct(item, config) {\n      var me = this;\n      config = initConfig(config);\n      var context = platform.acquireContext(item, config);\n      var canvas = context && context.canvas;\n      var height = canvas && canvas.height;\n      var width = canvas && canvas.width;\n      me.id = helpers$1.uid();\n      me.ctx = context;\n      me.canvas = canvas;\n      me.config = config;\n      me.width = width;\n      me.height = height;\n      me.aspectRatio = height ? width / height : null;\n      me.options = config.options;\n      me._bufferedRender = false;\n      /**\n       * Provided for backward compatibility, Chart and Chart.Controller have been merged,\n       * the \"instance\" still need to be defined since it might be called from plugins.\n       * @prop Chart#chart\n       * @deprecated since version 2.6.0\n       * @todo remove at version 3\n       * @private\n       */\n\n      me.chart = me;\n      me.controller = me; // chart.chart.controller #inception\n      // Add the chart instance to the global namespace\n\n      Chart.instances[me.id] = me; // Define alias to the config data: `chart.data === chart.config.data`\n\n      Object.defineProperty(me, 'data', {\n        get: function get() {\n          return me.config.data;\n        },\n        set: function set(value) {\n          me.config.data = value;\n        }\n      });\n\n      if (!context || !canvas) {\n        // The given item is not a compatible context2d element, let's return before finalizing\n        // the chart initialization but after setting basic chart / controller properties that\n        // can help to figure out that the chart is not valid (e.g chart.canvas !== null);\n        // https://github.com/chartjs/Chart.js/issues/2807\n        console.error(\"Failed to create chart: can't acquire context from the given item\");\n        return;\n      }\n\n      me.initialize();\n      me.update();\n    },\n\n    /**\n     * @private\n     */\n    initialize: function initialize() {\n      var me = this; // Before init plugin notification\n\n      core_plugins.notify(me, 'beforeInit');\n      helpers$1.retinaScale(me, me.options.devicePixelRatio);\n      me.bindEvents();\n\n      if (me.options.responsive) {\n        // Initial resize before chart draws (must be silent to preserve initial animations).\n        me.resize(true);\n      } // Make sure scales have IDs and are built before we build any controllers.\n\n\n      me.ensureScalesHaveIDs();\n      me.buildOrUpdateScales();\n      me.initToolTip(); // After init plugin notification\n\n      core_plugins.notify(me, 'afterInit');\n      return me;\n    },\n    clear: function clear() {\n      helpers$1.canvas.clear(this);\n      return this;\n    },\n    stop: function stop() {\n      // Stops any current animation loop occurring\n      core_animations.cancelAnimation(this);\n      return this;\n    },\n    resize: function resize(silent) {\n      var me = this;\n      var options = me.options;\n      var canvas = me.canvas;\n      var aspectRatio = options.maintainAspectRatio && me.aspectRatio || null; // the canvas render width and height will be casted to integers so make sure that\n      // the canvas display style uses the same integer values to avoid blurring effect.\n      // Set to 0 instead of canvas.size because the size defaults to 300x150 if the element is collapsed\n\n      var newWidth = Math.max(0, Math.floor(helpers$1.getMaximumWidth(canvas)));\n      var newHeight = Math.max(0, Math.floor(aspectRatio ? newWidth / aspectRatio : helpers$1.getMaximumHeight(canvas)));\n\n      if (me.width === newWidth && me.height === newHeight) {\n        return;\n      }\n\n      canvas.width = me.width = newWidth;\n      canvas.height = me.height = newHeight;\n      canvas.style.width = newWidth + 'px';\n      canvas.style.height = newHeight + 'px';\n      helpers$1.retinaScale(me, options.devicePixelRatio);\n\n      if (!silent) {\n        // Notify any plugins about the resize\n        var newSize = {\n          width: newWidth,\n          height: newHeight\n        };\n        core_plugins.notify(me, 'resize', [newSize]); // Notify of resize\n\n        if (options.onResize) {\n          options.onResize(me, newSize);\n        }\n\n        me.stop();\n        me.update({\n          duration: options.responsiveAnimationDuration\n        });\n      }\n    },\n    ensureScalesHaveIDs: function ensureScalesHaveIDs() {\n      var options = this.options;\n      var scalesOptions = options.scales || {};\n      var scaleOptions = options.scale;\n      helpers$1.each(scalesOptions.xAxes, function (xAxisOptions, index) {\n        xAxisOptions.id = xAxisOptions.id || 'x-axis-' + index;\n      });\n      helpers$1.each(scalesOptions.yAxes, function (yAxisOptions, index) {\n        yAxisOptions.id = yAxisOptions.id || 'y-axis-' + index;\n      });\n\n      if (scaleOptions) {\n        scaleOptions.id = scaleOptions.id || 'scale';\n      }\n    },\n\n    /**\n     * Builds a map of scale ID to scale object for future lookup.\n     */\n    buildOrUpdateScales: function buildOrUpdateScales() {\n      var me = this;\n      var options = me.options;\n      var scales = me.scales || {};\n      var items = [];\n      var updated = Object.keys(scales).reduce(function (obj, id) {\n        obj[id] = false;\n        return obj;\n      }, {});\n\n      if (options.scales) {\n        items = items.concat((options.scales.xAxes || []).map(function (xAxisOptions) {\n          return {\n            options: xAxisOptions,\n            dtype: 'category',\n            dposition: 'bottom'\n          };\n        }), (options.scales.yAxes || []).map(function (yAxisOptions) {\n          return {\n            options: yAxisOptions,\n            dtype: 'linear',\n            dposition: 'left'\n          };\n        }));\n      }\n\n      if (options.scale) {\n        items.push({\n          options: options.scale,\n          dtype: 'radialLinear',\n          isDefault: true,\n          dposition: 'chartArea'\n        });\n      }\n\n      helpers$1.each(items, function (item) {\n        var scaleOptions = item.options;\n        var id = scaleOptions.id;\n        var scaleType = valueOrDefault$8(scaleOptions.type, item.dtype);\n\n        if (positionIsHorizontal(scaleOptions.position) !== positionIsHorizontal(item.dposition)) {\n          scaleOptions.position = item.dposition;\n        }\n\n        updated[id] = true;\n        var scale = null;\n\n        if (id in scales && scales[id].type === scaleType) {\n          scale = scales[id];\n          scale.options = scaleOptions;\n          scale.ctx = me.ctx;\n          scale.chart = me;\n        } else {\n          var scaleClass = core_scaleService.getScaleConstructor(scaleType);\n\n          if (!scaleClass) {\n            return;\n          }\n\n          scale = new scaleClass({\n            id: id,\n            type: scaleType,\n            options: scaleOptions,\n            ctx: me.ctx,\n            chart: me\n          });\n          scales[scale.id] = scale;\n        }\n\n        scale.mergeTicksOptions(); // TODO(SB): I think we should be able to remove this custom case (options.scale)\n        // and consider it as a regular scale part of the \"scales\"\" map only! This would\n        // make the logic easier and remove some useless? custom code.\n\n        if (item.isDefault) {\n          me.scale = scale;\n        }\n      }); // clear up discarded scales\n\n      helpers$1.each(updated, function (hasUpdated, id) {\n        if (!hasUpdated) {\n          delete scales[id];\n        }\n      });\n      me.scales = scales;\n      core_scaleService.addScalesToLayout(this);\n    },\n    buildOrUpdateControllers: function buildOrUpdateControllers() {\n      var me = this;\n      var newControllers = [];\n      helpers$1.each(me.data.datasets, function (dataset, datasetIndex) {\n        var meta = me.getDatasetMeta(datasetIndex);\n        var type = dataset.type || me.config.type;\n\n        if (meta.type && meta.type !== type) {\n          me.destroyDatasetMeta(datasetIndex);\n          meta = me.getDatasetMeta(datasetIndex);\n        }\n\n        meta.type = type;\n\n        if (meta.controller) {\n          meta.controller.updateIndex(datasetIndex);\n          meta.controller.linkScales();\n        } else {\n          var ControllerClass = controllers[meta.type];\n\n          if (ControllerClass === undefined) {\n            throw new Error('\"' + meta.type + '\" is not a chart type.');\n          }\n\n          meta.controller = new ControllerClass(me, datasetIndex);\n          newControllers.push(meta.controller);\n        }\n      }, me);\n      return newControllers;\n    },\n\n    /**\n     * Reset the elements of all datasets\n     * @private\n     */\n    resetElements: function resetElements() {\n      var me = this;\n      helpers$1.each(me.data.datasets, function (dataset, datasetIndex) {\n        me.getDatasetMeta(datasetIndex).controller.reset();\n      }, me);\n    },\n\n    /**\n    * Resets the chart back to it's state before the initial animation\n    */\n    reset: function reset() {\n      this.resetElements();\n      this.tooltip.initialize();\n    },\n    update: function update(config) {\n      var me = this;\n\n      if (!config || typeof config !== 'object') {\n        // backwards compatibility\n        config = {\n          duration: config,\n          lazy: arguments[1]\n        };\n      }\n\n      updateConfig(me); // plugins options references might have change, let's invalidate the cache\n      // https://github.com/chartjs/Chart.js/issues/5111#issuecomment-355934167\n\n      core_plugins._invalidate(me);\n\n      if (core_plugins.notify(me, 'beforeUpdate') === false) {\n        return;\n      } // In case the entire data object changed\n\n\n      me.tooltip._data = me.data; // Make sure dataset controllers are updated and new controllers are reset\n\n      var newControllers = me.buildOrUpdateControllers(); // Make sure all dataset controllers have correct meta data counts\n\n      helpers$1.each(me.data.datasets, function (dataset, datasetIndex) {\n        me.getDatasetMeta(datasetIndex).controller.buildOrUpdateElements();\n      }, me);\n      me.updateLayout(); // Can only reset the new controllers after the scales have been updated\n\n      if (me.options.animation && me.options.animation.duration) {\n        helpers$1.each(newControllers, function (controller) {\n          controller.reset();\n        });\n      }\n\n      me.updateDatasets(); // Need to reset tooltip in case it is displayed with elements that are removed\n      // after update.\n\n      me.tooltip.initialize(); // Last active contains items that were previously in the tooltip.\n      // When we reset the tooltip, we need to clear it\n\n      me.lastActive = []; // Do this before render so that any plugins that need final scale updates can use it\n\n      core_plugins.notify(me, 'afterUpdate');\n\n      if (me._bufferedRender) {\n        me._bufferedRequest = {\n          duration: config.duration,\n          easing: config.easing,\n          lazy: config.lazy\n        };\n      } else {\n        me.render(config);\n      }\n    },\n\n    /**\n     * Updates the chart layout unless a plugin returns `false` to the `beforeLayout`\n     * hook, in which case, plugins will not be called on `afterLayout`.\n     * @private\n     */\n    updateLayout: function updateLayout() {\n      var me = this;\n\n      if (core_plugins.notify(me, 'beforeLayout') === false) {\n        return;\n      }\n\n      core_layouts.update(this, this.width, this.height);\n      /**\n       * Provided for backward compatibility, use `afterLayout` instead.\n       * @method IPlugin#afterScaleUpdate\n       * @deprecated since version 2.5.0\n       * @todo remove at version 3\n       * @private\n       */\n\n      core_plugins.notify(me, 'afterScaleUpdate');\n      core_plugins.notify(me, 'afterLayout');\n    },\n\n    /**\n     * Updates all datasets unless a plugin returns `false` to the `beforeDatasetsUpdate`\n     * hook, in which case, plugins will not be called on `afterDatasetsUpdate`.\n     * @private\n     */\n    updateDatasets: function updateDatasets() {\n      var me = this;\n\n      if (core_plugins.notify(me, 'beforeDatasetsUpdate') === false) {\n        return;\n      }\n\n      for (var i = 0, ilen = me.data.datasets.length; i < ilen; ++i) {\n        me.updateDataset(i);\n      }\n\n      core_plugins.notify(me, 'afterDatasetsUpdate');\n    },\n\n    /**\n     * Updates dataset at index unless a plugin returns `false` to the `beforeDatasetUpdate`\n     * hook, in which case, plugins will not be called on `afterDatasetUpdate`.\n     * @private\n     */\n    updateDataset: function updateDataset(index) {\n      var me = this;\n      var meta = me.getDatasetMeta(index);\n      var args = {\n        meta: meta,\n        index: index\n      };\n\n      if (core_plugins.notify(me, 'beforeDatasetUpdate', [args]) === false) {\n        return;\n      }\n\n      meta.controller.update();\n      core_plugins.notify(me, 'afterDatasetUpdate', [args]);\n    },\n    render: function render(config) {\n      var me = this;\n\n      if (!config || typeof config !== 'object') {\n        // backwards compatibility\n        config = {\n          duration: config,\n          lazy: arguments[1]\n        };\n      }\n\n      var animationOptions = me.options.animation;\n      var duration = valueOrDefault$8(config.duration, animationOptions && animationOptions.duration);\n      var lazy = config.lazy;\n\n      if (core_plugins.notify(me, 'beforeRender') === false) {\n        return;\n      }\n\n      var onComplete = function onComplete(animation) {\n        core_plugins.notify(me, 'afterRender');\n        helpers$1.callback(animationOptions && animationOptions.onComplete, [animation], me);\n      };\n\n      if (animationOptions && duration) {\n        var animation = new core_animation({\n          numSteps: duration / 16.66,\n          // 60 fps\n          easing: config.easing || animationOptions.easing,\n          render: function render(chart, animationObject) {\n            var easingFunction = helpers$1.easing.effects[animationObject.easing];\n            var currentStep = animationObject.currentStep;\n            var stepDecimal = currentStep / animationObject.numSteps;\n            chart.draw(easingFunction(stepDecimal), stepDecimal, currentStep);\n          },\n          onAnimationProgress: animationOptions.onProgress,\n          onAnimationComplete: onComplete\n        });\n        core_animations.addAnimation(me, animation, duration, lazy);\n      } else {\n        me.draw(); // See https://github.com/chartjs/Chart.js/issues/3781\n\n        onComplete(new core_animation({\n          numSteps: 0,\n          chart: me\n        }));\n      }\n\n      return me;\n    },\n    draw: function draw(easingValue) {\n      var me = this;\n      me.clear();\n\n      if (helpers$1.isNullOrUndef(easingValue)) {\n        easingValue = 1;\n      }\n\n      me.transition(easingValue);\n\n      if (me.width <= 0 || me.height <= 0) {\n        return;\n      }\n\n      if (core_plugins.notify(me, 'beforeDraw', [easingValue]) === false) {\n        return;\n      } // Draw all the scales\n\n\n      helpers$1.each(me.boxes, function (box) {\n        box.draw(me.chartArea);\n      }, me);\n      me.drawDatasets(easingValue);\n\n      me._drawTooltip(easingValue);\n\n      core_plugins.notify(me, 'afterDraw', [easingValue]);\n    },\n\n    /**\n     * @private\n     */\n    transition: function transition(easingValue) {\n      var me = this;\n\n      for (var i = 0, ilen = (me.data.datasets || []).length; i < ilen; ++i) {\n        if (me.isDatasetVisible(i)) {\n          me.getDatasetMeta(i).controller.transition(easingValue);\n        }\n      }\n\n      me.tooltip.transition(easingValue);\n    },\n\n    /**\n     * Draws all datasets unless a plugin returns `false` to the `beforeDatasetsDraw`\n     * hook, in which case, plugins will not be called on `afterDatasetsDraw`.\n     * @private\n     */\n    drawDatasets: function drawDatasets(easingValue) {\n      var me = this;\n\n      if (core_plugins.notify(me, 'beforeDatasetsDraw', [easingValue]) === false) {\n        return;\n      } // Draw datasets reversed to support proper line stacking\n\n\n      for (var i = (me.data.datasets || []).length - 1; i >= 0; --i) {\n        if (me.isDatasetVisible(i)) {\n          me.drawDataset(i, easingValue);\n        }\n      }\n\n      core_plugins.notify(me, 'afterDatasetsDraw', [easingValue]);\n    },\n\n    /**\n     * Draws dataset at index unless a plugin returns `false` to the `beforeDatasetDraw`\n     * hook, in which case, plugins will not be called on `afterDatasetDraw`.\n     * @private\n     */\n    drawDataset: function drawDataset(index, easingValue) {\n      var me = this;\n      var meta = me.getDatasetMeta(index);\n      var args = {\n        meta: meta,\n        index: index,\n        easingValue: easingValue\n      };\n\n      if (core_plugins.notify(me, 'beforeDatasetDraw', [args]) === false) {\n        return;\n      }\n\n      meta.controller.draw(easingValue);\n      core_plugins.notify(me, 'afterDatasetDraw', [args]);\n    },\n\n    /**\n     * Draws tooltip unless a plugin returns `false` to the `beforeTooltipDraw`\n     * hook, in which case, plugins will not be called on `afterTooltipDraw`.\n     * @private\n     */\n    _drawTooltip: function _drawTooltip(easingValue) {\n      var me = this;\n      var tooltip = me.tooltip;\n      var args = {\n        tooltip: tooltip,\n        easingValue: easingValue\n      };\n\n      if (core_plugins.notify(me, 'beforeTooltipDraw', [args]) === false) {\n        return;\n      }\n\n      tooltip.draw();\n      core_plugins.notify(me, 'afterTooltipDraw', [args]);\n    },\n\n    /**\n     * Get the single element that was clicked on\n     * @return An object containing the dataset index and element index of the matching element. Also contains the rectangle that was draw\n     */\n    getElementAtEvent: function getElementAtEvent(e) {\n      return core_interaction.modes.single(this, e);\n    },\n    getElementsAtEvent: function getElementsAtEvent(e) {\n      return core_interaction.modes.label(this, e, {\n        intersect: true\n      });\n    },\n    getElementsAtXAxis: function getElementsAtXAxis(e) {\n      return core_interaction.modes['x-axis'](this, e, {\n        intersect: true\n      });\n    },\n    getElementsAtEventForMode: function getElementsAtEventForMode(e, mode, options) {\n      var method = core_interaction.modes[mode];\n\n      if (typeof method === 'function') {\n        return method(this, e, options);\n      }\n\n      return [];\n    },\n    getDatasetAtEvent: function getDatasetAtEvent(e) {\n      return core_interaction.modes.dataset(this, e, {\n        intersect: true\n      });\n    },\n    getDatasetMeta: function getDatasetMeta(datasetIndex) {\n      var me = this;\n      var dataset = me.data.datasets[datasetIndex];\n\n      if (!dataset._meta) {\n        dataset._meta = {};\n      }\n\n      var meta = dataset._meta[me.id];\n\n      if (!meta) {\n        meta = dataset._meta[me.id] = {\n          type: null,\n          data: [],\n          dataset: null,\n          controller: null,\n          hidden: null,\n          // See isDatasetVisible() comment\n          xAxisID: null,\n          yAxisID: null\n        };\n      }\n\n      return meta;\n    },\n    getVisibleDatasetCount: function getVisibleDatasetCount() {\n      var count = 0;\n\n      for (var i = 0, ilen = this.data.datasets.length; i < ilen; ++i) {\n        if (this.isDatasetVisible(i)) {\n          count++;\n        }\n      }\n\n      return count;\n    },\n    isDatasetVisible: function isDatasetVisible(datasetIndex) {\n      var meta = this.getDatasetMeta(datasetIndex); // meta.hidden is a per chart dataset hidden flag override with 3 states: if true or false,\n      // the dataset.hidden value is ignored, else if null, the dataset hidden state is returned.\n\n      return typeof meta.hidden === 'boolean' ? !meta.hidden : !this.data.datasets[datasetIndex].hidden;\n    },\n    generateLegend: function generateLegend() {\n      return this.options.legendCallback(this);\n    },\n\n    /**\n     * @private\n     */\n    destroyDatasetMeta: function destroyDatasetMeta(datasetIndex) {\n      var id = this.id;\n      var dataset = this.data.datasets[datasetIndex];\n      var meta = dataset._meta && dataset._meta[id];\n\n      if (meta) {\n        meta.controller.destroy();\n        delete dataset._meta[id];\n      }\n    },\n    destroy: function destroy() {\n      var me = this;\n      var canvas = me.canvas;\n      var i, ilen;\n      me.stop(); // dataset controllers need to cleanup associated data\n\n      for (i = 0, ilen = me.data.datasets.length; i < ilen; ++i) {\n        me.destroyDatasetMeta(i);\n      }\n\n      if (canvas) {\n        me.unbindEvents();\n        helpers$1.canvas.clear(me);\n        platform.releaseContext(me.ctx);\n        me.canvas = null;\n        me.ctx = null;\n      }\n\n      core_plugins.notify(me, 'destroy');\n      delete Chart.instances[me.id];\n    },\n    toBase64Image: function toBase64Image() {\n      return this.canvas.toDataURL.apply(this.canvas, arguments);\n    },\n    initToolTip: function initToolTip() {\n      var me = this;\n      me.tooltip = new core_tooltip({\n        _chart: me,\n        _chartInstance: me,\n        // deprecated, backward compatibility\n        _data: me.data,\n        _options: me.options.tooltips\n      }, me);\n    },\n\n    /**\n     * @private\n     */\n    bindEvents: function bindEvents() {\n      var me = this;\n      var listeners = me._listeners = {};\n\n      var listener = function listener() {\n        me.eventHandler.apply(me, arguments);\n      };\n\n      helpers$1.each(me.options.events, function (type) {\n        platform.addEventListener(me, type, listener);\n        listeners[type] = listener;\n      }); // Elements used to detect size change should not be injected for non responsive charts.\n      // See https://github.com/chartjs/Chart.js/issues/2210\n\n      if (me.options.responsive) {\n        listener = function listener() {\n          me.resize();\n        };\n\n        platform.addEventListener(me, 'resize', listener);\n        listeners.resize = listener;\n      }\n    },\n\n    /**\n     * @private\n     */\n    unbindEvents: function unbindEvents() {\n      var me = this;\n      var listeners = me._listeners;\n\n      if (!listeners) {\n        return;\n      }\n\n      delete me._listeners;\n      helpers$1.each(listeners, function (listener, type) {\n        platform.removeEventListener(me, type, listener);\n      });\n    },\n    updateHoverStyle: function updateHoverStyle(elements, mode, enabled) {\n      var method = enabled ? 'setHoverStyle' : 'removeHoverStyle';\n      var element, i, ilen;\n\n      for (i = 0, ilen = elements.length; i < ilen; ++i) {\n        element = elements[i];\n\n        if (element) {\n          this.getDatasetMeta(element._datasetIndex).controller[method](element);\n        }\n      }\n    },\n\n    /**\n     * @private\n     */\n    eventHandler: function eventHandler(e) {\n      var me = this;\n      var tooltip = me.tooltip;\n\n      if (core_plugins.notify(me, 'beforeEvent', [e]) === false) {\n        return;\n      } // Buffer any update calls so that renders do not occur\n\n\n      me._bufferedRender = true;\n      me._bufferedRequest = null;\n      var changed = me.handleEvent(e); // for smooth tooltip animations issue #4989\n      // the tooltip should be the source of change\n      // Animation check workaround:\n      // tooltip._start will be null when tooltip isn't animating\n\n      if (tooltip) {\n        changed = tooltip._start ? tooltip.handleEvent(e) : changed | tooltip.handleEvent(e);\n      }\n\n      core_plugins.notify(me, 'afterEvent', [e]);\n      var bufferedRequest = me._bufferedRequest;\n\n      if (bufferedRequest) {\n        // If we have an update that was triggered, we need to do a normal render\n        me.render(bufferedRequest);\n      } else if (changed && !me.animating) {\n        // If entering, leaving, or changing elements, animate the change via pivot\n        me.stop(); // We only need to render at this point. Updating will cause scales to be\n        // recomputed generating flicker & using more memory than necessary.\n\n        me.render({\n          duration: me.options.hover.animationDuration,\n          lazy: true\n        });\n      }\n\n      me._bufferedRender = false;\n      me._bufferedRequest = null;\n      return me;\n    },\n\n    /**\n     * Handle an event\n     * @private\n     * @param {IEvent} event the event to handle\n     * @return {boolean} true if the chart needs to re-render\n     */\n    handleEvent: function handleEvent(e) {\n      var me = this;\n      var options = me.options || {};\n      var hoverOptions = options.hover;\n      var changed = false;\n      me.lastActive = me.lastActive || []; // Find Active Elements for hover and tooltips\n\n      if (e.type === 'mouseout') {\n        me.active = [];\n      } else {\n        me.active = me.getElementsAtEventForMode(e, hoverOptions.mode, hoverOptions);\n      } // Invoke onHover hook\n      // Need to call with native event here to not break backwards compatibility\n\n\n      helpers$1.callback(options.onHover || options.hover.onHover, [e.native, me.active], me);\n\n      if (e.type === 'mouseup' || e.type === 'click') {\n        if (options.onClick) {\n          // Use e.native here for backwards compatibility\n          options.onClick.call(me, e.native, me.active);\n        }\n      } // Remove styling for last active (even if it may still be active)\n\n\n      if (me.lastActive.length) {\n        me.updateHoverStyle(me.lastActive, hoverOptions.mode, false);\n      } // Built in hover styling\n\n\n      if (me.active.length && hoverOptions.mode) {\n        me.updateHoverStyle(me.active, hoverOptions.mode, true);\n      }\n\n      changed = !helpers$1.arrayEquals(me.active, me.lastActive); // Remember Last Actives\n\n      me.lastActive = me.active;\n      return changed;\n    }\n  });\n  /**\n   * NOTE(SB) We actually don't use this container anymore but we need to keep it\n   * for backward compatibility. Though, it can still be useful for plugins that\n   * would need to work on multiple charts?!\n   */\n\n  Chart.instances = {};\n  var core_controller = Chart; // DEPRECATIONS\n\n  /**\n   * Provided for backward compatibility, use Chart instead.\n   * @class Chart.Controller\n   * @deprecated since version 2.6\n   * @todo remove at version 3\n   * @private\n   */\n\n  Chart.Controller = Chart;\n  /**\n   * Provided for backward compatibility, not available anymore.\n   * @namespace Chart\n   * @deprecated since version 2.8\n   * @todo remove at version 3\n   * @private\n   */\n\n  Chart.types = {};\n  /**\n   * Provided for backward compatibility, not available anymore.\n   * @namespace Chart.helpers.configMerge\n   * @deprecated since version 2.8.0\n   * @todo remove at version 3\n   * @private\n   */\n\n  helpers$1.configMerge = mergeConfig;\n  /**\n   * Provided for backward compatibility, not available anymore.\n   * @namespace Chart.helpers.scaleMerge\n   * @deprecated since version 2.8.0\n   * @todo remove at version 3\n   * @private\n   */\n\n  helpers$1.scaleMerge = mergeScaleConfig;\n\n  var core_helpers = function core_helpers() {\n    // -- Basic js utility methods\n    helpers$1.where = function (collection, filterCallback) {\n      if (helpers$1.isArray(collection) && Array.prototype.filter) {\n        return collection.filter(filterCallback);\n      }\n\n      var filtered = [];\n      helpers$1.each(collection, function (item) {\n        if (filterCallback(item)) {\n          filtered.push(item);\n        }\n      });\n      return filtered;\n    };\n\n    helpers$1.findIndex = Array.prototype.findIndex ? function (array, callback, scope) {\n      return array.findIndex(callback, scope);\n    } : function (array, callback, scope) {\n      scope = scope === undefined ? array : scope;\n\n      for (var i = 0, ilen = array.length; i < ilen; ++i) {\n        if (callback.call(scope, array[i], i, array)) {\n          return i;\n        }\n      }\n\n      return -1;\n    };\n\n    helpers$1.findNextWhere = function (arrayToSearch, filterCallback, startIndex) {\n      // Default to start of the array\n      if (helpers$1.isNullOrUndef(startIndex)) {\n        startIndex = -1;\n      }\n\n      for (var i = startIndex + 1; i < arrayToSearch.length; i++) {\n        var currentItem = arrayToSearch[i];\n\n        if (filterCallback(currentItem)) {\n          return currentItem;\n        }\n      }\n    };\n\n    helpers$1.findPreviousWhere = function (arrayToSearch, filterCallback, startIndex) {\n      // Default to end of the array\n      if (helpers$1.isNullOrUndef(startIndex)) {\n        startIndex = arrayToSearch.length;\n      }\n\n      for (var i = startIndex - 1; i >= 0; i--) {\n        var currentItem = arrayToSearch[i];\n\n        if (filterCallback(currentItem)) {\n          return currentItem;\n        }\n      }\n    }; // -- Math methods\n\n\n    helpers$1.isNumber = function (n) {\n      return !isNaN(parseFloat(n)) && isFinite(n);\n    };\n\n    helpers$1.almostEquals = function (x, y, epsilon) {\n      return Math.abs(x - y) < epsilon;\n    };\n\n    helpers$1.almostWhole = function (x, epsilon) {\n      var rounded = Math.round(x);\n      return rounded - epsilon < x && rounded + epsilon > x;\n    };\n\n    helpers$1.max = function (array) {\n      return array.reduce(function (max, value) {\n        if (!isNaN(value)) {\n          return Math.max(max, value);\n        }\n\n        return max;\n      }, Number.NEGATIVE_INFINITY);\n    };\n\n    helpers$1.min = function (array) {\n      return array.reduce(function (min, value) {\n        if (!isNaN(value)) {\n          return Math.min(min, value);\n        }\n\n        return min;\n      }, Number.POSITIVE_INFINITY);\n    };\n\n    helpers$1.sign = Math.sign ? function (x) {\n      return Math.sign(x);\n    } : function (x) {\n      x = +x; // convert to a number\n\n      if (x === 0 || isNaN(x)) {\n        return x;\n      }\n\n      return x > 0 ? 1 : -1;\n    };\n    helpers$1.log10 = Math.log10 ? function (x) {\n      return Math.log10(x);\n    } : function (x) {\n      var exponent = Math.log(x) * Math.LOG10E; // Math.LOG10E = 1 / Math.LN10.\n      // Check for whole powers of 10,\n      // which due to floating point rounding error should be corrected.\n\n      var powerOf10 = Math.round(exponent);\n      var isPowerOf10 = x === Math.pow(10, powerOf10);\n      return isPowerOf10 ? powerOf10 : exponent;\n    };\n\n    helpers$1.toRadians = function (degrees) {\n      return degrees * (Math.PI / 180);\n    };\n\n    helpers$1.toDegrees = function (radians) {\n      return radians * (180 / Math.PI);\n    };\n    /**\n     * Returns the number of decimal places\n     * i.e. the number of digits after the decimal point, of the value of this Number.\n     * @param {number} x - A number.\n     * @returns {number} The number of decimal places.\n     * @private\n     */\n\n\n    helpers$1._decimalPlaces = function (x) {\n      if (!helpers$1.isFinite(x)) {\n        return;\n      }\n\n      var e = 1;\n      var p = 0;\n\n      while (Math.round(x * e) / e !== x) {\n        e *= 10;\n        p++;\n      }\n\n      return p;\n    }; // Gets the angle from vertical upright to the point about a centre.\n\n\n    helpers$1.getAngleFromPoint = function (centrePoint, anglePoint) {\n      var distanceFromXCenter = anglePoint.x - centrePoint.x;\n      var distanceFromYCenter = anglePoint.y - centrePoint.y;\n      var radialDistanceFromCenter = Math.sqrt(distanceFromXCenter * distanceFromXCenter + distanceFromYCenter * distanceFromYCenter);\n      var angle = Math.atan2(distanceFromYCenter, distanceFromXCenter);\n\n      if (angle < -0.5 * Math.PI) {\n        angle += 2.0 * Math.PI; // make sure the returned angle is in the range of (-PI/2, 3PI/2]\n      }\n\n      return {\n        angle: angle,\n        distance: radialDistanceFromCenter\n      };\n    };\n\n    helpers$1.distanceBetweenPoints = function (pt1, pt2) {\n      return Math.sqrt(Math.pow(pt2.x - pt1.x, 2) + Math.pow(pt2.y - pt1.y, 2));\n    };\n    /**\n     * Provided for backward compatibility, not available anymore\n     * @function Chart.helpers.aliasPixel\n     * @deprecated since version 2.8.0\n     * @todo remove at version 3\n     */\n\n\n    helpers$1.aliasPixel = function (pixelWidth) {\n      return pixelWidth % 2 === 0 ? 0 : 0.5;\n    };\n    /**\n     * Returns the aligned pixel value to avoid anti-aliasing blur\n     * @param {Chart} chart - The chart instance.\n     * @param {number} pixel - A pixel value.\n     * @param {number} width - The width of the element.\n     * @returns {number} The aligned pixel value.\n     * @private\n     */\n\n\n    helpers$1._alignPixel = function (chart, pixel, width) {\n      var devicePixelRatio = chart.currentDevicePixelRatio;\n      var halfWidth = width / 2;\n      return Math.round((pixel - halfWidth) * devicePixelRatio) / devicePixelRatio + halfWidth;\n    };\n\n    helpers$1.splineCurve = function (firstPoint, middlePoint, afterPoint, t) {\n      // Props to Rob Spencer at scaled innovation for his post on splining between points\n      // http://scaledinnovation.com/analytics/splines/aboutSplines.html\n      // This function must also respect \"skipped\" points\n      var previous = firstPoint.skip ? middlePoint : firstPoint;\n      var current = middlePoint;\n      var next = afterPoint.skip ? middlePoint : afterPoint;\n      var d01 = Math.sqrt(Math.pow(current.x - previous.x, 2) + Math.pow(current.y - previous.y, 2));\n      var d12 = Math.sqrt(Math.pow(next.x - current.x, 2) + Math.pow(next.y - current.y, 2));\n      var s01 = d01 / (d01 + d12);\n      var s12 = d12 / (d01 + d12); // If all points are the same, s01 & s02 will be inf\n\n      s01 = isNaN(s01) ? 0 : s01;\n      s12 = isNaN(s12) ? 0 : s12;\n      var fa = t * s01; // scaling factor for triangle Ta\n\n      var fb = t * s12;\n      return {\n        previous: {\n          x: current.x - fa * (next.x - previous.x),\n          y: current.y - fa * (next.y - previous.y)\n        },\n        next: {\n          x: current.x + fb * (next.x - previous.x),\n          y: current.y + fb * (next.y - previous.y)\n        }\n      };\n    };\n\n    helpers$1.EPSILON = Number.EPSILON || 1e-14;\n\n    helpers$1.splineCurveMonotone = function (points) {\n      // This function calculates Bézier control points in a similar way than |splineCurve|,\n      // but preserves monotonicity of the provided data and ensures no local extremums are added\n      // between the dataset discrete points due to the interpolation.\n      // See : https://en.wikipedia.org/wiki/Monotone_cubic_interpolation\n      var pointsWithTangents = (points || []).map(function (point) {\n        return {\n          model: point._model,\n          deltaK: 0,\n          mK: 0\n        };\n      }); // Calculate slopes (deltaK) and initialize tangents (mK)\n\n      var pointsLen = pointsWithTangents.length;\n      var i, pointBefore, pointCurrent, pointAfter;\n\n      for (i = 0; i < pointsLen; ++i) {\n        pointCurrent = pointsWithTangents[i];\n\n        if (pointCurrent.model.skip) {\n          continue;\n        }\n\n        pointBefore = i > 0 ? pointsWithTangents[i - 1] : null;\n        pointAfter = i < pointsLen - 1 ? pointsWithTangents[i + 1] : null;\n\n        if (pointAfter && !pointAfter.model.skip) {\n          var slopeDeltaX = pointAfter.model.x - pointCurrent.model.x; // In the case of two points that appear at the same x pixel, slopeDeltaX is 0\n\n          pointCurrent.deltaK = slopeDeltaX !== 0 ? (pointAfter.model.y - pointCurrent.model.y) / slopeDeltaX : 0;\n        }\n\n        if (!pointBefore || pointBefore.model.skip) {\n          pointCurrent.mK = pointCurrent.deltaK;\n        } else if (!pointAfter || pointAfter.model.skip) {\n          pointCurrent.mK = pointBefore.deltaK;\n        } else if (this.sign(pointBefore.deltaK) !== this.sign(pointCurrent.deltaK)) {\n          pointCurrent.mK = 0;\n        } else {\n          pointCurrent.mK = (pointBefore.deltaK + pointCurrent.deltaK) / 2;\n        }\n      } // Adjust tangents to ensure monotonic properties\n\n\n      var alphaK, betaK, tauK, squaredMagnitude;\n\n      for (i = 0; i < pointsLen - 1; ++i) {\n        pointCurrent = pointsWithTangents[i];\n        pointAfter = pointsWithTangents[i + 1];\n\n        if (pointCurrent.model.skip || pointAfter.model.skip) {\n          continue;\n        }\n\n        if (helpers$1.almostEquals(pointCurrent.deltaK, 0, this.EPSILON)) {\n          pointCurrent.mK = pointAfter.mK = 0;\n          continue;\n        }\n\n        alphaK = pointCurrent.mK / pointCurrent.deltaK;\n        betaK = pointAfter.mK / pointCurrent.deltaK;\n        squaredMagnitude = Math.pow(alphaK, 2) + Math.pow(betaK, 2);\n\n        if (squaredMagnitude <= 9) {\n          continue;\n        }\n\n        tauK = 3 / Math.sqrt(squaredMagnitude);\n        pointCurrent.mK = alphaK * tauK * pointCurrent.deltaK;\n        pointAfter.mK = betaK * tauK * pointCurrent.deltaK;\n      } // Compute control points\n\n\n      var deltaX;\n\n      for (i = 0; i < pointsLen; ++i) {\n        pointCurrent = pointsWithTangents[i];\n\n        if (pointCurrent.model.skip) {\n          continue;\n        }\n\n        pointBefore = i > 0 ? pointsWithTangents[i - 1] : null;\n        pointAfter = i < pointsLen - 1 ? pointsWithTangents[i + 1] : null;\n\n        if (pointBefore && !pointBefore.model.skip) {\n          deltaX = (pointCurrent.model.x - pointBefore.model.x) / 3;\n          pointCurrent.model.controlPointPreviousX = pointCurrent.model.x - deltaX;\n          pointCurrent.model.controlPointPreviousY = pointCurrent.model.y - deltaX * pointCurrent.mK;\n        }\n\n        if (pointAfter && !pointAfter.model.skip) {\n          deltaX = (pointAfter.model.x - pointCurrent.model.x) / 3;\n          pointCurrent.model.controlPointNextX = pointCurrent.model.x + deltaX;\n          pointCurrent.model.controlPointNextY = pointCurrent.model.y + deltaX * pointCurrent.mK;\n        }\n      }\n    };\n\n    helpers$1.nextItem = function (collection, index, loop) {\n      if (loop) {\n        return index >= collection.length - 1 ? collection[0] : collection[index + 1];\n      }\n\n      return index >= collection.length - 1 ? collection[collection.length - 1] : collection[index + 1];\n    };\n\n    helpers$1.previousItem = function (collection, index, loop) {\n      if (loop) {\n        return index <= 0 ? collection[collection.length - 1] : collection[index - 1];\n      }\n\n      return index <= 0 ? collection[0] : collection[index - 1];\n    }; // Implementation of the nice number algorithm used in determining where axis labels will go\n\n\n    helpers$1.niceNum = function (range, round) {\n      var exponent = Math.floor(helpers$1.log10(range));\n      var fraction = range / Math.pow(10, exponent);\n      var niceFraction;\n\n      if (round) {\n        if (fraction < 1.5) {\n          niceFraction = 1;\n        } else if (fraction < 3) {\n          niceFraction = 2;\n        } else if (fraction < 7) {\n          niceFraction = 5;\n        } else {\n          niceFraction = 10;\n        }\n      } else if (fraction <= 1.0) {\n        niceFraction = 1;\n      } else if (fraction <= 2) {\n        niceFraction = 2;\n      } else if (fraction <= 5) {\n        niceFraction = 5;\n      } else {\n        niceFraction = 10;\n      }\n\n      return niceFraction * Math.pow(10, exponent);\n    }; // Request animation polyfill - https://www.paulirish.com/2011/requestanimationframe-for-smart-animating/\n\n\n    helpers$1.requestAnimFrame = function () {\n      if (typeof window === 'undefined') {\n        return function (callback) {\n          callback();\n        };\n      }\n\n      return window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || window.msRequestAnimationFrame || function (callback) {\n        return window.setTimeout(callback, 1000 / 60);\n      };\n    }(); // -- DOM methods\n\n\n    helpers$1.getRelativePosition = function (evt, chart) {\n      var mouseX, mouseY;\n      var e = evt.originalEvent || evt;\n      var canvas = evt.target || evt.srcElement;\n      var boundingRect = canvas.getBoundingClientRect();\n      var touches = e.touches;\n\n      if (touches && touches.length > 0) {\n        mouseX = touches[0].clientX;\n        mouseY = touches[0].clientY;\n      } else {\n        mouseX = e.clientX;\n        mouseY = e.clientY;\n      } // Scale mouse coordinates into canvas coordinates\n      // by following the pattern laid out by 'jerryj' in the comments of\n      // https://www.html5canvastutorials.com/advanced/html5-canvas-mouse-coordinates/\n\n\n      var paddingLeft = parseFloat(helpers$1.getStyle(canvas, 'padding-left'));\n      var paddingTop = parseFloat(helpers$1.getStyle(canvas, 'padding-top'));\n      var paddingRight = parseFloat(helpers$1.getStyle(canvas, 'padding-right'));\n      var paddingBottom = parseFloat(helpers$1.getStyle(canvas, 'padding-bottom'));\n      var width = boundingRect.right - boundingRect.left - paddingLeft - paddingRight;\n      var height = boundingRect.bottom - boundingRect.top - paddingTop - paddingBottom; // We divide by the current device pixel ratio, because the canvas is scaled up by that amount in each direction. However\n      // the backend model is in unscaled coordinates. Since we are going to deal with our model coordinates, we go back here\n\n      mouseX = Math.round((mouseX - boundingRect.left - paddingLeft) / width * canvas.width / chart.currentDevicePixelRatio);\n      mouseY = Math.round((mouseY - boundingRect.top - paddingTop) / height * canvas.height / chart.currentDevicePixelRatio);\n      return {\n        x: mouseX,\n        y: mouseY\n      };\n    }; // Private helper function to convert max-width/max-height values that may be percentages into a number\n\n\n    function parseMaxStyle(styleValue, node, parentProperty) {\n      var valueInPixels;\n\n      if (typeof styleValue === 'string') {\n        valueInPixels = parseInt(styleValue, 10);\n\n        if (styleValue.indexOf('%') !== -1) {\n          // percentage * size in dimension\n          valueInPixels = valueInPixels / 100 * node.parentNode[parentProperty];\n        }\n      } else {\n        valueInPixels = styleValue;\n      }\n\n      return valueInPixels;\n    }\n    /**\n     * Returns if the given value contains an effective constraint.\n     * @private\n     */\n\n\n    function isConstrainedValue(value) {\n      return value !== undefined && value !== null && value !== 'none';\n    }\n    /**\n     * Returns the max width or height of the given DOM node in a cross-browser compatible fashion\n     * @param {HTMLElement} domNode - the node to check the constraint on\n     * @param {string} maxStyle - the style that defines the maximum for the direction we are using ('max-width' / 'max-height')\n     * @param {string} percentageProperty - property of parent to use when calculating width as a percentage\n     * @see {@link https://www.nathanaeljones.com/blog/2013/reading-max-width-cross-browser}\n     */\n\n\n    function getConstraintDimension(domNode, maxStyle, percentageProperty) {\n      var view = document.defaultView;\n\n      var parentNode = helpers$1._getParentNode(domNode);\n\n      var constrainedNode = view.getComputedStyle(domNode)[maxStyle];\n      var constrainedContainer = view.getComputedStyle(parentNode)[maxStyle];\n      var hasCNode = isConstrainedValue(constrainedNode);\n      var hasCContainer = isConstrainedValue(constrainedContainer);\n      var infinity = Number.POSITIVE_INFINITY;\n\n      if (hasCNode || hasCContainer) {\n        return Math.min(hasCNode ? parseMaxStyle(constrainedNode, domNode, percentageProperty) : infinity, hasCContainer ? parseMaxStyle(constrainedContainer, parentNode, percentageProperty) : infinity);\n      }\n\n      return 'none';\n    } // returns Number or undefined if no constraint\n\n\n    helpers$1.getConstraintWidth = function (domNode) {\n      return getConstraintDimension(domNode, 'max-width', 'clientWidth');\n    }; // returns Number or undefined if no constraint\n\n\n    helpers$1.getConstraintHeight = function (domNode) {\n      return getConstraintDimension(domNode, 'max-height', 'clientHeight');\n    };\n    /**\n     * @private\n    \t */\n\n\n    helpers$1._calculatePadding = function (container, padding, parentDimension) {\n      padding = helpers$1.getStyle(container, padding);\n      return padding.indexOf('%') > -1 ? parentDimension * parseInt(padding, 10) / 100 : parseInt(padding, 10);\n    };\n    /**\n     * @private\n     */\n\n\n    helpers$1._getParentNode = function (domNode) {\n      var parent = domNode.parentNode;\n\n      if (parent && parent.toString() === '[object ShadowRoot]') {\n        parent = parent.host;\n      }\n\n      return parent;\n    };\n\n    helpers$1.getMaximumWidth = function (domNode) {\n      var container = helpers$1._getParentNode(domNode);\n\n      if (!container) {\n        return domNode.clientWidth;\n      }\n\n      var clientWidth = container.clientWidth;\n\n      var paddingLeft = helpers$1._calculatePadding(container, 'padding-left', clientWidth);\n\n      var paddingRight = helpers$1._calculatePadding(container, 'padding-right', clientWidth);\n\n      var w = clientWidth - paddingLeft - paddingRight;\n      var cw = helpers$1.getConstraintWidth(domNode);\n      return isNaN(cw) ? w : Math.min(w, cw);\n    };\n\n    helpers$1.getMaximumHeight = function (domNode) {\n      var container = helpers$1._getParentNode(domNode);\n\n      if (!container) {\n        return domNode.clientHeight;\n      }\n\n      var clientHeight = container.clientHeight;\n\n      var paddingTop = helpers$1._calculatePadding(container, 'padding-top', clientHeight);\n\n      var paddingBottom = helpers$1._calculatePadding(container, 'padding-bottom', clientHeight);\n\n      var h = clientHeight - paddingTop - paddingBottom;\n      var ch = helpers$1.getConstraintHeight(domNode);\n      return isNaN(ch) ? h : Math.min(h, ch);\n    };\n\n    helpers$1.getStyle = function (el, property) {\n      return el.currentStyle ? el.currentStyle[property] : document.defaultView.getComputedStyle(el, null).getPropertyValue(property);\n    };\n\n    helpers$1.retinaScale = function (chart, forceRatio) {\n      var pixelRatio = chart.currentDevicePixelRatio = forceRatio || typeof window !== 'undefined' && window.devicePixelRatio || 1;\n\n      if (pixelRatio === 1) {\n        return;\n      }\n\n      var canvas = chart.canvas;\n      var height = chart.height;\n      var width = chart.width;\n      canvas.height = height * pixelRatio;\n      canvas.width = width * pixelRatio;\n      chart.ctx.scale(pixelRatio, pixelRatio); // If no style has been set on the canvas, the render size is used as display size,\n      // making the chart visually bigger, so let's enforce it to the \"correct\" values.\n      // See https://github.com/chartjs/Chart.js/issues/3575\n\n      if (!canvas.style.height && !canvas.style.width) {\n        canvas.style.height = height + 'px';\n        canvas.style.width = width + 'px';\n      }\n    }; // -- Canvas methods\n\n\n    helpers$1.fontString = function (pixelSize, fontStyle, fontFamily) {\n      return fontStyle + ' ' + pixelSize + 'px ' + fontFamily;\n    };\n\n    helpers$1.longestText = function (ctx, font, arrayOfThings, cache) {\n      cache = cache || {};\n      var data = cache.data = cache.data || {};\n      var gc = cache.garbageCollect = cache.garbageCollect || [];\n\n      if (cache.font !== font) {\n        data = cache.data = {};\n        gc = cache.garbageCollect = [];\n        cache.font = font;\n      }\n\n      ctx.font = font;\n      var longest = 0;\n      helpers$1.each(arrayOfThings, function (thing) {\n        // Undefined strings and arrays should not be measured\n        if (thing !== undefined && thing !== null && helpers$1.isArray(thing) !== true) {\n          longest = helpers$1.measureText(ctx, data, gc, longest, thing);\n        } else if (helpers$1.isArray(thing)) {\n          // if it is an array lets measure each element\n          // to do maybe simplify this function a bit so we can do this more recursively?\n          helpers$1.each(thing, function (nestedThing) {\n            // Undefined strings and arrays should not be measured\n            if (nestedThing !== undefined && nestedThing !== null && !helpers$1.isArray(nestedThing)) {\n              longest = helpers$1.measureText(ctx, data, gc, longest, nestedThing);\n            }\n          });\n        }\n      });\n      var gcLen = gc.length / 2;\n\n      if (gcLen > arrayOfThings.length) {\n        for (var i = 0; i < gcLen; i++) {\n          delete data[gc[i]];\n        }\n\n        gc.splice(0, gcLen);\n      }\n\n      return longest;\n    };\n\n    helpers$1.measureText = function (ctx, data, gc, longest, string) {\n      var textWidth = data[string];\n\n      if (!textWidth) {\n        textWidth = data[string] = ctx.measureText(string).width;\n        gc.push(string);\n      }\n\n      if (textWidth > longest) {\n        longest = textWidth;\n      }\n\n      return longest;\n    };\n\n    helpers$1.numberOfLabelLines = function (arrayOfThings) {\n      var numberOfLines = 1;\n      helpers$1.each(arrayOfThings, function (thing) {\n        if (helpers$1.isArray(thing)) {\n          if (thing.length > numberOfLines) {\n            numberOfLines = thing.length;\n          }\n        }\n      });\n      return numberOfLines;\n    };\n\n    helpers$1.color = !chartjsColor ? function (value) {\n      console.error('Color.js not found!');\n      return value;\n    } : function (value) {\n      /* global CanvasGradient */\n      if (value instanceof CanvasGradient) {\n        value = core_defaults.global.defaultColor;\n      }\n\n      return chartjsColor(value);\n    };\n\n    helpers$1.getHoverColor = function (colorValue) {\n      /* global CanvasPattern */\n      return colorValue instanceof CanvasPattern || colorValue instanceof CanvasGradient ? colorValue : helpers$1.color(colorValue).saturate(0.5).darken(0.1).rgbString();\n    };\n  };\n\n  function abstract() {\n    throw new Error('This method is not implemented: either no adapter can ' + 'be found or an incomplete integration was provided.');\n  }\n  /**\n   * Date adapter (current used by the time scale)\n   * @namespace Chart._adapters._date\n   * @memberof Chart._adapters\n   * @private\n   */\n\n  /**\n   * Currently supported unit string values.\n   * @typedef {('millisecond'|'second'|'minute'|'hour'|'day'|'week'|'month'|'quarter'|'year')}\n   * @memberof Chart._adapters._date\n   * @name Unit\n   */\n\n  /**\n   * @class\n   */\n\n\n  function DateAdapter(options) {\n    this.options = options || {};\n  }\n\n  helpers$1.extend(DateAdapter.prototype,\n  /** @lends DateAdapter */\n  {\n    /**\n     * Returns a map of time formats for the supported formatting units defined\n     * in Unit as well as 'datetime' representing a detailed date/time string.\n     * @returns {{string: string}}\n     */\n    formats: abstract,\n\n    /**\n     * Parses the given `value` and return the associated timestamp.\n     * @param {any} value - the value to parse (usually comes from the data)\n     * @param {string} [format] - the expected data format\n     * @returns {(number|null)}\n     * @function\n     */\n    parse: abstract,\n\n    /**\n     * Returns the formatted date in the specified `format` for a given `timestamp`.\n     * @param {number} timestamp - the timestamp to format\n     * @param {string} format - the date/time token\n     * @return {string}\n     * @function\n     */\n    format: abstract,\n\n    /**\n     * Adds the specified `amount` of `unit` to the given `timestamp`.\n     * @param {number} timestamp - the input timestamp\n     * @param {number} amount - the amount to add\n     * @param {Unit} unit - the unit as string\n     * @return {number}\n     * @function\n     */\n    add: abstract,\n\n    /**\n     * Returns the number of `unit` between the given timestamps.\n     * @param {number} max - the input timestamp (reference)\n     * @param {number} min - the timestamp to substract\n     * @param {Unit} unit - the unit as string\n     * @return {number}\n     * @function\n     */\n    diff: abstract,\n\n    /**\n     * Returns start of `unit` for the given `timestamp`.\n     * @param {number} timestamp - the input timestamp\n     * @param {Unit} unit - the unit as string\n     * @param {number} [weekday] - the ISO day of the week with 1 being Monday\n     * and 7 being Sunday (only needed if param *unit* is `isoWeek`).\n     * @function\n     */\n    startOf: abstract,\n\n    /**\n     * Returns end of `unit` for the given `timestamp`.\n     * @param {number} timestamp - the input timestamp\n     * @param {Unit} unit - the unit as string\n     * @function\n     */\n    endOf: abstract,\n    // DEPRECATIONS\n\n    /**\n     * Provided for backward compatibility for scale.getValueForPixel(),\n     * this method should be overridden only by the moment adapter.\n     * @deprecated since version 2.8.0\n     * @todo remove at version 3\n     * @private\n     */\n    _create: function _create(value) {\n      return value;\n    }\n  });\n\n  DateAdapter.override = function (members) {\n    helpers$1.extend(DateAdapter.prototype, members);\n  };\n\n  var _date = DateAdapter;\n  var core_adapters = {\n    _date: _date\n  };\n  /**\n   * Namespace to hold static tick generation functions\n   * @namespace Chart.Ticks\n   */\n\n  var core_ticks = {\n    /**\n     * Namespace to hold formatters for different types of ticks\n     * @namespace Chart.Ticks.formatters\n     */\n    formatters: {\n      /**\n       * Formatter for value labels\n       * @method Chart.Ticks.formatters.values\n       * @param value the value to display\n       * @return {string|string[]} the label to display\n       */\n      values: function values(value) {\n        return helpers$1.isArray(value) ? value : '' + value;\n      },\n\n      /**\n       * Formatter for linear numeric ticks\n       * @method Chart.Ticks.formatters.linear\n       * @param tickValue {number} the value to be formatted\n       * @param index {number} the position of the tickValue parameter in the ticks array\n       * @param ticks {number[]} the list of ticks being converted\n       * @return {string} string representation of the tickValue parameter\n       */\n      linear: function linear(tickValue, index, ticks) {\n        // If we have lots of ticks, don't use the ones\n        var delta = ticks.length > 3 ? ticks[2] - ticks[1] : ticks[1] - ticks[0]; // If we have a number like 2.5 as the delta, figure out how many decimal places we need\n\n        if (Math.abs(delta) > 1) {\n          if (tickValue !== Math.floor(tickValue)) {\n            // not an integer\n            delta = tickValue - Math.floor(tickValue);\n          }\n        }\n\n        var logDelta = helpers$1.log10(Math.abs(delta));\n        var tickString = '';\n\n        if (tickValue !== 0) {\n          var maxTick = Math.max(Math.abs(ticks[0]), Math.abs(ticks[ticks.length - 1]));\n\n          if (maxTick < 1e-4) {\n            // all ticks are small numbers; use scientific notation\n            var logTick = helpers$1.log10(Math.abs(tickValue));\n            tickString = tickValue.toExponential(Math.floor(logTick) - Math.floor(logDelta));\n          } else {\n            var numDecimal = -1 * Math.floor(logDelta);\n            numDecimal = Math.max(Math.min(numDecimal, 20), 0); // toFixed has a max of 20 decimal places\n\n            tickString = tickValue.toFixed(numDecimal);\n          }\n        } else {\n          tickString = '0'; // never show decimal places for 0\n        }\n\n        return tickString;\n      },\n      logarithmic: function logarithmic(tickValue, index, ticks) {\n        var remain = tickValue / Math.pow(10, Math.floor(helpers$1.log10(tickValue)));\n\n        if (tickValue === 0) {\n          return '0';\n        } else if (remain === 1 || remain === 2 || remain === 5 || index === 0 || index === ticks.length - 1) {\n          return tickValue.toExponential();\n        }\n\n        return '';\n      }\n    }\n  };\n  var valueOrDefault$9 = helpers$1.valueOrDefault;\n  var valueAtIndexOrDefault = helpers$1.valueAtIndexOrDefault;\n\n  core_defaults._set('scale', {\n    display: true,\n    position: 'left',\n    offset: false,\n    // grid line settings\n    gridLines: {\n      display: true,\n      color: 'rgba(0, 0, 0, 0.1)',\n      lineWidth: 1,\n      drawBorder: true,\n      drawOnChartArea: true,\n      drawTicks: true,\n      tickMarkLength: 10,\n      zeroLineWidth: 1,\n      zeroLineColor: 'rgba(0,0,0,0.25)',\n      zeroLineBorderDash: [],\n      zeroLineBorderDashOffset: 0.0,\n      offsetGridLines: false,\n      borderDash: [],\n      borderDashOffset: 0.0\n    },\n    // scale label\n    scaleLabel: {\n      // display property\n      display: false,\n      // actual label\n      labelString: '',\n      // top/bottom padding\n      padding: {\n        top: 4,\n        bottom: 4\n      }\n    },\n    // label settings\n    ticks: {\n      beginAtZero: false,\n      minRotation: 0,\n      maxRotation: 50,\n      mirror: false,\n      padding: 0,\n      reverse: false,\n      display: true,\n      autoSkip: true,\n      autoSkipPadding: 0,\n      labelOffset: 0,\n      // We pass through arrays to be rendered as multiline labels, we convert Others to strings here.\n      callback: core_ticks.formatters.values,\n      minor: {},\n      major: {}\n    }\n  });\n\n  function labelsFromTicks(ticks) {\n    var labels = [];\n    var i, ilen;\n\n    for (i = 0, ilen = ticks.length; i < ilen; ++i) {\n      labels.push(ticks[i].label);\n    }\n\n    return labels;\n  }\n\n  function getPixelForGridLine(scale, index, offsetGridLines) {\n    var lineValue = scale.getPixelForTick(index);\n\n    if (offsetGridLines) {\n      if (scale.getTicks().length === 1) {\n        lineValue -= scale.isHorizontal() ? Math.max(lineValue - scale.left, scale.right - lineValue) : Math.max(lineValue - scale.top, scale.bottom - lineValue);\n      } else if (index === 0) {\n        lineValue -= (scale.getPixelForTick(1) - lineValue) / 2;\n      } else {\n        lineValue -= (lineValue - scale.getPixelForTick(index - 1)) / 2;\n      }\n    }\n\n    return lineValue;\n  }\n\n  function computeTextSize(context, tick, font) {\n    return helpers$1.isArray(tick) ? helpers$1.longestText(context, font, tick) : context.measureText(tick).width;\n  }\n\n  var core_scale = core_element.extend({\n    /**\n     * Get the padding needed for the scale\n     * @method getPadding\n     * @private\n     * @returns {Padding} the necessary padding\n     */\n    getPadding: function getPadding() {\n      var me = this;\n      return {\n        left: me.paddingLeft || 0,\n        top: me.paddingTop || 0,\n        right: me.paddingRight || 0,\n        bottom: me.paddingBottom || 0\n      };\n    },\n\n    /**\n     * Returns the scale tick objects ({label, major})\n     * @since 2.7\n     */\n    getTicks: function getTicks() {\n      return this._ticks;\n    },\n    // These methods are ordered by lifecyle. Utilities then follow.\n    // Any function defined here is inherited by all scale types.\n    // Any function can be extended by the scale type\n    mergeTicksOptions: function mergeTicksOptions() {\n      var ticks = this.options.ticks;\n\n      if (ticks.minor === false) {\n        ticks.minor = {\n          display: false\n        };\n      }\n\n      if (ticks.major === false) {\n        ticks.major = {\n          display: false\n        };\n      }\n\n      for (var key in ticks) {\n        if (key !== 'major' && key !== 'minor') {\n          if (typeof ticks.minor[key] === 'undefined') {\n            ticks.minor[key] = ticks[key];\n          }\n\n          if (typeof ticks.major[key] === 'undefined') {\n            ticks.major[key] = ticks[key];\n          }\n        }\n      }\n    },\n    beforeUpdate: function beforeUpdate() {\n      helpers$1.callback(this.options.beforeUpdate, [this]);\n    },\n    update: function update(maxWidth, maxHeight, margins) {\n      var me = this;\n      var i, ilen, labels, label, ticks, tick; // Update Lifecycle - Probably don't want to ever extend or overwrite this function ;)\n\n      me.beforeUpdate(); // Absorb the master measurements\n\n      me.maxWidth = maxWidth;\n      me.maxHeight = maxHeight;\n      me.margins = helpers$1.extend({\n        left: 0,\n        right: 0,\n        top: 0,\n        bottom: 0\n      }, margins);\n      me._maxLabelLines = 0;\n      me.longestLabelWidth = 0;\n      me.longestTextCache = me.longestTextCache || {}; // Dimensions\n\n      me.beforeSetDimensions();\n      me.setDimensions();\n      me.afterSetDimensions(); // Data min/max\n\n      me.beforeDataLimits();\n      me.determineDataLimits();\n      me.afterDataLimits(); // Ticks - `this.ticks` is now DEPRECATED!\n      // Internal ticks are now stored as objects in the PRIVATE `this._ticks` member\n      // and must not be accessed directly from outside this class. `this.ticks` being\n      // around for long time and not marked as private, we can't change its structure\n      // without unexpected breaking changes. If you need to access the scale ticks,\n      // use scale.getTicks() instead.\n\n      me.beforeBuildTicks(); // New implementations should return an array of objects but for BACKWARD COMPAT,\n      // we still support no return (`this.ticks` internally set by calling this method).\n\n      ticks = me.buildTicks() || []; // Allow modification of ticks in callback.\n\n      ticks = me.afterBuildTicks(ticks) || ticks;\n      me.beforeTickToLabelConversion(); // New implementations should return the formatted tick labels but for BACKWARD\n      // COMPAT, we still support no return (`this.ticks` internally changed by calling\n      // this method and supposed to contain only string values).\n\n      labels = me.convertTicksToLabels(ticks) || me.ticks;\n      me.afterTickToLabelConversion();\n      me.ticks = labels; // BACKWARD COMPATIBILITY\n      // IMPORTANT: from this point, we consider that `this.ticks` will NEVER change!\n      // BACKWARD COMPAT: synchronize `_ticks` with labels (so potentially `this.ticks`)\n\n      for (i = 0, ilen = labels.length; i < ilen; ++i) {\n        label = labels[i];\n        tick = ticks[i];\n\n        if (!tick) {\n          ticks.push(tick = {\n            label: label,\n            major: false\n          });\n        } else {\n          tick.label = label;\n        }\n      }\n\n      me._ticks = ticks; // Tick Rotation\n\n      me.beforeCalculateTickRotation();\n      me.calculateTickRotation();\n      me.afterCalculateTickRotation(); // Fit\n\n      me.beforeFit();\n      me.fit();\n      me.afterFit(); //\n\n      me.afterUpdate();\n      return me.minSize;\n    },\n    afterUpdate: function afterUpdate() {\n      helpers$1.callback(this.options.afterUpdate, [this]);\n    },\n    //\n    beforeSetDimensions: function beforeSetDimensions() {\n      helpers$1.callback(this.options.beforeSetDimensions, [this]);\n    },\n    setDimensions: function setDimensions() {\n      var me = this; // Set the unconstrained dimension before label rotation\n\n      if (me.isHorizontal()) {\n        // Reset position before calculating rotation\n        me.width = me.maxWidth;\n        me.left = 0;\n        me.right = me.width;\n      } else {\n        me.height = me.maxHeight; // Reset position before calculating rotation\n\n        me.top = 0;\n        me.bottom = me.height;\n      } // Reset padding\n\n\n      me.paddingLeft = 0;\n      me.paddingTop = 0;\n      me.paddingRight = 0;\n      me.paddingBottom = 0;\n    },\n    afterSetDimensions: function afterSetDimensions() {\n      helpers$1.callback(this.options.afterSetDimensions, [this]);\n    },\n    // Data limits\n    beforeDataLimits: function beforeDataLimits() {\n      helpers$1.callback(this.options.beforeDataLimits, [this]);\n    },\n    determineDataLimits: helpers$1.noop,\n    afterDataLimits: function afterDataLimits() {\n      helpers$1.callback(this.options.afterDataLimits, [this]);\n    },\n    //\n    beforeBuildTicks: function beforeBuildTicks() {\n      helpers$1.callback(this.options.beforeBuildTicks, [this]);\n    },\n    buildTicks: helpers$1.noop,\n    afterBuildTicks: function afterBuildTicks(ticks) {\n      var me = this; // ticks is empty for old axis implementations here\n\n      if (helpers$1.isArray(ticks) && ticks.length) {\n        return helpers$1.callback(me.options.afterBuildTicks, [me, ticks]);\n      } // Support old implementations (that modified `this.ticks` directly in buildTicks)\n\n\n      me.ticks = helpers$1.callback(me.options.afterBuildTicks, [me, me.ticks]) || me.ticks;\n      return ticks;\n    },\n    beforeTickToLabelConversion: function beforeTickToLabelConversion() {\n      helpers$1.callback(this.options.beforeTickToLabelConversion, [this]);\n    },\n    convertTicksToLabels: function convertTicksToLabels() {\n      var me = this; // Convert ticks to strings\n\n      var tickOpts = me.options.ticks;\n      me.ticks = me.ticks.map(tickOpts.userCallback || tickOpts.callback, this);\n    },\n    afterTickToLabelConversion: function afterTickToLabelConversion() {\n      helpers$1.callback(this.options.afterTickToLabelConversion, [this]);\n    },\n    //\n    beforeCalculateTickRotation: function beforeCalculateTickRotation() {\n      helpers$1.callback(this.options.beforeCalculateTickRotation, [this]);\n    },\n    calculateTickRotation: function calculateTickRotation() {\n      var me = this;\n      var context = me.ctx;\n      var tickOpts = me.options.ticks;\n      var labels = labelsFromTicks(me._ticks); // Get the width of each grid by calculating the difference\n      // between x offsets between 0 and 1.\n\n      var tickFont = helpers$1.options._parseFont(tickOpts);\n\n      context.font = tickFont.string;\n      var labelRotation = tickOpts.minRotation || 0;\n\n      if (labels.length && me.options.display && me.isHorizontal()) {\n        var originalLabelWidth = helpers$1.longestText(context, tickFont.string, labels, me.longestTextCache);\n        var labelWidth = originalLabelWidth;\n        var cosRotation, sinRotation; // Allow 3 pixels x2 padding either side for label readability\n\n        var tickWidth = me.getPixelForTick(1) - me.getPixelForTick(0) - 6; // Max label rotation can be set or default to 90 - also act as a loop counter\n\n        while (labelWidth > tickWidth && labelRotation < tickOpts.maxRotation) {\n          var angleRadians = helpers$1.toRadians(labelRotation);\n          cosRotation = Math.cos(angleRadians);\n          sinRotation = Math.sin(angleRadians);\n\n          if (sinRotation * originalLabelWidth > me.maxHeight) {\n            // go back one step\n            labelRotation--;\n            break;\n          }\n\n          labelRotation++;\n          labelWidth = cosRotation * originalLabelWidth;\n        }\n      }\n\n      me.labelRotation = labelRotation;\n    },\n    afterCalculateTickRotation: function afterCalculateTickRotation() {\n      helpers$1.callback(this.options.afterCalculateTickRotation, [this]);\n    },\n    //\n    beforeFit: function beforeFit() {\n      helpers$1.callback(this.options.beforeFit, [this]);\n    },\n    fit: function fit() {\n      var me = this; // Reset\n\n      var minSize = me.minSize = {\n        width: 0,\n        height: 0\n      };\n      var labels = labelsFromTicks(me._ticks);\n      var opts = me.options;\n      var tickOpts = opts.ticks;\n      var scaleLabelOpts = opts.scaleLabel;\n      var gridLineOpts = opts.gridLines;\n\n      var display = me._isVisible();\n\n      var position = opts.position;\n      var isHorizontal = me.isHorizontal();\n      var parseFont = helpers$1.options._parseFont;\n      var tickFont = parseFont(tickOpts);\n      var tickMarkLength = opts.gridLines.tickMarkLength; // Width\n\n      if (isHorizontal) {\n        // subtract the margins to line up with the chartArea if we are a full width scale\n        minSize.width = me.isFullWidth() ? me.maxWidth - me.margins.left - me.margins.right : me.maxWidth;\n      } else {\n        minSize.width = display && gridLineOpts.drawTicks ? tickMarkLength : 0;\n      } // height\n\n\n      if (isHorizontal) {\n        minSize.height = display && gridLineOpts.drawTicks ? tickMarkLength : 0;\n      } else {\n        minSize.height = me.maxHeight; // fill all the height\n      } // Are we showing a title for the scale?\n\n\n      if (scaleLabelOpts.display && display) {\n        var scaleLabelFont = parseFont(scaleLabelOpts);\n        var scaleLabelPadding = helpers$1.options.toPadding(scaleLabelOpts.padding);\n        var deltaHeight = scaleLabelFont.lineHeight + scaleLabelPadding.height;\n\n        if (isHorizontal) {\n          minSize.height += deltaHeight;\n        } else {\n          minSize.width += deltaHeight;\n        }\n      } // Don't bother fitting the ticks if we are not showing the labels\n\n\n      if (tickOpts.display && display) {\n        var largestTextWidth = helpers$1.longestText(me.ctx, tickFont.string, labels, me.longestTextCache);\n        var tallestLabelHeightInLines = helpers$1.numberOfLabelLines(labels);\n        var lineSpace = tickFont.size * 0.5;\n        var tickPadding = me.options.ticks.padding; // Store max number of lines and widest label for _autoSkip\n\n        me._maxLabelLines = tallestLabelHeightInLines;\n        me.longestLabelWidth = largestTextWidth;\n\n        if (isHorizontal) {\n          var angleRadians = helpers$1.toRadians(me.labelRotation);\n          var cosRotation = Math.cos(angleRadians);\n          var sinRotation = Math.sin(angleRadians); // TODO - improve this calculation\n\n          var labelHeight = sinRotation * largestTextWidth + tickFont.lineHeight * tallestLabelHeightInLines + lineSpace; // padding\n\n          minSize.height = Math.min(me.maxHeight, minSize.height + labelHeight + tickPadding);\n          me.ctx.font = tickFont.string;\n          var firstLabelWidth = computeTextSize(me.ctx, labels[0], tickFont.string);\n          var lastLabelWidth = computeTextSize(me.ctx, labels[labels.length - 1], tickFont.string);\n          var offsetLeft = me.getPixelForTick(0) - me.left;\n          var offsetRight = me.right - me.getPixelForTick(labels.length - 1);\n          var paddingLeft, paddingRight; // Ensure that our ticks are always inside the canvas. When rotated, ticks are right aligned\n          // which means that the right padding is dominated by the font height\n\n          if (me.labelRotation !== 0) {\n            paddingLeft = position === 'bottom' ? cosRotation * firstLabelWidth : cosRotation * lineSpace;\n            paddingRight = position === 'bottom' ? cosRotation * lineSpace : cosRotation * lastLabelWidth;\n          } else {\n            paddingLeft = firstLabelWidth / 2;\n            paddingRight = lastLabelWidth / 2;\n          }\n\n          me.paddingLeft = Math.max(paddingLeft - offsetLeft, 0) + 3; // add 3 px to move away from canvas edges\n\n          me.paddingRight = Math.max(paddingRight - offsetRight, 0) + 3;\n        } else {\n          // A vertical axis is more constrained by the width. Labels are the\n          // dominant factor here, so get that length first and account for padding\n          if (tickOpts.mirror) {\n            largestTextWidth = 0;\n          } else {\n            // use lineSpace for consistency with horizontal axis\n            // tickPadding is not implemented for horizontal\n            largestTextWidth += tickPadding + lineSpace;\n          }\n\n          minSize.width = Math.min(me.maxWidth, minSize.width + largestTextWidth);\n          me.paddingTop = tickFont.size / 2;\n          me.paddingBottom = tickFont.size / 2;\n        }\n      }\n\n      me.handleMargins();\n      me.width = minSize.width;\n      me.height = minSize.height;\n    },\n\n    /**\n     * Handle margins and padding interactions\n     * @private\n     */\n    handleMargins: function handleMargins() {\n      var me = this;\n\n      if (me.margins) {\n        me.paddingLeft = Math.max(me.paddingLeft - me.margins.left, 0);\n        me.paddingTop = Math.max(me.paddingTop - me.margins.top, 0);\n        me.paddingRight = Math.max(me.paddingRight - me.margins.right, 0);\n        me.paddingBottom = Math.max(me.paddingBottom - me.margins.bottom, 0);\n      }\n    },\n    afterFit: function afterFit() {\n      helpers$1.callback(this.options.afterFit, [this]);\n    },\n    // Shared Methods\n    isHorizontal: function isHorizontal() {\n      return this.options.position === 'top' || this.options.position === 'bottom';\n    },\n    isFullWidth: function isFullWidth() {\n      return this.options.fullWidth;\n    },\n    // Get the correct value. NaN bad inputs, If the value type is object get the x or y based on whether we are horizontal or not\n    getRightValue: function getRightValue(rawValue) {\n      // Null and undefined values first\n      if (helpers$1.isNullOrUndef(rawValue)) {\n        return NaN;\n      } // isNaN(object) returns true, so make sure NaN is checking for a number; Discard Infinite values\n\n\n      if ((typeof rawValue === 'number' || rawValue instanceof Number) && !isFinite(rawValue)) {\n        return NaN;\n      } // If it is in fact an object, dive in one more level\n\n\n      if (rawValue) {\n        if (this.isHorizontal()) {\n          if (rawValue.x !== undefined) {\n            return this.getRightValue(rawValue.x);\n          }\n        } else if (rawValue.y !== undefined) {\n          return this.getRightValue(rawValue.y);\n        }\n      } // Value is good, return it\n\n\n      return rawValue;\n    },\n\n    /**\n     * Used to get the value to display in the tooltip for the data at the given index\n     * @param index\n     * @param datasetIndex\n     */\n    getLabelForIndex: helpers$1.noop,\n\n    /**\n     * Returns the location of the given data point. Value can either be an index or a numerical value\n     * The coordinate (0, 0) is at the upper-left corner of the canvas\n     * @param value\n     * @param index\n     * @param datasetIndex\n     */\n    getPixelForValue: helpers$1.noop,\n\n    /**\n     * Used to get the data value from a given pixel. This is the inverse of getPixelForValue\n     * The coordinate (0, 0) is at the upper-left corner of the canvas\n     * @param pixel\n     */\n    getValueForPixel: helpers$1.noop,\n\n    /**\n     * Returns the location of the tick at the given index\n     * The coordinate (0, 0) is at the upper-left corner of the canvas\n     */\n    getPixelForTick: function getPixelForTick(index) {\n      var me = this;\n      var offset = me.options.offset;\n\n      if (me.isHorizontal()) {\n        var innerWidth = me.width - (me.paddingLeft + me.paddingRight);\n        var tickWidth = innerWidth / Math.max(me._ticks.length - (offset ? 0 : 1), 1);\n        var pixel = tickWidth * index + me.paddingLeft;\n\n        if (offset) {\n          pixel += tickWidth / 2;\n        }\n\n        var finalVal = me.left + pixel;\n        finalVal += me.isFullWidth() ? me.margins.left : 0;\n        return finalVal;\n      }\n\n      var innerHeight = me.height - (me.paddingTop + me.paddingBottom);\n      return me.top + index * (innerHeight / (me._ticks.length - 1));\n    },\n\n    /**\n     * Utility for getting the pixel location of a percentage of scale\n     * The coordinate (0, 0) is at the upper-left corner of the canvas\n     */\n    getPixelForDecimal: function getPixelForDecimal(decimal) {\n      var me = this;\n\n      if (me.isHorizontal()) {\n        var innerWidth = me.width - (me.paddingLeft + me.paddingRight);\n        var valueOffset = innerWidth * decimal + me.paddingLeft;\n        var finalVal = me.left + valueOffset;\n        finalVal += me.isFullWidth() ? me.margins.left : 0;\n        return finalVal;\n      }\n\n      return me.top + decimal * me.height;\n    },\n\n    /**\n     * Returns the pixel for the minimum chart value\n     * The coordinate (0, 0) is at the upper-left corner of the canvas\n     */\n    getBasePixel: function getBasePixel() {\n      return this.getPixelForValue(this.getBaseValue());\n    },\n    getBaseValue: function getBaseValue() {\n      var me = this;\n      var min = me.min;\n      var max = me.max;\n      return me.beginAtZero ? 0 : min < 0 && max < 0 ? max : min > 0 && max > 0 ? min : 0;\n    },\n\n    /**\n     * Returns a subset of ticks to be plotted to avoid overlapping labels.\n     * @private\n     */\n    _autoSkip: function _autoSkip(ticks) {\n      var me = this;\n      var isHorizontal = me.isHorizontal();\n      var optionTicks = me.options.ticks.minor;\n      var tickCount = ticks.length;\n      var skipRatio = false;\n      var maxTicks = optionTicks.maxTicksLimit; // Total space needed to display all ticks. First and last ticks are\n      // drawn as their center at end of axis, so tickCount-1\n\n      var ticksLength = me._tickSize() * (tickCount - 1); // Axis length\n\n      var axisLength = isHorizontal ? me.width - (me.paddingLeft + me.paddingRight) : me.height - (me.paddingTop + me.PaddingBottom);\n      var result = [];\n      var i, tick;\n\n      if (ticksLength > axisLength) {\n        skipRatio = 1 + Math.floor(ticksLength / axisLength);\n      } // if they defined a max number of optionTicks,\n      // increase skipRatio until that number is met\n\n\n      if (tickCount > maxTicks) {\n        skipRatio = Math.max(skipRatio, 1 + Math.floor(tickCount / maxTicks));\n      }\n\n      for (i = 0; i < tickCount; i++) {\n        tick = ticks[i];\n\n        if (skipRatio > 1 && i % skipRatio > 0) {\n          // leave tick in place but make sure it's not displayed (#4635)\n          delete tick.label;\n        }\n\n        result.push(tick);\n      }\n\n      return result;\n    },\n\n    /**\n     * @private\n     */\n    _tickSize: function _tickSize() {\n      var me = this;\n      var isHorizontal = me.isHorizontal();\n      var optionTicks = me.options.ticks.minor; // Calculate space needed by label in axis direction.\n\n      var rot = helpers$1.toRadians(me.labelRotation);\n      var cos = Math.abs(Math.cos(rot));\n      var sin = Math.abs(Math.sin(rot));\n      var padding = optionTicks.autoSkipPadding || 0;\n      var w = me.longestLabelWidth + padding || 0;\n\n      var tickFont = helpers$1.options._parseFont(optionTicks);\n\n      var h = me._maxLabelLines * tickFont.lineHeight + padding || 0; // Calculate space needed for 1 tick in axis direction.\n\n      return isHorizontal ? h * cos > w * sin ? w / cos : h / sin : h * sin < w * cos ? h / cos : w / sin;\n    },\n\n    /**\n     * @private\n     */\n    _isVisible: function _isVisible() {\n      var me = this;\n      var chart = me.chart;\n      var display = me.options.display;\n      var i, ilen, meta;\n\n      if (display !== 'auto') {\n        return !!display;\n      } // When 'auto', the scale is visible if at least one associated dataset is visible.\n\n\n      for (i = 0, ilen = chart.data.datasets.length; i < ilen; ++i) {\n        if (chart.isDatasetVisible(i)) {\n          meta = chart.getDatasetMeta(i);\n\n          if (meta.xAxisID === me.id || meta.yAxisID === me.id) {\n            return true;\n          }\n        }\n      }\n\n      return false;\n    },\n\n    /**\n     * Actually draw the scale on the canvas\n     * @param {object} chartArea - the area of the chart to draw full grid lines on\n     */\n    draw: function draw(chartArea) {\n      var me = this;\n      var options = me.options;\n\n      if (!me._isVisible()) {\n        return;\n      }\n\n      var chart = me.chart;\n      var context = me.ctx;\n      var globalDefaults = core_defaults.global;\n      var defaultFontColor = globalDefaults.defaultFontColor;\n      var optionTicks = options.ticks.minor;\n      var optionMajorTicks = options.ticks.major || optionTicks;\n      var gridLines = options.gridLines;\n      var scaleLabel = options.scaleLabel;\n      var position = options.position;\n      var isRotated = me.labelRotation !== 0;\n      var isMirrored = optionTicks.mirror;\n      var isHorizontal = me.isHorizontal();\n      var parseFont = helpers$1.options._parseFont;\n      var ticks = optionTicks.display && optionTicks.autoSkip ? me._autoSkip(me.getTicks()) : me.getTicks();\n      var tickFontColor = valueOrDefault$9(optionTicks.fontColor, defaultFontColor);\n      var tickFont = parseFont(optionTicks);\n      var lineHeight = tickFont.lineHeight;\n      var majorTickFontColor = valueOrDefault$9(optionMajorTicks.fontColor, defaultFontColor);\n      var majorTickFont = parseFont(optionMajorTicks);\n      var tickPadding = optionTicks.padding;\n      var labelOffset = optionTicks.labelOffset;\n      var tl = gridLines.drawTicks ? gridLines.tickMarkLength : 0;\n      var scaleLabelFontColor = valueOrDefault$9(scaleLabel.fontColor, defaultFontColor);\n      var scaleLabelFont = parseFont(scaleLabel);\n      var scaleLabelPadding = helpers$1.options.toPadding(scaleLabel.padding);\n      var labelRotationRadians = helpers$1.toRadians(me.labelRotation);\n      var itemsToDraw = [];\n      var axisWidth = gridLines.drawBorder ? valueAtIndexOrDefault(gridLines.lineWidth, 0, 0) : 0;\n      var alignPixel = helpers$1._alignPixel;\n      var borderValue, tickStart, tickEnd;\n\n      if (position === 'top') {\n        borderValue = alignPixel(chart, me.bottom, axisWidth);\n        tickStart = me.bottom - tl;\n        tickEnd = borderValue - axisWidth / 2;\n      } else if (position === 'bottom') {\n        borderValue = alignPixel(chart, me.top, axisWidth);\n        tickStart = borderValue + axisWidth / 2;\n        tickEnd = me.top + tl;\n      } else if (position === 'left') {\n        borderValue = alignPixel(chart, me.right, axisWidth);\n        tickStart = me.right - tl;\n        tickEnd = borderValue - axisWidth / 2;\n      } else {\n        borderValue = alignPixel(chart, me.left, axisWidth);\n        tickStart = borderValue + axisWidth / 2;\n        tickEnd = me.left + tl;\n      }\n\n      var epsilon = 0.0000001; // 0.0000001 is margin in pixels for Accumulated error.\n\n      helpers$1.each(ticks, function (tick, index) {\n        // autoskipper skipped this tick (#4635)\n        if (helpers$1.isNullOrUndef(tick.label)) {\n          return;\n        }\n\n        var label = tick.label;\n        var lineWidth, lineColor, borderDash, borderDashOffset;\n\n        if (index === me.zeroLineIndex && options.offset === gridLines.offsetGridLines) {\n          // Draw the first index specially\n          lineWidth = gridLines.zeroLineWidth;\n          lineColor = gridLines.zeroLineColor;\n          borderDash = gridLines.zeroLineBorderDash || [];\n          borderDashOffset = gridLines.zeroLineBorderDashOffset || 0.0;\n        } else {\n          lineWidth = valueAtIndexOrDefault(gridLines.lineWidth, index);\n          lineColor = valueAtIndexOrDefault(gridLines.color, index);\n          borderDash = gridLines.borderDash || [];\n          borderDashOffset = gridLines.borderDashOffset || 0.0;\n        } // Common properties\n\n\n        var tx1, ty1, tx2, ty2, x1, y1, x2, y2, labelX, labelY, textOffset, textAlign;\n        var labelCount = helpers$1.isArray(label) ? label.length : 1;\n        var lineValue = getPixelForGridLine(me, index, gridLines.offsetGridLines);\n\n        if (isHorizontal) {\n          var labelYOffset = tl + tickPadding;\n\n          if (lineValue < me.left - epsilon) {\n            lineColor = 'rgba(0,0,0,0)';\n          }\n\n          tx1 = tx2 = x1 = x2 = alignPixel(chart, lineValue, lineWidth);\n          ty1 = tickStart;\n          ty2 = tickEnd;\n          labelX = me.getPixelForTick(index) + labelOffset; // x values for optionTicks (need to consider offsetLabel option)\n\n          if (position === 'top') {\n            y1 = alignPixel(chart, chartArea.top, axisWidth) + axisWidth / 2;\n            y2 = chartArea.bottom;\n            textOffset = ((!isRotated ? 0.5 : 1) - labelCount) * lineHeight;\n            textAlign = !isRotated ? 'center' : 'left';\n            labelY = me.bottom - labelYOffset;\n          } else {\n            y1 = chartArea.top;\n            y2 = alignPixel(chart, chartArea.bottom, axisWidth) - axisWidth / 2;\n            textOffset = (!isRotated ? 0.5 : 0) * lineHeight;\n            textAlign = !isRotated ? 'center' : 'right';\n            labelY = me.top + labelYOffset;\n          }\n        } else {\n          var labelXOffset = (isMirrored ? 0 : tl) + tickPadding;\n\n          if (lineValue < me.top - epsilon) {\n            lineColor = 'rgba(0,0,0,0)';\n          }\n\n          tx1 = tickStart;\n          tx2 = tickEnd;\n          ty1 = ty2 = y1 = y2 = alignPixel(chart, lineValue, lineWidth);\n          labelY = me.getPixelForTick(index) + labelOffset;\n          textOffset = (1 - labelCount) * lineHeight / 2;\n\n          if (position === 'left') {\n            x1 = alignPixel(chart, chartArea.left, axisWidth) + axisWidth / 2;\n            x2 = chartArea.right;\n            textAlign = isMirrored ? 'left' : 'right';\n            labelX = me.right - labelXOffset;\n          } else {\n            x1 = chartArea.left;\n            x2 = alignPixel(chart, chartArea.right, axisWidth) - axisWidth / 2;\n            textAlign = isMirrored ? 'right' : 'left';\n            labelX = me.left + labelXOffset;\n          }\n        }\n\n        itemsToDraw.push({\n          tx1: tx1,\n          ty1: ty1,\n          tx2: tx2,\n          ty2: ty2,\n          x1: x1,\n          y1: y1,\n          x2: x2,\n          y2: y2,\n          labelX: labelX,\n          labelY: labelY,\n          glWidth: lineWidth,\n          glColor: lineColor,\n          glBorderDash: borderDash,\n          glBorderDashOffset: borderDashOffset,\n          rotation: -1 * labelRotationRadians,\n          label: label,\n          major: tick.major,\n          textOffset: textOffset,\n          textAlign: textAlign\n        });\n      }); // Draw all of the tick labels, tick marks, and grid lines at the correct places\n\n      helpers$1.each(itemsToDraw, function (itemToDraw) {\n        var glWidth = itemToDraw.glWidth;\n        var glColor = itemToDraw.glColor;\n\n        if (gridLines.display && glWidth && glColor) {\n          context.save();\n          context.lineWidth = glWidth;\n          context.strokeStyle = glColor;\n\n          if (context.setLineDash) {\n            context.setLineDash(itemToDraw.glBorderDash);\n            context.lineDashOffset = itemToDraw.glBorderDashOffset;\n          }\n\n          context.beginPath();\n\n          if (gridLines.drawTicks) {\n            context.moveTo(itemToDraw.tx1, itemToDraw.ty1);\n            context.lineTo(itemToDraw.tx2, itemToDraw.ty2);\n          }\n\n          if (gridLines.drawOnChartArea) {\n            context.moveTo(itemToDraw.x1, itemToDraw.y1);\n            context.lineTo(itemToDraw.x2, itemToDraw.y2);\n          }\n\n          context.stroke();\n          context.restore();\n        }\n\n        if (optionTicks.display) {\n          // Make sure we draw text in the correct color and font\n          context.save();\n          context.translate(itemToDraw.labelX, itemToDraw.labelY);\n          context.rotate(itemToDraw.rotation);\n          context.font = itemToDraw.major ? majorTickFont.string : tickFont.string;\n          context.fillStyle = itemToDraw.major ? majorTickFontColor : tickFontColor;\n          context.textBaseline = 'middle';\n          context.textAlign = itemToDraw.textAlign;\n          var label = itemToDraw.label;\n          var y = itemToDraw.textOffset;\n\n          if (helpers$1.isArray(label)) {\n            for (var i = 0; i < label.length; ++i) {\n              // We just make sure the multiline element is a string here..\n              context.fillText('' + label[i], 0, y);\n              y += lineHeight;\n            }\n          } else {\n            context.fillText(label, 0, y);\n          }\n\n          context.restore();\n        }\n      });\n\n      if (scaleLabel.display) {\n        // Draw the scale label\n        var scaleLabelX;\n        var scaleLabelY;\n        var rotation = 0;\n        var halfLineHeight = scaleLabelFont.lineHeight / 2;\n\n        if (isHorizontal) {\n          scaleLabelX = me.left + (me.right - me.left) / 2; // midpoint of the width\n\n          scaleLabelY = position === 'bottom' ? me.bottom - halfLineHeight - scaleLabelPadding.bottom : me.top + halfLineHeight + scaleLabelPadding.top;\n        } else {\n          var isLeft = position === 'left';\n          scaleLabelX = isLeft ? me.left + halfLineHeight + scaleLabelPadding.top : me.right - halfLineHeight - scaleLabelPadding.top;\n          scaleLabelY = me.top + (me.bottom - me.top) / 2;\n          rotation = isLeft ? -0.5 * Math.PI : 0.5 * Math.PI;\n        }\n\n        context.save();\n        context.translate(scaleLabelX, scaleLabelY);\n        context.rotate(rotation);\n        context.textAlign = 'center';\n        context.textBaseline = 'middle';\n        context.fillStyle = scaleLabelFontColor; // render in correct colour\n\n        context.font = scaleLabelFont.string;\n        context.fillText(scaleLabel.labelString, 0, 0);\n        context.restore();\n      }\n\n      if (axisWidth) {\n        // Draw the line at the edge of the axis\n        var firstLineWidth = axisWidth;\n        var lastLineWidth = valueAtIndexOrDefault(gridLines.lineWidth, ticks.length - 1, 0);\n        var x1, x2, y1, y2;\n\n        if (isHorizontal) {\n          x1 = alignPixel(chart, me.left, firstLineWidth) - firstLineWidth / 2;\n          x2 = alignPixel(chart, me.right, lastLineWidth) + lastLineWidth / 2;\n          y1 = y2 = borderValue;\n        } else {\n          y1 = alignPixel(chart, me.top, firstLineWidth) - firstLineWidth / 2;\n          y2 = alignPixel(chart, me.bottom, lastLineWidth) + lastLineWidth / 2;\n          x1 = x2 = borderValue;\n        }\n\n        context.lineWidth = axisWidth;\n        context.strokeStyle = valueAtIndexOrDefault(gridLines.color, 0);\n        context.beginPath();\n        context.moveTo(x1, y1);\n        context.lineTo(x2, y2);\n        context.stroke();\n      }\n    }\n  });\n  var defaultConfig = {\n    position: 'bottom'\n  };\n  var scale_category = core_scale.extend({\n    /**\n    * Internal function to get the correct labels. If data.xLabels or data.yLabels are defined, use those\n    * else fall back to data.labels\n    * @private\n    */\n    getLabels: function getLabels() {\n      var data = this.chart.data;\n      return this.options.labels || (this.isHorizontal() ? data.xLabels : data.yLabels) || data.labels;\n    },\n    determineDataLimits: function determineDataLimits() {\n      var me = this;\n      var labels = me.getLabels();\n      me.minIndex = 0;\n      me.maxIndex = labels.length - 1;\n      var findIndex;\n\n      if (me.options.ticks.min !== undefined) {\n        // user specified min value\n        findIndex = labels.indexOf(me.options.ticks.min);\n        me.minIndex = findIndex !== -1 ? findIndex : me.minIndex;\n      }\n\n      if (me.options.ticks.max !== undefined) {\n        // user specified max value\n        findIndex = labels.indexOf(me.options.ticks.max);\n        me.maxIndex = findIndex !== -1 ? findIndex : me.maxIndex;\n      }\n\n      me.min = labels[me.minIndex];\n      me.max = labels[me.maxIndex];\n    },\n    buildTicks: function buildTicks() {\n      var me = this;\n      var labels = me.getLabels(); // If we are viewing some subset of labels, slice the original array\n\n      me.ticks = me.minIndex === 0 && me.maxIndex === labels.length - 1 ? labels : labels.slice(me.minIndex, me.maxIndex + 1);\n    },\n    getLabelForIndex: function getLabelForIndex(index, datasetIndex) {\n      var me = this;\n      var chart = me.chart;\n\n      if (chart.getDatasetMeta(datasetIndex).controller._getValueScaleId() === me.id) {\n        return me.getRightValue(chart.data.datasets[datasetIndex].data[index]);\n      }\n\n      return me.ticks[index - me.minIndex];\n    },\n    // Used to get data value locations.  Value can either be an index or a numerical value\n    getPixelForValue: function getPixelForValue(value, index) {\n      var me = this;\n      var offset = me.options.offset; // 1 is added because we need the length but we have the indexes\n\n      var offsetAmt = Math.max(me.maxIndex + 1 - me.minIndex - (offset ? 0 : 1), 1); // If value is a data object, then index is the index in the data array,\n      // not the index of the scale. We need to change that.\n\n      var valueCategory;\n\n      if (value !== undefined && value !== null) {\n        valueCategory = me.isHorizontal() ? value.x : value.y;\n      }\n\n      if (valueCategory !== undefined || value !== undefined && isNaN(index)) {\n        var labels = me.getLabels();\n        value = valueCategory || value;\n        var idx = labels.indexOf(value);\n        index = idx !== -1 ? idx : index;\n      }\n\n      if (me.isHorizontal()) {\n        var valueWidth = me.width / offsetAmt;\n        var widthOffset = valueWidth * (index - me.minIndex);\n\n        if (offset) {\n          widthOffset += valueWidth / 2;\n        }\n\n        return me.left + widthOffset;\n      }\n\n      var valueHeight = me.height / offsetAmt;\n      var heightOffset = valueHeight * (index - me.minIndex);\n\n      if (offset) {\n        heightOffset += valueHeight / 2;\n      }\n\n      return me.top + heightOffset;\n    },\n    getPixelForTick: function getPixelForTick(index) {\n      return this.getPixelForValue(this.ticks[index], index + this.minIndex, null);\n    },\n    getValueForPixel: function getValueForPixel(pixel) {\n      var me = this;\n      var offset = me.options.offset;\n      var value;\n      var offsetAmt = Math.max(me._ticks.length - (offset ? 0 : 1), 1);\n      var horz = me.isHorizontal();\n      var valueDimension = (horz ? me.width : me.height) / offsetAmt;\n      pixel -= horz ? me.left : me.top;\n\n      if (offset) {\n        pixel -= valueDimension / 2;\n      }\n\n      if (pixel <= 0) {\n        value = 0;\n      } else {\n        value = Math.round(pixel / valueDimension);\n      }\n\n      return value + me.minIndex;\n    },\n    getBasePixel: function getBasePixel() {\n      return this.bottom;\n    }\n  }); // INTERNAL: static default options, registered in src/index.js\n\n  var _defaults = defaultConfig;\n  scale_category._defaults = _defaults;\n  var noop = helpers$1.noop;\n  var isNullOrUndef = helpers$1.isNullOrUndef;\n  /**\n   * Generate a set of linear ticks\n   * @param generationOptions the options used to generate the ticks\n   * @param dataRange the range of the data\n   * @returns {number[]} array of tick values\n   */\n\n  function generateTicks(generationOptions, dataRange) {\n    var ticks = []; // To get a \"nice\" value for the tick spacing, we will use the appropriately named\n    // \"nice number\" algorithm. See https://stackoverflow.com/questions/8506881/nice-label-algorithm-for-charts-with-minimum-ticks\n    // for details.\n\n    var MIN_SPACING = 1e-14;\n    var stepSize = generationOptions.stepSize;\n    var unit = stepSize || 1;\n    var maxNumSpaces = generationOptions.maxTicks - 1;\n    var min = generationOptions.min;\n    var max = generationOptions.max;\n    var precision = generationOptions.precision;\n    var rmin = dataRange.min;\n    var rmax = dataRange.max;\n    var spacing = helpers$1.niceNum((rmax - rmin) / maxNumSpaces / unit) * unit;\n    var factor, niceMin, niceMax, numSpaces; // Beyond MIN_SPACING floating point numbers being to lose precision\n    // such that we can't do the math necessary to generate ticks\n\n    if (spacing < MIN_SPACING && isNullOrUndef(min) && isNullOrUndef(max)) {\n      return [rmin, rmax];\n    }\n\n    numSpaces = Math.ceil(rmax / spacing) - Math.floor(rmin / spacing);\n\n    if (numSpaces > maxNumSpaces) {\n      // If the calculated num of spaces exceeds maxNumSpaces, recalculate it\n      spacing = helpers$1.niceNum(numSpaces * spacing / maxNumSpaces / unit) * unit;\n    }\n\n    if (stepSize || isNullOrUndef(precision)) {\n      // If a precision is not specified, calculate factor based on spacing\n      factor = Math.pow(10, helpers$1._decimalPlaces(spacing));\n    } else {\n      // If the user specified a precision, round to that number of decimal places\n      factor = Math.pow(10, precision);\n      spacing = Math.ceil(spacing * factor) / factor;\n    }\n\n    niceMin = Math.floor(rmin / spacing) * spacing;\n    niceMax = Math.ceil(rmax / spacing) * spacing; // If min, max and stepSize is set and they make an evenly spaced scale use it.\n\n    if (stepSize) {\n      // If very close to our whole number, use it.\n      if (!isNullOrUndef(min) && helpers$1.almostWhole(min / spacing, spacing / 1000)) {\n        niceMin = min;\n      }\n\n      if (!isNullOrUndef(max) && helpers$1.almostWhole(max / spacing, spacing / 1000)) {\n        niceMax = max;\n      }\n    }\n\n    numSpaces = (niceMax - niceMin) / spacing; // If very close to our rounded value, use it.\n\n    if (helpers$1.almostEquals(numSpaces, Math.round(numSpaces), spacing / 1000)) {\n      numSpaces = Math.round(numSpaces);\n    } else {\n      numSpaces = Math.ceil(numSpaces);\n    }\n\n    niceMin = Math.round(niceMin * factor) / factor;\n    niceMax = Math.round(niceMax * factor) / factor;\n    ticks.push(isNullOrUndef(min) ? niceMin : min);\n\n    for (var j = 1; j < numSpaces; ++j) {\n      ticks.push(Math.round((niceMin + j * spacing) * factor) / factor);\n    }\n\n    ticks.push(isNullOrUndef(max) ? niceMax : max);\n    return ticks;\n  }\n\n  var scale_linearbase = core_scale.extend({\n    getRightValue: function getRightValue(value) {\n      if (typeof value === 'string') {\n        return +value;\n      }\n\n      return core_scale.prototype.getRightValue.call(this, value);\n    },\n    handleTickRangeOptions: function handleTickRangeOptions() {\n      var me = this;\n      var opts = me.options;\n      var tickOpts = opts.ticks; // If we are forcing it to begin at 0, but 0 will already be rendered on the chart,\n      // do nothing since that would make the chart weird. If the user really wants a weird chart\n      // axis, they can manually override it\n\n      if (tickOpts.beginAtZero) {\n        var minSign = helpers$1.sign(me.min);\n        var maxSign = helpers$1.sign(me.max);\n\n        if (minSign < 0 && maxSign < 0) {\n          // move the top up to 0\n          me.max = 0;\n        } else if (minSign > 0 && maxSign > 0) {\n          // move the bottom down to 0\n          me.min = 0;\n        }\n      }\n\n      var setMin = tickOpts.min !== undefined || tickOpts.suggestedMin !== undefined;\n      var setMax = tickOpts.max !== undefined || tickOpts.suggestedMax !== undefined;\n\n      if (tickOpts.min !== undefined) {\n        me.min = tickOpts.min;\n      } else if (tickOpts.suggestedMin !== undefined) {\n        if (me.min === null) {\n          me.min = tickOpts.suggestedMin;\n        } else {\n          me.min = Math.min(me.min, tickOpts.suggestedMin);\n        }\n      }\n\n      if (tickOpts.max !== undefined) {\n        me.max = tickOpts.max;\n      } else if (tickOpts.suggestedMax !== undefined) {\n        if (me.max === null) {\n          me.max = tickOpts.suggestedMax;\n        } else {\n          me.max = Math.max(me.max, tickOpts.suggestedMax);\n        }\n      }\n\n      if (setMin !== setMax) {\n        // We set the min or the max but not both.\n        // So ensure that our range is good\n        // Inverted or 0 length range can happen when\n        // ticks.min is set, and no datasets are visible\n        if (me.min >= me.max) {\n          if (setMin) {\n            me.max = me.min + 1;\n          } else {\n            me.min = me.max - 1;\n          }\n        }\n      }\n\n      if (me.min === me.max) {\n        me.max++;\n\n        if (!tickOpts.beginAtZero) {\n          me.min--;\n        }\n      }\n    },\n    getTickLimit: function getTickLimit() {\n      var me = this;\n      var tickOpts = me.options.ticks;\n      var stepSize = tickOpts.stepSize;\n      var maxTicksLimit = tickOpts.maxTicksLimit;\n      var maxTicks;\n\n      if (stepSize) {\n        maxTicks = Math.ceil(me.max / stepSize) - Math.floor(me.min / stepSize) + 1;\n      } else {\n        maxTicks = me._computeTickLimit();\n        maxTicksLimit = maxTicksLimit || 11;\n      }\n\n      if (maxTicksLimit) {\n        maxTicks = Math.min(maxTicksLimit, maxTicks);\n      }\n\n      return maxTicks;\n    },\n    _computeTickLimit: function _computeTickLimit() {\n      return Number.POSITIVE_INFINITY;\n    },\n    handleDirectionalChanges: noop,\n    buildTicks: function buildTicks() {\n      var me = this;\n      var opts = me.options;\n      var tickOpts = opts.ticks; // Figure out what the max number of ticks we can support it is based on the size of\n      // the axis area. For now, we say that the minimum tick spacing in pixels must be 40\n      // We also limit the maximum number of ticks to 11 which gives a nice 10 squares on\n      // the graph. Make sure we always have at least 2 ticks\n\n      var maxTicks = me.getTickLimit();\n      maxTicks = Math.max(2, maxTicks);\n      var numericGeneratorOptions = {\n        maxTicks: maxTicks,\n        min: tickOpts.min,\n        max: tickOpts.max,\n        precision: tickOpts.precision,\n        stepSize: helpers$1.valueOrDefault(tickOpts.fixedStepSize, tickOpts.stepSize)\n      };\n      var ticks = me.ticks = generateTicks(numericGeneratorOptions, me);\n      me.handleDirectionalChanges(); // At this point, we need to update our max and min given the tick values since we have expanded the\n      // range of the scale\n\n      me.max = helpers$1.max(ticks);\n      me.min = helpers$1.min(ticks);\n\n      if (tickOpts.reverse) {\n        ticks.reverse();\n        me.start = me.max;\n        me.end = me.min;\n      } else {\n        me.start = me.min;\n        me.end = me.max;\n      }\n    },\n    convertTicksToLabels: function convertTicksToLabels() {\n      var me = this;\n      me.ticksAsNumbers = me.ticks.slice();\n      me.zeroLineIndex = me.ticks.indexOf(0);\n      core_scale.prototype.convertTicksToLabels.call(me);\n    }\n  });\n  var defaultConfig$1 = {\n    position: 'left',\n    ticks: {\n      callback: core_ticks.formatters.linear\n    }\n  };\n  var scale_linear = scale_linearbase.extend({\n    determineDataLimits: function determineDataLimits() {\n      var me = this;\n      var opts = me.options;\n      var chart = me.chart;\n      var data = chart.data;\n      var datasets = data.datasets;\n      var isHorizontal = me.isHorizontal();\n      var DEFAULT_MIN = 0;\n      var DEFAULT_MAX = 1;\n\n      function IDMatches(meta) {\n        return isHorizontal ? meta.xAxisID === me.id : meta.yAxisID === me.id;\n      } // First Calculate the range\n\n\n      me.min = null;\n      me.max = null;\n      var hasStacks = opts.stacked;\n\n      if (hasStacks === undefined) {\n        helpers$1.each(datasets, function (dataset, datasetIndex) {\n          if (hasStacks) {\n            return;\n          }\n\n          var meta = chart.getDatasetMeta(datasetIndex);\n\n          if (chart.isDatasetVisible(datasetIndex) && IDMatches(meta) && meta.stack !== undefined) {\n            hasStacks = true;\n          }\n        });\n      }\n\n      if (opts.stacked || hasStacks) {\n        var valuesPerStack = {};\n        helpers$1.each(datasets, function (dataset, datasetIndex) {\n          var meta = chart.getDatasetMeta(datasetIndex);\n          var key = [meta.type, // we have a separate stack for stack=undefined datasets when the opts.stacked is undefined\n          opts.stacked === undefined && meta.stack === undefined ? datasetIndex : '', meta.stack].join('.');\n\n          if (valuesPerStack[key] === undefined) {\n            valuesPerStack[key] = {\n              positiveValues: [],\n              negativeValues: []\n            };\n          } // Store these per type\n\n\n          var positiveValues = valuesPerStack[key].positiveValues;\n          var negativeValues = valuesPerStack[key].negativeValues;\n\n          if (chart.isDatasetVisible(datasetIndex) && IDMatches(meta)) {\n            helpers$1.each(dataset.data, function (rawValue, index) {\n              var value = +me.getRightValue(rawValue);\n\n              if (isNaN(value) || meta.data[index].hidden) {\n                return;\n              }\n\n              positiveValues[index] = positiveValues[index] || 0;\n              negativeValues[index] = negativeValues[index] || 0;\n\n              if (opts.relativePoints) {\n                positiveValues[index] = 100;\n              } else if (value < 0) {\n                negativeValues[index] += value;\n              } else {\n                positiveValues[index] += value;\n              }\n            });\n          }\n        });\n        helpers$1.each(valuesPerStack, function (valuesForType) {\n          var values = valuesForType.positiveValues.concat(valuesForType.negativeValues);\n          var minVal = helpers$1.min(values);\n          var maxVal = helpers$1.max(values);\n          me.min = me.min === null ? minVal : Math.min(me.min, minVal);\n          me.max = me.max === null ? maxVal : Math.max(me.max, maxVal);\n        });\n      } else {\n        helpers$1.each(datasets, function (dataset, datasetIndex) {\n          var meta = chart.getDatasetMeta(datasetIndex);\n\n          if (chart.isDatasetVisible(datasetIndex) && IDMatches(meta)) {\n            helpers$1.each(dataset.data, function (rawValue, index) {\n              var value = +me.getRightValue(rawValue);\n\n              if (isNaN(value) || meta.data[index].hidden) {\n                return;\n              }\n\n              if (me.min === null) {\n                me.min = value;\n              } else if (value < me.min) {\n                me.min = value;\n              }\n\n              if (me.max === null) {\n                me.max = value;\n              } else if (value > me.max) {\n                me.max = value;\n              }\n            });\n          }\n        });\n      }\n\n      me.min = isFinite(me.min) && !isNaN(me.min) ? me.min : DEFAULT_MIN;\n      me.max = isFinite(me.max) && !isNaN(me.max) ? me.max : DEFAULT_MAX; // Common base implementation to handle ticks.min, ticks.max, ticks.beginAtZero\n\n      this.handleTickRangeOptions();\n    },\n    // Returns the maximum number of ticks based on the scale dimension\n    _computeTickLimit: function _computeTickLimit() {\n      var me = this;\n      var tickFont;\n\n      if (me.isHorizontal()) {\n        return Math.ceil(me.width / 40);\n      }\n\n      tickFont = helpers$1.options._parseFont(me.options.ticks);\n      return Math.ceil(me.height / tickFont.lineHeight);\n    },\n    // Called after the ticks are built. We need\n    handleDirectionalChanges: function handleDirectionalChanges() {\n      if (!this.isHorizontal()) {\n        // We are in a vertical orientation. The top value is the highest. So reverse the array\n        this.ticks.reverse();\n      }\n    },\n    getLabelForIndex: function getLabelForIndex(index, datasetIndex) {\n      return +this.getRightValue(this.chart.data.datasets[datasetIndex].data[index]);\n    },\n    // Utils\n    getPixelForValue: function getPixelForValue(value) {\n      // This must be called after fit has been run so that\n      // this.left, this.top, this.right, and this.bottom have been defined\n      var me = this;\n      var start = me.start;\n      var rightValue = +me.getRightValue(value);\n      var pixel;\n      var range = me.end - start;\n\n      if (me.isHorizontal()) {\n        pixel = me.left + me.width / range * (rightValue - start);\n      } else {\n        pixel = me.bottom - me.height / range * (rightValue - start);\n      }\n\n      return pixel;\n    },\n    getValueForPixel: function getValueForPixel(pixel) {\n      var me = this;\n      var isHorizontal = me.isHorizontal();\n      var innerDimension = isHorizontal ? me.width : me.height;\n      var offset = (isHorizontal ? pixel - me.left : me.bottom - pixel) / innerDimension;\n      return me.start + (me.end - me.start) * offset;\n    },\n    getPixelForTick: function getPixelForTick(index) {\n      return this.getPixelForValue(this.ticksAsNumbers[index]);\n    }\n  }); // INTERNAL: static default options, registered in src/index.js\n\n  var _defaults$1 = defaultConfig$1;\n  scale_linear._defaults = _defaults$1;\n  var valueOrDefault$a = helpers$1.valueOrDefault;\n  /**\n   * Generate a set of logarithmic ticks\n   * @param generationOptions the options used to generate the ticks\n   * @param dataRange the range of the data\n   * @returns {number[]} array of tick values\n   */\n\n  function generateTicks$1(generationOptions, dataRange) {\n    var ticks = [];\n    var tickVal = valueOrDefault$a(generationOptions.min, Math.pow(10, Math.floor(helpers$1.log10(dataRange.min))));\n    var endExp = Math.floor(helpers$1.log10(dataRange.max));\n    var endSignificand = Math.ceil(dataRange.max / Math.pow(10, endExp));\n    var exp, significand;\n\n    if (tickVal === 0) {\n      exp = Math.floor(helpers$1.log10(dataRange.minNotZero));\n      significand = Math.floor(dataRange.minNotZero / Math.pow(10, exp));\n      ticks.push(tickVal);\n      tickVal = significand * Math.pow(10, exp);\n    } else {\n      exp = Math.floor(helpers$1.log10(tickVal));\n      significand = Math.floor(tickVal / Math.pow(10, exp));\n    }\n\n    var precision = exp < 0 ? Math.pow(10, Math.abs(exp)) : 1;\n\n    do {\n      ticks.push(tickVal);\n      ++significand;\n\n      if (significand === 10) {\n        significand = 1;\n        ++exp;\n        precision = exp >= 0 ? 1 : precision;\n      }\n\n      tickVal = Math.round(significand * Math.pow(10, exp) * precision) / precision;\n    } while (exp < endExp || exp === endExp && significand < endSignificand);\n\n    var lastTick = valueOrDefault$a(generationOptions.max, tickVal);\n    ticks.push(lastTick);\n    return ticks;\n  }\n\n  var defaultConfig$2 = {\n    position: 'left',\n    // label settings\n    ticks: {\n      callback: core_ticks.formatters.logarithmic\n    }\n  }; // TODO(v3): change this to positiveOrDefault\n\n  function nonNegativeOrDefault(value, defaultValue) {\n    return helpers$1.isFinite(value) && value >= 0 ? value : defaultValue;\n  }\n\n  var scale_logarithmic = core_scale.extend({\n    determineDataLimits: function determineDataLimits() {\n      var me = this;\n      var opts = me.options;\n      var chart = me.chart;\n      var data = chart.data;\n      var datasets = data.datasets;\n      var isHorizontal = me.isHorizontal();\n\n      function IDMatches(meta) {\n        return isHorizontal ? meta.xAxisID === me.id : meta.yAxisID === me.id;\n      } // Calculate Range\n\n\n      me.min = null;\n      me.max = null;\n      me.minNotZero = null;\n      var hasStacks = opts.stacked;\n\n      if (hasStacks === undefined) {\n        helpers$1.each(datasets, function (dataset, datasetIndex) {\n          if (hasStacks) {\n            return;\n          }\n\n          var meta = chart.getDatasetMeta(datasetIndex);\n\n          if (chart.isDatasetVisible(datasetIndex) && IDMatches(meta) && meta.stack !== undefined) {\n            hasStacks = true;\n          }\n        });\n      }\n\n      if (opts.stacked || hasStacks) {\n        var valuesPerStack = {};\n        helpers$1.each(datasets, function (dataset, datasetIndex) {\n          var meta = chart.getDatasetMeta(datasetIndex);\n          var key = [meta.type, // we have a separate stack for stack=undefined datasets when the opts.stacked is undefined\n          opts.stacked === undefined && meta.stack === undefined ? datasetIndex : '', meta.stack].join('.');\n\n          if (chart.isDatasetVisible(datasetIndex) && IDMatches(meta)) {\n            if (valuesPerStack[key] === undefined) {\n              valuesPerStack[key] = [];\n            }\n\n            helpers$1.each(dataset.data, function (rawValue, index) {\n              var values = valuesPerStack[key];\n              var value = +me.getRightValue(rawValue); // invalid, hidden and negative values are ignored\n\n              if (isNaN(value) || meta.data[index].hidden || value < 0) {\n                return;\n              }\n\n              values[index] = values[index] || 0;\n              values[index] += value;\n            });\n          }\n        });\n        helpers$1.each(valuesPerStack, function (valuesForType) {\n          if (valuesForType.length > 0) {\n            var minVal = helpers$1.min(valuesForType);\n            var maxVal = helpers$1.max(valuesForType);\n            me.min = me.min === null ? minVal : Math.min(me.min, minVal);\n            me.max = me.max === null ? maxVal : Math.max(me.max, maxVal);\n          }\n        });\n      } else {\n        helpers$1.each(datasets, function (dataset, datasetIndex) {\n          var meta = chart.getDatasetMeta(datasetIndex);\n\n          if (chart.isDatasetVisible(datasetIndex) && IDMatches(meta)) {\n            helpers$1.each(dataset.data, function (rawValue, index) {\n              var value = +me.getRightValue(rawValue); // invalid, hidden and negative values are ignored\n\n              if (isNaN(value) || meta.data[index].hidden || value < 0) {\n                return;\n              }\n\n              if (me.min === null) {\n                me.min = value;\n              } else if (value < me.min) {\n                me.min = value;\n              }\n\n              if (me.max === null) {\n                me.max = value;\n              } else if (value > me.max) {\n                me.max = value;\n              }\n\n              if (value !== 0 && (me.minNotZero === null || value < me.minNotZero)) {\n                me.minNotZero = value;\n              }\n            });\n          }\n        });\n      } // Common base implementation to handle ticks.min, ticks.max\n\n\n      this.handleTickRangeOptions();\n    },\n    handleTickRangeOptions: function handleTickRangeOptions() {\n      var me = this;\n      var tickOpts = me.options.ticks;\n      var DEFAULT_MIN = 1;\n      var DEFAULT_MAX = 10;\n      me.min = nonNegativeOrDefault(tickOpts.min, me.min);\n      me.max = nonNegativeOrDefault(tickOpts.max, me.max);\n\n      if (me.min === me.max) {\n        if (me.min !== 0 && me.min !== null) {\n          me.min = Math.pow(10, Math.floor(helpers$1.log10(me.min)) - 1);\n          me.max = Math.pow(10, Math.floor(helpers$1.log10(me.max)) + 1);\n        } else {\n          me.min = DEFAULT_MIN;\n          me.max = DEFAULT_MAX;\n        }\n      }\n\n      if (me.min === null) {\n        me.min = Math.pow(10, Math.floor(helpers$1.log10(me.max)) - 1);\n      }\n\n      if (me.max === null) {\n        me.max = me.min !== 0 ? Math.pow(10, Math.floor(helpers$1.log10(me.min)) + 1) : DEFAULT_MAX;\n      }\n\n      if (me.minNotZero === null) {\n        if (me.min > 0) {\n          me.minNotZero = me.min;\n        } else if (me.max < 1) {\n          me.minNotZero = Math.pow(10, Math.floor(helpers$1.log10(me.max)));\n        } else {\n          me.minNotZero = DEFAULT_MIN;\n        }\n      }\n    },\n    buildTicks: function buildTicks() {\n      var me = this;\n      var tickOpts = me.options.ticks;\n      var reverse = !me.isHorizontal();\n      var generationOptions = {\n        min: nonNegativeOrDefault(tickOpts.min),\n        max: nonNegativeOrDefault(tickOpts.max)\n      };\n      var ticks = me.ticks = generateTicks$1(generationOptions, me); // At this point, we need to update our max and min given the tick values since we have expanded the\n      // range of the scale\n\n      me.max = helpers$1.max(ticks);\n      me.min = helpers$1.min(ticks);\n\n      if (tickOpts.reverse) {\n        reverse = !reverse;\n        me.start = me.max;\n        me.end = me.min;\n      } else {\n        me.start = me.min;\n        me.end = me.max;\n      }\n\n      if (reverse) {\n        ticks.reverse();\n      }\n    },\n    convertTicksToLabels: function convertTicksToLabels() {\n      this.tickValues = this.ticks.slice();\n      core_scale.prototype.convertTicksToLabels.call(this);\n    },\n    // Get the correct tooltip label\n    getLabelForIndex: function getLabelForIndex(index, datasetIndex) {\n      return +this.getRightValue(this.chart.data.datasets[datasetIndex].data[index]);\n    },\n    getPixelForTick: function getPixelForTick(index) {\n      return this.getPixelForValue(this.tickValues[index]);\n    },\n\n    /**\n     * Returns the value of the first tick.\n     * @param {number} value - The minimum not zero value.\n     * @return {number} The first tick value.\n     * @private\n     */\n    _getFirstTickValue: function _getFirstTickValue(value) {\n      var exp = Math.floor(helpers$1.log10(value));\n      var significand = Math.floor(value / Math.pow(10, exp));\n      return significand * Math.pow(10, exp);\n    },\n    getPixelForValue: function getPixelForValue(value) {\n      var me = this;\n      var tickOpts = me.options.ticks;\n      var reverse = tickOpts.reverse;\n      var log10 = helpers$1.log10;\n\n      var firstTickValue = me._getFirstTickValue(me.minNotZero);\n\n      var offset = 0;\n      var innerDimension, pixel, start, end, sign;\n      value = +me.getRightValue(value);\n\n      if (reverse) {\n        start = me.end;\n        end = me.start;\n        sign = -1;\n      } else {\n        start = me.start;\n        end = me.end;\n        sign = 1;\n      }\n\n      if (me.isHorizontal()) {\n        innerDimension = me.width;\n        pixel = reverse ? me.right : me.left;\n      } else {\n        innerDimension = me.height;\n        sign *= -1; // invert, since the upper-left corner of the canvas is at pixel (0, 0)\n\n        pixel = reverse ? me.top : me.bottom;\n      }\n\n      if (value !== start) {\n        if (start === 0) {\n          // include zero tick\n          offset = valueOrDefault$a(tickOpts.fontSize, core_defaults.global.defaultFontSize);\n          innerDimension -= offset;\n          start = firstTickValue;\n        }\n\n        if (value !== 0) {\n          offset += innerDimension / (log10(end) - log10(start)) * (log10(value) - log10(start));\n        }\n\n        pixel += sign * offset;\n      }\n\n      return pixel;\n    },\n    getValueForPixel: function getValueForPixel(pixel) {\n      var me = this;\n      var tickOpts = me.options.ticks;\n      var reverse = tickOpts.reverse;\n      var log10 = helpers$1.log10;\n\n      var firstTickValue = me._getFirstTickValue(me.minNotZero);\n\n      var innerDimension, start, end, value;\n\n      if (reverse) {\n        start = me.end;\n        end = me.start;\n      } else {\n        start = me.start;\n        end = me.end;\n      }\n\n      if (me.isHorizontal()) {\n        innerDimension = me.width;\n        value = reverse ? me.right - pixel : pixel - me.left;\n      } else {\n        innerDimension = me.height;\n        value = reverse ? pixel - me.top : me.bottom - pixel;\n      }\n\n      if (value !== start) {\n        if (start === 0) {\n          // include zero tick\n          var offset = valueOrDefault$a(tickOpts.fontSize, core_defaults.global.defaultFontSize);\n          value -= offset;\n          innerDimension -= offset;\n          start = firstTickValue;\n        }\n\n        value *= log10(end) - log10(start);\n        value /= innerDimension;\n        value = Math.pow(10, log10(start) + value);\n      }\n\n      return value;\n    }\n  }); // INTERNAL: static default options, registered in src/index.js\n\n  var _defaults$2 = defaultConfig$2;\n  scale_logarithmic._defaults = _defaults$2;\n  var valueOrDefault$b = helpers$1.valueOrDefault;\n  var valueAtIndexOrDefault$1 = helpers$1.valueAtIndexOrDefault;\n  var resolve$7 = helpers$1.options.resolve;\n  var defaultConfig$3 = {\n    display: true,\n    // Boolean - Whether to animate scaling the chart from the centre\n    animate: true,\n    position: 'chartArea',\n    angleLines: {\n      display: true,\n      color: 'rgba(0, 0, 0, 0.1)',\n      lineWidth: 1,\n      borderDash: [],\n      borderDashOffset: 0.0\n    },\n    gridLines: {\n      circular: false\n    },\n    // label settings\n    ticks: {\n      // Boolean - Show a backdrop to the scale label\n      showLabelBackdrop: true,\n      // String - The colour of the label backdrop\n      backdropColor: 'rgba(255,255,255,0.75)',\n      // Number - The backdrop padding above & below the label in pixels\n      backdropPaddingY: 2,\n      // Number - The backdrop padding to the side of the label in pixels\n      backdropPaddingX: 2,\n      callback: core_ticks.formatters.linear\n    },\n    pointLabels: {\n      // Boolean - if true, show point labels\n      display: true,\n      // Number - Point label font size in pixels\n      fontSize: 10,\n      // Function - Used to convert point labels\n      callback: function callback(label) {\n        return label;\n      }\n    }\n  };\n\n  function getValueCount(scale) {\n    var opts = scale.options;\n    return opts.angleLines.display || opts.pointLabels.display ? scale.chart.data.labels.length : 0;\n  }\n\n  function getTickBackdropHeight(opts) {\n    var tickOpts = opts.ticks;\n\n    if (tickOpts.display && opts.display) {\n      return valueOrDefault$b(tickOpts.fontSize, core_defaults.global.defaultFontSize) + tickOpts.backdropPaddingY * 2;\n    }\n\n    return 0;\n  }\n\n  function measureLabelSize(ctx, lineHeight, label) {\n    if (helpers$1.isArray(label)) {\n      return {\n        w: helpers$1.longestText(ctx, ctx.font, label),\n        h: label.length * lineHeight\n      };\n    }\n\n    return {\n      w: ctx.measureText(label).width,\n      h: lineHeight\n    };\n  }\n\n  function determineLimits(angle, pos, size, min, max) {\n    if (angle === min || angle === max) {\n      return {\n        start: pos - size / 2,\n        end: pos + size / 2\n      };\n    } else if (angle < min || angle > max) {\n      return {\n        start: pos - size,\n        end: pos\n      };\n    }\n\n    return {\n      start: pos,\n      end: pos + size\n    };\n  }\n  /**\n   * Helper function to fit a radial linear scale with point labels\n   */\n\n\n  function fitWithPointLabels(scale) {\n    // Right, this is really confusing and there is a lot of maths going on here\n    // The gist of the problem is here: https://gist.github.com/nnnick/696cc9c55f4b0beb8fe9\n    //\n    // Reaction: https://dl.dropboxusercontent.com/u/34601363/toomuchscience.gif\n    //\n    // Solution:\n    //\n    // We assume the radius of the polygon is half the size of the canvas at first\n    // at each index we check if the text overlaps.\n    //\n    // Where it does, we store that angle and that index.\n    //\n    // After finding the largest index and angle we calculate how much we need to remove\n    // from the shape radius to move the point inwards by that x.\n    //\n    // We average the left and right distances to get the maximum shape radius that can fit in the box\n    // along with labels.\n    //\n    // Once we have that, we can find the centre point for the chart, by taking the x text protrusion\n    // on each side, removing that from the size, halving it and adding the left x protrusion width.\n    //\n    // This will mean we have a shape fitted to the canvas, as large as it can be with the labels\n    // and position it in the most space efficient manner\n    //\n    // https://dl.dropboxusercontent.com/u/34601363/yeahscience.gif\n    var plFont = helpers$1.options._parseFont(scale.options.pointLabels); // Get maximum radius of the polygon. Either half the height (minus the text width) or half the width.\n    // Use this to calculate the offset + change. - Make sure L/R protrusion is at least 0 to stop issues with centre points\n\n\n    var furthestLimits = {\n      l: 0,\n      r: scale.width,\n      t: 0,\n      b: scale.height - scale.paddingTop\n    };\n    var furthestAngles = {};\n    var i, textSize, pointPosition;\n    scale.ctx.font = plFont.string;\n    scale._pointLabelSizes = [];\n    var valueCount = getValueCount(scale);\n\n    for (i = 0; i < valueCount; i++) {\n      pointPosition = scale.getPointPosition(i, scale.drawingArea + 5);\n      textSize = measureLabelSize(scale.ctx, plFont.lineHeight, scale.pointLabels[i] || '');\n      scale._pointLabelSizes[i] = textSize; // Add quarter circle to make degree 0 mean top of circle\n\n      var angleRadians = scale.getIndexAngle(i);\n      var angle = helpers$1.toDegrees(angleRadians) % 360;\n      var hLimits = determineLimits(angle, pointPosition.x, textSize.w, 0, 180);\n      var vLimits = determineLimits(angle, pointPosition.y, textSize.h, 90, 270);\n\n      if (hLimits.start < furthestLimits.l) {\n        furthestLimits.l = hLimits.start;\n        furthestAngles.l = angleRadians;\n      }\n\n      if (hLimits.end > furthestLimits.r) {\n        furthestLimits.r = hLimits.end;\n        furthestAngles.r = angleRadians;\n      }\n\n      if (vLimits.start < furthestLimits.t) {\n        furthestLimits.t = vLimits.start;\n        furthestAngles.t = angleRadians;\n      }\n\n      if (vLimits.end > furthestLimits.b) {\n        furthestLimits.b = vLimits.end;\n        furthestAngles.b = angleRadians;\n      }\n    }\n\n    scale.setReductions(scale.drawingArea, furthestLimits, furthestAngles);\n  }\n\n  function getTextAlignForAngle(angle) {\n    if (angle === 0 || angle === 180) {\n      return 'center';\n    } else if (angle < 180) {\n      return 'left';\n    }\n\n    return 'right';\n  }\n\n  function fillText(ctx, text, position, lineHeight) {\n    var y = position.y + lineHeight / 2;\n    var i, ilen;\n\n    if (helpers$1.isArray(text)) {\n      for (i = 0, ilen = text.length; i < ilen; ++i) {\n        ctx.fillText(text[i], position.x, y);\n        y += lineHeight;\n      }\n    } else {\n      ctx.fillText(text, position.x, y);\n    }\n  }\n\n  function adjustPointPositionForLabelHeight(angle, textSize, position) {\n    if (angle === 90 || angle === 270) {\n      position.y -= textSize.h / 2;\n    } else if (angle > 270 || angle < 90) {\n      position.y -= textSize.h;\n    }\n  }\n\n  function drawPointLabels(scale) {\n    var ctx = scale.ctx;\n    var opts = scale.options;\n    var angleLineOpts = opts.angleLines;\n    var gridLineOpts = opts.gridLines;\n    var pointLabelOpts = opts.pointLabels;\n    var lineWidth = valueOrDefault$b(angleLineOpts.lineWidth, gridLineOpts.lineWidth);\n    var lineColor = valueOrDefault$b(angleLineOpts.color, gridLineOpts.color);\n    var tickBackdropHeight = getTickBackdropHeight(opts);\n    ctx.save();\n    ctx.lineWidth = lineWidth;\n    ctx.strokeStyle = lineColor;\n\n    if (ctx.setLineDash) {\n      ctx.setLineDash(resolve$7([angleLineOpts.borderDash, gridLineOpts.borderDash, []]));\n      ctx.lineDashOffset = resolve$7([angleLineOpts.borderDashOffset, gridLineOpts.borderDashOffset, 0.0]);\n    }\n\n    var outerDistance = scale.getDistanceFromCenterForValue(opts.ticks.reverse ? scale.min : scale.max); // Point Label Font\n\n    var plFont = helpers$1.options._parseFont(pointLabelOpts);\n\n    ctx.font = plFont.string;\n    ctx.textBaseline = 'middle';\n\n    for (var i = getValueCount(scale) - 1; i >= 0; i--) {\n      if (angleLineOpts.display && lineWidth && lineColor) {\n        var outerPosition = scale.getPointPosition(i, outerDistance);\n        ctx.beginPath();\n        ctx.moveTo(scale.xCenter, scale.yCenter);\n        ctx.lineTo(outerPosition.x, outerPosition.y);\n        ctx.stroke();\n      }\n\n      if (pointLabelOpts.display) {\n        // Extra pixels out for some label spacing\n        var extra = i === 0 ? tickBackdropHeight / 2 : 0;\n        var pointLabelPosition = scale.getPointPosition(i, outerDistance + extra + 5); // Keep this in loop since we may support array properties here\n\n        var pointLabelFontColor = valueAtIndexOrDefault$1(pointLabelOpts.fontColor, i, core_defaults.global.defaultFontColor);\n        ctx.fillStyle = pointLabelFontColor;\n        var angleRadians = scale.getIndexAngle(i);\n        var angle = helpers$1.toDegrees(angleRadians);\n        ctx.textAlign = getTextAlignForAngle(angle);\n        adjustPointPositionForLabelHeight(angle, scale._pointLabelSizes[i], pointLabelPosition);\n        fillText(ctx, scale.pointLabels[i] || '', pointLabelPosition, plFont.lineHeight);\n      }\n    }\n\n    ctx.restore();\n  }\n\n  function drawRadiusLine(scale, gridLineOpts, radius, index) {\n    var ctx = scale.ctx;\n    var circular = gridLineOpts.circular;\n    var valueCount = getValueCount(scale);\n    var lineColor = valueAtIndexOrDefault$1(gridLineOpts.color, index - 1);\n    var lineWidth = valueAtIndexOrDefault$1(gridLineOpts.lineWidth, index - 1);\n    var pointPosition;\n\n    if (!circular && !valueCount || !lineColor || !lineWidth) {\n      return;\n    }\n\n    ctx.save();\n    ctx.strokeStyle = lineColor;\n    ctx.lineWidth = lineWidth;\n\n    if (ctx.setLineDash) {\n      ctx.setLineDash(gridLineOpts.borderDash || []);\n      ctx.lineDashOffset = gridLineOpts.borderDashOffset || 0.0;\n    }\n\n    ctx.beginPath();\n\n    if (circular) {\n      // Draw circular arcs between the points\n      ctx.arc(scale.xCenter, scale.yCenter, radius, 0, Math.PI * 2);\n    } else {\n      // Draw straight lines connecting each index\n      pointPosition = scale.getPointPosition(0, radius);\n      ctx.moveTo(pointPosition.x, pointPosition.y);\n\n      for (var i = 1; i < valueCount; i++) {\n        pointPosition = scale.getPointPosition(i, radius);\n        ctx.lineTo(pointPosition.x, pointPosition.y);\n      }\n    }\n\n    ctx.closePath();\n    ctx.stroke();\n    ctx.restore();\n  }\n\n  function numberOrZero(param) {\n    return helpers$1.isNumber(param) ? param : 0;\n  }\n\n  var scale_radialLinear = scale_linearbase.extend({\n    setDimensions: function setDimensions() {\n      var me = this; // Set the unconstrained dimension before label rotation\n\n      me.width = me.maxWidth;\n      me.height = me.maxHeight;\n      me.paddingTop = getTickBackdropHeight(me.options) / 2;\n      me.xCenter = Math.floor(me.width / 2);\n      me.yCenter = Math.floor((me.height - me.paddingTop) / 2);\n      me.drawingArea = Math.min(me.height - me.paddingTop, me.width) / 2;\n    },\n    determineDataLimits: function determineDataLimits() {\n      var me = this;\n      var chart = me.chart;\n      var min = Number.POSITIVE_INFINITY;\n      var max = Number.NEGATIVE_INFINITY;\n      helpers$1.each(chart.data.datasets, function (dataset, datasetIndex) {\n        if (chart.isDatasetVisible(datasetIndex)) {\n          var meta = chart.getDatasetMeta(datasetIndex);\n          helpers$1.each(dataset.data, function (rawValue, index) {\n            var value = +me.getRightValue(rawValue);\n\n            if (isNaN(value) || meta.data[index].hidden) {\n              return;\n            }\n\n            min = Math.min(value, min);\n            max = Math.max(value, max);\n          });\n        }\n      });\n      me.min = min === Number.POSITIVE_INFINITY ? 0 : min;\n      me.max = max === Number.NEGATIVE_INFINITY ? 0 : max; // Common base implementation to handle ticks.min, ticks.max, ticks.beginAtZero\n\n      me.handleTickRangeOptions();\n    },\n    // Returns the maximum number of ticks based on the scale dimension\n    _computeTickLimit: function _computeTickLimit() {\n      return Math.ceil(this.drawingArea / getTickBackdropHeight(this.options));\n    },\n    convertTicksToLabels: function convertTicksToLabels() {\n      var me = this;\n      scale_linearbase.prototype.convertTicksToLabels.call(me); // Point labels\n\n      me.pointLabels = me.chart.data.labels.map(me.options.pointLabels.callback, me);\n    },\n    getLabelForIndex: function getLabelForIndex(index, datasetIndex) {\n      return +this.getRightValue(this.chart.data.datasets[datasetIndex].data[index]);\n    },\n    fit: function fit() {\n      var me = this;\n      var opts = me.options;\n\n      if (opts.display && opts.pointLabels.display) {\n        fitWithPointLabels(me);\n      } else {\n        me.setCenterPoint(0, 0, 0, 0);\n      }\n    },\n\n    /**\n     * Set radius reductions and determine new radius and center point\n     * @private\n     */\n    setReductions: function setReductions(largestPossibleRadius, furthestLimits, furthestAngles) {\n      var me = this;\n      var radiusReductionLeft = furthestLimits.l / Math.sin(furthestAngles.l);\n      var radiusReductionRight = Math.max(furthestLimits.r - me.width, 0) / Math.sin(furthestAngles.r);\n      var radiusReductionTop = -furthestLimits.t / Math.cos(furthestAngles.t);\n      var radiusReductionBottom = -Math.max(furthestLimits.b - (me.height - me.paddingTop), 0) / Math.cos(furthestAngles.b);\n      radiusReductionLeft = numberOrZero(radiusReductionLeft);\n      radiusReductionRight = numberOrZero(radiusReductionRight);\n      radiusReductionTop = numberOrZero(radiusReductionTop);\n      radiusReductionBottom = numberOrZero(radiusReductionBottom);\n      me.drawingArea = Math.min(Math.floor(largestPossibleRadius - (radiusReductionLeft + radiusReductionRight) / 2), Math.floor(largestPossibleRadius - (radiusReductionTop + radiusReductionBottom) / 2));\n      me.setCenterPoint(radiusReductionLeft, radiusReductionRight, radiusReductionTop, radiusReductionBottom);\n    },\n    setCenterPoint: function setCenterPoint(leftMovement, rightMovement, topMovement, bottomMovement) {\n      var me = this;\n      var maxRight = me.width - rightMovement - me.drawingArea;\n      var maxLeft = leftMovement + me.drawingArea;\n      var maxTop = topMovement + me.drawingArea;\n      var maxBottom = me.height - me.paddingTop - bottomMovement - me.drawingArea;\n      me.xCenter = Math.floor((maxLeft + maxRight) / 2 + me.left);\n      me.yCenter = Math.floor((maxTop + maxBottom) / 2 + me.top + me.paddingTop);\n    },\n    getIndexAngle: function getIndexAngle(index) {\n      var angleMultiplier = Math.PI * 2 / getValueCount(this);\n      var startAngle = this.chart.options && this.chart.options.startAngle ? this.chart.options.startAngle : 0;\n      var startAngleRadians = startAngle * Math.PI * 2 / 360; // Start from the top instead of right, so remove a quarter of the circle\n\n      return index * angleMultiplier + startAngleRadians;\n    },\n    getDistanceFromCenterForValue: function getDistanceFromCenterForValue(value) {\n      var me = this;\n\n      if (value === null) {\n        return 0; // null always in center\n      } // Take into account half font size + the yPadding of the top value\n\n\n      var scalingFactor = me.drawingArea / (me.max - me.min);\n\n      if (me.options.ticks.reverse) {\n        return (me.max - value) * scalingFactor;\n      }\n\n      return (value - me.min) * scalingFactor;\n    },\n    getPointPosition: function getPointPosition(index, distanceFromCenter) {\n      var me = this;\n      var thisAngle = me.getIndexAngle(index) - Math.PI / 2;\n      return {\n        x: Math.cos(thisAngle) * distanceFromCenter + me.xCenter,\n        y: Math.sin(thisAngle) * distanceFromCenter + me.yCenter\n      };\n    },\n    getPointPositionForValue: function getPointPositionForValue(index, value) {\n      return this.getPointPosition(index, this.getDistanceFromCenterForValue(value));\n    },\n    getBasePosition: function getBasePosition() {\n      var me = this;\n      var min = me.min;\n      var max = me.max;\n      return me.getPointPositionForValue(0, me.beginAtZero ? 0 : min < 0 && max < 0 ? max : min > 0 && max > 0 ? min : 0);\n    },\n    draw: function draw() {\n      var me = this;\n      var opts = me.options;\n      var gridLineOpts = opts.gridLines;\n      var tickOpts = opts.ticks;\n\n      if (opts.display) {\n        var ctx = me.ctx;\n        var startAngle = this.getIndexAngle(0);\n\n        var tickFont = helpers$1.options._parseFont(tickOpts);\n\n        if (opts.angleLines.display || opts.pointLabels.display) {\n          drawPointLabels(me);\n        }\n\n        helpers$1.each(me.ticks, function (label, index) {\n          // Don't draw a centre value (if it is minimum)\n          if (index > 0 || tickOpts.reverse) {\n            var yCenterOffset = me.getDistanceFromCenterForValue(me.ticksAsNumbers[index]); // Draw circular lines around the scale\n\n            if (gridLineOpts.display && index !== 0) {\n              drawRadiusLine(me, gridLineOpts, yCenterOffset, index);\n            }\n\n            if (tickOpts.display) {\n              var tickFontColor = valueOrDefault$b(tickOpts.fontColor, core_defaults.global.defaultFontColor);\n              ctx.font = tickFont.string;\n              ctx.save();\n              ctx.translate(me.xCenter, me.yCenter);\n              ctx.rotate(startAngle);\n\n              if (tickOpts.showLabelBackdrop) {\n                var labelWidth = ctx.measureText(label).width;\n                ctx.fillStyle = tickOpts.backdropColor;\n                ctx.fillRect(-labelWidth / 2 - tickOpts.backdropPaddingX, -yCenterOffset - tickFont.size / 2 - tickOpts.backdropPaddingY, labelWidth + tickOpts.backdropPaddingX * 2, tickFont.size + tickOpts.backdropPaddingY * 2);\n              }\n\n              ctx.textAlign = 'center';\n              ctx.textBaseline = 'middle';\n              ctx.fillStyle = tickFontColor;\n              ctx.fillText(label, 0, -yCenterOffset);\n              ctx.restore();\n            }\n          }\n        });\n      }\n    }\n  }); // INTERNAL: static default options, registered in src/index.js\n\n  var _defaults$3 = defaultConfig$3;\n  scale_radialLinear._defaults = _defaults$3;\n  var valueOrDefault$c = helpers$1.valueOrDefault; // Integer constants are from the ES6 spec.\n\n  var MIN_INTEGER = Number.MIN_SAFE_INTEGER || -9007199254740991;\n  var MAX_INTEGER = Number.MAX_SAFE_INTEGER || 9007199254740991;\n  var INTERVALS = {\n    millisecond: {\n      common: true,\n      size: 1,\n      steps: [1, 2, 5, 10, 20, 50, 100, 250, 500]\n    },\n    second: {\n      common: true,\n      size: 1000,\n      steps: [1, 2, 5, 10, 15, 30]\n    },\n    minute: {\n      common: true,\n      size: 60000,\n      steps: [1, 2, 5, 10, 15, 30]\n    },\n    hour: {\n      common: true,\n      size: 3600000,\n      steps: [1, 2, 3, 6, 12]\n    },\n    day: {\n      common: true,\n      size: 86400000,\n      steps: [1, 2, 5]\n    },\n    week: {\n      common: false,\n      size: 604800000,\n      steps: [1, 2, 3, 4]\n    },\n    month: {\n      common: true,\n      size: 2.628e9,\n      steps: [1, 2, 3]\n    },\n    quarter: {\n      common: false,\n      size: 7.884e9,\n      steps: [1, 2, 3, 4]\n    },\n    year: {\n      common: true,\n      size: 3.154e10\n    }\n  };\n  var UNITS = Object.keys(INTERVALS);\n\n  function sorter(a, b) {\n    return a - b;\n  }\n\n  function arrayUnique(items) {\n    var hash = {};\n    var out = [];\n    var i, ilen, item;\n\n    for (i = 0, ilen = items.length; i < ilen; ++i) {\n      item = items[i];\n\n      if (!hash[item]) {\n        hash[item] = true;\n        out.push(item);\n      }\n    }\n\n    return out;\n  }\n  /**\n   * Returns an array of {time, pos} objects used to interpolate a specific `time` or position\n   * (`pos`) on the scale, by searching entries before and after the requested value. `pos` is\n   * a decimal between 0 and 1: 0 being the start of the scale (left or top) and 1 the other\n   * extremity (left + width or top + height). Note that it would be more optimized to directly\n   * store pre-computed pixels, but the scale dimensions are not guaranteed at the time we need\n   * to create the lookup table. The table ALWAYS contains at least two items: min and max.\n   *\n   * @param {number[]} timestamps - timestamps sorted from lowest to highest.\n   * @param {string} distribution - If 'linear', timestamps will be spread linearly along the min\n   * and max range, so basically, the table will contains only two items: {min, 0} and {max, 1}.\n   * If 'series', timestamps will be positioned at the same distance from each other. In this\n   * case, only timestamps that break the time linearity are registered, meaning that in the\n   * best case, all timestamps are linear, the table contains only min and max.\n   */\n\n\n  function buildLookupTable(timestamps, min, max, distribution) {\n    if (distribution === 'linear' || !timestamps.length) {\n      return [{\n        time: min,\n        pos: 0\n      }, {\n        time: max,\n        pos: 1\n      }];\n    }\n\n    var table = [];\n    var items = [min];\n    var i, ilen, prev, curr, next;\n\n    for (i = 0, ilen = timestamps.length; i < ilen; ++i) {\n      curr = timestamps[i];\n\n      if (curr > min && curr < max) {\n        items.push(curr);\n      }\n    }\n\n    items.push(max);\n\n    for (i = 0, ilen = items.length; i < ilen; ++i) {\n      next = items[i + 1];\n      prev = items[i - 1];\n      curr = items[i]; // only add points that breaks the scale linearity\n\n      if (prev === undefined || next === undefined || Math.round((next + prev) / 2) !== curr) {\n        table.push({\n          time: curr,\n          pos: i / (ilen - 1)\n        });\n      }\n    }\n\n    return table;\n  } // @see adapted from https://www.anujgakhar.com/2014/03/01/binary-search-in-javascript/\n\n\n  function lookup(table, key, value) {\n    var lo = 0;\n    var hi = table.length - 1;\n    var mid, i0, i1;\n\n    while (lo >= 0 && lo <= hi) {\n      mid = lo + hi >> 1;\n      i0 = table[mid - 1] || null;\n      i1 = table[mid];\n\n      if (!i0) {\n        // given value is outside table (before first item)\n        return {\n          lo: null,\n          hi: i1\n        };\n      } else if (i1[key] < value) {\n        lo = mid + 1;\n      } else if (i0[key] > value) {\n        hi = mid - 1;\n      } else {\n        return {\n          lo: i0,\n          hi: i1\n        };\n      }\n    } // given value is outside table (after last item)\n\n\n    return {\n      lo: i1,\n      hi: null\n    };\n  }\n  /**\n   * Linearly interpolates the given source `value` using the table items `skey` values and\n   * returns the associated `tkey` value. For example, interpolate(table, 'time', 42, 'pos')\n   * returns the position for a timestamp equal to 42. If value is out of bounds, values at\n   * index [0, 1] or [n - 1, n] are used for the interpolation.\n   */\n\n\n  function interpolate$1(table, skey, sval, tkey) {\n    var range = lookup(table, skey, sval); // Note: the lookup table ALWAYS contains at least 2 items (min and max)\n\n    var prev = !range.lo ? table[0] : !range.hi ? table[table.length - 2] : range.lo;\n    var next = !range.lo ? table[1] : !range.hi ? table[table.length - 1] : range.hi;\n    var span = next[skey] - prev[skey];\n    var ratio = span ? (sval - prev[skey]) / span : 0;\n    var offset = (next[tkey] - prev[tkey]) * ratio;\n    return prev[tkey] + offset;\n  }\n\n  function toTimestamp(scale, input) {\n    var adapter = scale._adapter;\n    var options = scale.options.time;\n    var parser = options.parser;\n    var format = parser || options.format;\n    var value = input;\n\n    if (typeof parser === 'function') {\n      value = parser(value);\n    } // Only parse if its not a timestamp already\n\n\n    if (!helpers$1.isFinite(value)) {\n      value = typeof format === 'string' ? adapter.parse(value, format) : adapter.parse(value);\n    }\n\n    if (value !== null) {\n      return +value;\n    } // Labels are in an incompatible format and no `parser` has been provided.\n    // The user might still use the deprecated `format` option for parsing.\n\n\n    if (!parser && typeof format === 'function') {\n      value = format(input); // `format` could return something else than a timestamp, if so, parse it\n\n      if (!helpers$1.isFinite(value)) {\n        value = adapter.parse(value);\n      }\n    }\n\n    return value;\n  }\n\n  function parse(scale, input) {\n    if (helpers$1.isNullOrUndef(input)) {\n      return null;\n    }\n\n    var options = scale.options.time;\n    var value = toTimestamp(scale, scale.getRightValue(input));\n\n    if (value === null) {\n      return value;\n    }\n\n    if (options.round) {\n      value = +scale._adapter.startOf(value, options.round);\n    }\n\n    return value;\n  }\n  /**\n   * Returns the number of unit to skip to be able to display up to `capacity` number of ticks\n   * in `unit` for the given `min` / `max` range and respecting the interval steps constraints.\n   */\n\n\n  function determineStepSize(min, max, unit, capacity) {\n    var range = max - min;\n    var interval = INTERVALS[unit];\n    var milliseconds = interval.size;\n    var steps = interval.steps;\n    var i, ilen, factor;\n\n    if (!steps) {\n      return Math.ceil(range / (capacity * milliseconds));\n    }\n\n    for (i = 0, ilen = steps.length; i < ilen; ++i) {\n      factor = steps[i];\n\n      if (Math.ceil(range / (milliseconds * factor)) <= capacity) {\n        break;\n      }\n    }\n\n    return factor;\n  }\n  /**\n   * Figures out what unit results in an appropriate number of auto-generated ticks\n   */\n\n\n  function determineUnitForAutoTicks(minUnit, min, max, capacity) {\n    var ilen = UNITS.length;\n    var i, interval, factor;\n\n    for (i = UNITS.indexOf(minUnit); i < ilen - 1; ++i) {\n      interval = INTERVALS[UNITS[i]];\n      factor = interval.steps ? interval.steps[interval.steps.length - 1] : MAX_INTEGER;\n\n      if (interval.common && Math.ceil((max - min) / (factor * interval.size)) <= capacity) {\n        return UNITS[i];\n      }\n    }\n\n    return UNITS[ilen - 1];\n  }\n  /**\n   * Figures out what unit to format a set of ticks with\n   */\n\n\n  function determineUnitForFormatting(scale, ticks, minUnit, min, max) {\n    var ilen = UNITS.length;\n    var i, unit;\n\n    for (i = ilen - 1; i >= UNITS.indexOf(minUnit); i--) {\n      unit = UNITS[i];\n\n      if (INTERVALS[unit].common && scale._adapter.diff(max, min, unit) >= ticks.length) {\n        return unit;\n      }\n    }\n\n    return UNITS[minUnit ? UNITS.indexOf(minUnit) : 0];\n  }\n\n  function determineMajorUnit(unit) {\n    for (var i = UNITS.indexOf(unit) + 1, ilen = UNITS.length; i < ilen; ++i) {\n      if (INTERVALS[UNITS[i]].common) {\n        return UNITS[i];\n      }\n    }\n  }\n  /**\n   * Generates a maximum of `capacity` timestamps between min and max, rounded to the\n   * `minor` unit, aligned on the `major` unit and using the given scale time `options`.\n   * Important: this method can return ticks outside the min and max range, it's the\n   * responsibility of the calling code to clamp values if needed.\n   */\n\n\n  function generate(scale, min, max, capacity) {\n    var adapter = scale._adapter;\n    var options = scale.options;\n    var timeOpts = options.time;\n    var minor = timeOpts.unit || determineUnitForAutoTicks(timeOpts.minUnit, min, max, capacity);\n    var major = determineMajorUnit(minor);\n    var stepSize = valueOrDefault$c(timeOpts.stepSize, timeOpts.unitStepSize);\n    var weekday = minor === 'week' ? timeOpts.isoWeekday : false;\n    var majorTicksEnabled = options.ticks.major.enabled;\n    var interval = INTERVALS[minor];\n    var first = min;\n    var last = max;\n    var ticks = [];\n    var time;\n\n    if (!stepSize) {\n      stepSize = determineStepSize(min, max, minor, capacity);\n    } // For 'week' unit, handle the first day of week option\n\n\n    if (weekday) {\n      first = +adapter.startOf(first, 'isoWeek', weekday);\n      last = +adapter.startOf(last, 'isoWeek', weekday);\n    } // Align first/last ticks on unit\n\n\n    first = +adapter.startOf(first, weekday ? 'day' : minor);\n    last = +adapter.startOf(last, weekday ? 'day' : minor); // Make sure that the last tick include max\n\n    if (last < max) {\n      last = +adapter.add(last, 1, minor);\n    }\n\n    time = first;\n\n    if (majorTicksEnabled && major && !weekday && !timeOpts.round) {\n      // Align the first tick on the previous `minor` unit aligned on the `major` unit:\n      // we first aligned time on the previous `major` unit then add the number of full\n      // stepSize there is between first and the previous major time.\n      time = +adapter.startOf(time, major);\n      time = +adapter.add(time, ~~((first - time) / (interval.size * stepSize)) * stepSize, minor);\n    }\n\n    for (; time < last; time = +adapter.add(time, stepSize, minor)) {\n      ticks.push(+time);\n    }\n\n    ticks.push(+time);\n    return ticks;\n  }\n  /**\n   * Returns the start and end offsets from edges in the form of {start, end}\n   * where each value is a relative width to the scale and ranges between 0 and 1.\n   * They add extra margins on the both sides by scaling down the original scale.\n   * Offsets are added when the `offset` option is true.\n   */\n\n\n  function computeOffsets(table, ticks, min, max, options) {\n    var start = 0;\n    var end = 0;\n    var first, last;\n\n    if (options.offset && ticks.length) {\n      if (!options.time.min) {\n        first = interpolate$1(table, 'time', ticks[0], 'pos');\n\n        if (ticks.length === 1) {\n          start = 1 - first;\n        } else {\n          start = (interpolate$1(table, 'time', ticks[1], 'pos') - first) / 2;\n        }\n      }\n\n      if (!options.time.max) {\n        last = interpolate$1(table, 'time', ticks[ticks.length - 1], 'pos');\n\n        if (ticks.length === 1) {\n          end = last;\n        } else {\n          end = (last - interpolate$1(table, 'time', ticks[ticks.length - 2], 'pos')) / 2;\n        }\n      }\n    }\n\n    return {\n      start: start,\n      end: end\n    };\n  }\n\n  function ticksFromTimestamps(scale, values, majorUnit) {\n    var ticks = [];\n    var i, ilen, value, major;\n\n    for (i = 0, ilen = values.length; i < ilen; ++i) {\n      value = values[i];\n      major = majorUnit ? value === +scale._adapter.startOf(value, majorUnit) : false;\n      ticks.push({\n        value: value,\n        major: major\n      });\n    }\n\n    return ticks;\n  }\n\n  var defaultConfig$4 = {\n    position: 'bottom',\n\n    /**\n     * Data distribution along the scale:\n     * - 'linear': data are spread according to their time (distances can vary),\n     * - 'series': data are spread at the same distance from each other.\n     * @see https://github.com/chartjs/Chart.js/pull/4507\n     * @since 2.7.0\n     */\n    distribution: 'linear',\n\n    /**\n     * Scale boundary strategy (bypassed by min/max time options)\n     * - `data`: make sure data are fully visible, ticks outside are removed\n     * - `ticks`: make sure ticks are fully visible, data outside are truncated\n     * @see https://github.com/chartjs/Chart.js/pull/4556\n     * @since 2.7.0\n     */\n    bounds: 'data',\n    adapters: {},\n    time: {\n      parser: false,\n      // false == a pattern string from https://momentjs.com/docs/#/parsing/string-format/ or a custom callback that converts its argument to a moment\n      format: false,\n      // DEPRECATED false == date objects, moment object, callback or a pattern string from https://momentjs.com/docs/#/parsing/string-format/\n      unit: false,\n      // false == automatic or override with week, month, year, etc.\n      round: false,\n      // none, or override with week, month, year, etc.\n      displayFormat: false,\n      // DEPRECATED\n      isoWeekday: false,\n      // override week start day - see https://momentjs.com/docs/#/get-set/iso-weekday/\n      minUnit: 'millisecond',\n      displayFormats: {}\n    },\n    ticks: {\n      autoSkip: false,\n\n      /**\n       * Ticks generation input values:\n       * - 'auto': generates \"optimal\" ticks based on scale size and time options.\n       * - 'data': generates ticks from data (including labels from data {t|x|y} objects).\n       * - 'labels': generates ticks from user given `data.labels` values ONLY.\n       * @see https://github.com/chartjs/Chart.js/pull/4507\n       * @since 2.7.0\n       */\n      source: 'auto',\n      major: {\n        enabled: false\n      }\n    }\n  };\n  var scale_time = core_scale.extend({\n    initialize: function initialize() {\n      this.mergeTicksOptions();\n      core_scale.prototype.initialize.call(this);\n    },\n    update: function update() {\n      var me = this;\n      var options = me.options;\n      var time = options.time || (options.time = {});\n      var adapter = me._adapter = new core_adapters._date(options.adapters.date); // DEPRECATIONS: output a message only one time per update\n\n      if (time.format) {\n        console.warn('options.time.format is deprecated and replaced by options.time.parser.');\n      } // Backward compatibility: before introducing adapter, `displayFormats` was\n      // supposed to contain *all* unit/string pairs but this can't be resolved\n      // when loading the scale (adapters are loaded afterward), so let's populate\n      // missing formats on update\n\n\n      helpers$1.mergeIf(time.displayFormats, adapter.formats());\n      return core_scale.prototype.update.apply(me, arguments);\n    },\n\n    /**\n     * Allows data to be referenced via 't' attribute\n     */\n    getRightValue: function getRightValue(rawValue) {\n      if (rawValue && rawValue.t !== undefined) {\n        rawValue = rawValue.t;\n      }\n\n      return core_scale.prototype.getRightValue.call(this, rawValue);\n    },\n    determineDataLimits: function determineDataLimits() {\n      var me = this;\n      var chart = me.chart;\n      var adapter = me._adapter;\n      var timeOpts = me.options.time;\n      var unit = timeOpts.unit || 'day';\n      var min = MAX_INTEGER;\n      var max = MIN_INTEGER;\n      var timestamps = [];\n      var datasets = [];\n      var labels = [];\n      var i, j, ilen, jlen, data, timestamp;\n      var dataLabels = chart.data.labels || []; // Convert labels to timestamps\n\n      for (i = 0, ilen = dataLabels.length; i < ilen; ++i) {\n        labels.push(parse(me, dataLabels[i]));\n      } // Convert data to timestamps\n\n\n      for (i = 0, ilen = (chart.data.datasets || []).length; i < ilen; ++i) {\n        if (chart.isDatasetVisible(i)) {\n          data = chart.data.datasets[i].data; // Let's consider that all data have the same format.\n\n          if (helpers$1.isObject(data[0])) {\n            datasets[i] = [];\n\n            for (j = 0, jlen = data.length; j < jlen; ++j) {\n              timestamp = parse(me, data[j]);\n              timestamps.push(timestamp);\n              datasets[i][j] = timestamp;\n            }\n          } else {\n            for (j = 0, jlen = labels.length; j < jlen; ++j) {\n              timestamps.push(labels[j]);\n            }\n\n            datasets[i] = labels.slice(0);\n          }\n        } else {\n          datasets[i] = [];\n        }\n      }\n\n      if (labels.length) {\n        // Sort labels **after** data have been converted\n        labels = arrayUnique(labels).sort(sorter);\n        min = Math.min(min, labels[0]);\n        max = Math.max(max, labels[labels.length - 1]);\n      }\n\n      if (timestamps.length) {\n        timestamps = arrayUnique(timestamps).sort(sorter);\n        min = Math.min(min, timestamps[0]);\n        max = Math.max(max, timestamps[timestamps.length - 1]);\n      }\n\n      min = parse(me, timeOpts.min) || min;\n      max = parse(me, timeOpts.max) || max; // In case there is no valid min/max, set limits based on unit time option\n\n      min = min === MAX_INTEGER ? +adapter.startOf(Date.now(), unit) : min;\n      max = max === MIN_INTEGER ? +adapter.endOf(Date.now(), unit) + 1 : max; // Make sure that max is strictly higher than min (required by the lookup table)\n\n      me.min = Math.min(min, max);\n      me.max = Math.max(min + 1, max); // PRIVATE\n\n      me._horizontal = me.isHorizontal();\n      me._table = [];\n      me._timestamps = {\n        data: timestamps,\n        datasets: datasets,\n        labels: labels\n      };\n    },\n    buildTicks: function buildTicks() {\n      var me = this;\n      var min = me.min;\n      var max = me.max;\n      var options = me.options;\n      var timeOpts = options.time;\n      var timestamps = [];\n      var ticks = [];\n      var i, ilen, timestamp;\n\n      switch (options.ticks.source) {\n        case 'data':\n          timestamps = me._timestamps.data;\n          break;\n\n        case 'labels':\n          timestamps = me._timestamps.labels;\n          break;\n\n        case 'auto':\n        default:\n          timestamps = generate(me, min, max, me.getLabelCapacity(min), options);\n      }\n\n      if (options.bounds === 'ticks' && timestamps.length) {\n        min = timestamps[0];\n        max = timestamps[timestamps.length - 1];\n      } // Enforce limits with user min/max options\n\n\n      min = parse(me, timeOpts.min) || min;\n      max = parse(me, timeOpts.max) || max; // Remove ticks outside the min/max range\n\n      for (i = 0, ilen = timestamps.length; i < ilen; ++i) {\n        timestamp = timestamps[i];\n\n        if (timestamp >= min && timestamp <= max) {\n          ticks.push(timestamp);\n        }\n      }\n\n      me.min = min;\n      me.max = max; // PRIVATE\n\n      me._unit = timeOpts.unit || determineUnitForFormatting(me, ticks, timeOpts.minUnit, me.min, me.max);\n      me._majorUnit = determineMajorUnit(me._unit);\n      me._table = buildLookupTable(me._timestamps.data, min, max, options.distribution);\n      me._offsets = computeOffsets(me._table, ticks, min, max, options);\n\n      if (options.ticks.reverse) {\n        ticks.reverse();\n      }\n\n      return ticksFromTimestamps(me, ticks, me._majorUnit);\n    },\n    getLabelForIndex: function getLabelForIndex(index, datasetIndex) {\n      var me = this;\n      var adapter = me._adapter;\n      var data = me.chart.data;\n      var timeOpts = me.options.time;\n      var label = data.labels && index < data.labels.length ? data.labels[index] : '';\n      var value = data.datasets[datasetIndex].data[index];\n\n      if (helpers$1.isObject(value)) {\n        label = me.getRightValue(value);\n      }\n\n      if (timeOpts.tooltipFormat) {\n        return adapter.format(toTimestamp(me, label), timeOpts.tooltipFormat);\n      }\n\n      if (typeof label === 'string') {\n        return label;\n      }\n\n      return adapter.format(toTimestamp(me, label), timeOpts.displayFormats.datetime);\n    },\n\n    /**\n     * Function to format an individual tick mark\n     * @private\n     */\n    tickFormatFunction: function tickFormatFunction(time, index, ticks, format) {\n      var me = this;\n      var adapter = me._adapter;\n      var options = me.options;\n      var formats = options.time.displayFormats;\n      var minorFormat = formats[me._unit];\n      var majorUnit = me._majorUnit;\n      var majorFormat = formats[majorUnit];\n      var majorTime = +adapter.startOf(time, majorUnit);\n      var majorTickOpts = options.ticks.major;\n      var major = majorTickOpts.enabled && majorUnit && majorFormat && time === majorTime;\n      var label = adapter.format(time, format ? format : major ? majorFormat : minorFormat);\n      var tickOpts = major ? majorTickOpts : options.ticks.minor;\n      var formatter = valueOrDefault$c(tickOpts.callback, tickOpts.userCallback);\n      return formatter ? formatter(label, index, ticks) : label;\n    },\n    convertTicksToLabels: function convertTicksToLabels(ticks) {\n      var labels = [];\n      var i, ilen;\n\n      for (i = 0, ilen = ticks.length; i < ilen; ++i) {\n        labels.push(this.tickFormatFunction(ticks[i].value, i, ticks));\n      }\n\n      return labels;\n    },\n\n    /**\n     * @private\n     */\n    getPixelForOffset: function getPixelForOffset(time) {\n      var me = this;\n      var isReverse = me.options.ticks.reverse;\n      var size = me._horizontal ? me.width : me.height;\n      var start = me._horizontal ? isReverse ? me.right : me.left : isReverse ? me.bottom : me.top;\n      var pos = interpolate$1(me._table, 'time', time, 'pos');\n      var offset = size * (me._offsets.start + pos) / (me._offsets.start + 1 + me._offsets.end);\n      return isReverse ? start - offset : start + offset;\n    },\n    getPixelForValue: function getPixelForValue(value, index, datasetIndex) {\n      var me = this;\n      var time = null;\n\n      if (index !== undefined && datasetIndex !== undefined) {\n        time = me._timestamps.datasets[datasetIndex][index];\n      }\n\n      if (time === null) {\n        time = parse(me, value);\n      }\n\n      if (time !== null) {\n        return me.getPixelForOffset(time);\n      }\n    },\n    getPixelForTick: function getPixelForTick(index) {\n      var ticks = this.getTicks();\n      return index >= 0 && index < ticks.length ? this.getPixelForOffset(ticks[index].value) : null;\n    },\n    getValueForPixel: function getValueForPixel(pixel) {\n      var me = this;\n      var size = me._horizontal ? me.width : me.height;\n      var start = me._horizontal ? me.left : me.top;\n      var pos = (size ? (pixel - start) / size : 0) * (me._offsets.start + 1 + me._offsets.start) - me._offsets.end;\n      var time = interpolate$1(me._table, 'pos', pos, 'time'); // DEPRECATION, we should return time directly\n\n      return me._adapter._create(time);\n    },\n\n    /**\n     * Crude approximation of what the label width might be\n     * @private\n     */\n    getLabelWidth: function getLabelWidth(label) {\n      var me = this;\n      var ticksOpts = me.options.ticks;\n      var tickLabelWidth = me.ctx.measureText(label).width;\n      var angle = helpers$1.toRadians(ticksOpts.maxRotation);\n      var cosRotation = Math.cos(angle);\n      var sinRotation = Math.sin(angle);\n      var tickFontSize = valueOrDefault$c(ticksOpts.fontSize, core_defaults.global.defaultFontSize);\n      return tickLabelWidth * cosRotation + tickFontSize * sinRotation;\n    },\n\n    /**\n     * @private\n     */\n    getLabelCapacity: function getLabelCapacity(exampleTime) {\n      var me = this; // pick the longest format (milliseconds) for guestimation\n\n      var format = me.options.time.displayFormats.millisecond;\n      var exampleLabel = me.tickFormatFunction(exampleTime, 0, [], format);\n      var tickLabelWidth = me.getLabelWidth(exampleLabel);\n      var innerWidth = me.isHorizontal() ? me.width : me.height;\n      var capacity = Math.floor(innerWidth / tickLabelWidth);\n      return capacity > 0 ? capacity : 1;\n    }\n  }); // INTERNAL: static default options, registered in src/index.js\n\n  var _defaults$4 = defaultConfig$4;\n  scale_time._defaults = _defaults$4;\n  var scales = {\n    category: scale_category,\n    linear: scale_linear,\n    logarithmic: scale_logarithmic,\n    radialLinear: scale_radialLinear,\n    time: scale_time\n  };\n  var FORMATS = {\n    datetime: 'MMM D, YYYY, h:mm:ss a',\n    millisecond: 'h:mm:ss.SSS a',\n    second: 'h:mm:ss a',\n    minute: 'h:mm a',\n    hour: 'hA',\n    day: 'MMM D',\n    week: 'll',\n    month: 'MMM YYYY',\n    quarter: '[Q]Q - YYYY',\n    year: 'YYYY'\n  };\n\n  core_adapters._date.override(typeof moment === 'function' ? {\n    _id: 'moment',\n    // DEBUG ONLY\n    formats: function formats() {\n      return FORMATS;\n    },\n    parse: function parse(value, format) {\n      if (typeof value === 'string' && typeof format === 'string') {\n        value = moment(value, format);\n      } else if (!(value instanceof moment)) {\n        value = moment(value);\n      }\n\n      return value.isValid() ? value.valueOf() : null;\n    },\n    format: function format(time, _format) {\n      return moment(time).format(_format);\n    },\n    add: function add(time, amount, unit) {\n      return moment(time).add(amount, unit).valueOf();\n    },\n    diff: function diff(max, min, unit) {\n      return moment.duration(moment(max).diff(moment(min))).as(unit);\n    },\n    startOf: function startOf(time, unit, weekday) {\n      time = moment(time);\n\n      if (unit === 'isoWeek') {\n        return time.isoWeekday(weekday).valueOf();\n      }\n\n      return time.startOf(unit).valueOf();\n    },\n    endOf: function endOf(time, unit) {\n      return moment(time).endOf(unit).valueOf();\n    },\n    // DEPRECATIONS\n\n    /**\n     * Provided for backward compatibility with scale.getValueForPixel().\n     * @deprecated since version 2.8.0\n     * @todo remove at version 3\n     * @private\n     */\n    _create: function _create(time) {\n      return moment(time);\n    }\n  } : {});\n\n  core_defaults._set('global', {\n    plugins: {\n      filler: {\n        propagate: true\n      }\n    }\n  });\n\n  var mappers = {\n    dataset: function dataset(source) {\n      var index = source.fill;\n      var chart = source.chart;\n      var meta = chart.getDatasetMeta(index);\n      var visible = meta && chart.isDatasetVisible(index);\n      var points = visible && meta.dataset._children || [];\n      var length = points.length || 0;\n      return !length ? null : function (point, i) {\n        return i < length && points[i]._view || null;\n      };\n    },\n    boundary: function boundary(source) {\n      var boundary = source.boundary;\n      var x = boundary ? boundary.x : null;\n      var y = boundary ? boundary.y : null;\n      return function (point) {\n        return {\n          x: x === null ? point.x : x,\n          y: y === null ? point.y : y\n        };\n      };\n    }\n  }; // @todo if (fill[0] === '#')\n\n  function decodeFill(el, index, count) {\n    var model = el._model || {};\n    var fill = model.fill;\n    var target;\n\n    if (fill === undefined) {\n      fill = !!model.backgroundColor;\n    }\n\n    if (fill === false || fill === null) {\n      return false;\n    }\n\n    if (fill === true) {\n      return 'origin';\n    }\n\n    target = parseFloat(fill, 10);\n\n    if (isFinite(target) && Math.floor(target) === target) {\n      if (fill[0] === '-' || fill[0] === '+') {\n        target = index + target;\n      }\n\n      if (target === index || target < 0 || target >= count) {\n        return false;\n      }\n\n      return target;\n    }\n\n    switch (fill) {\n      // compatibility\n      case 'bottom':\n        return 'start';\n\n      case 'top':\n        return 'end';\n\n      case 'zero':\n        return 'origin';\n      // supported boundaries\n\n      case 'origin':\n      case 'start':\n      case 'end':\n        return fill;\n      // invalid fill values\n\n      default:\n        return false;\n    }\n  }\n\n  function computeBoundary(source) {\n    var model = source.el._model || {};\n    var scale = source.el._scale || {};\n    var fill = source.fill;\n    var target = null;\n    var horizontal;\n\n    if (isFinite(fill)) {\n      return null;\n    } // Backward compatibility: until v3, we still need to support boundary values set on\n    // the model (scaleTop, scaleBottom and scaleZero) because some external plugins and\n    // controllers might still use it (e.g. the Smith chart).\n\n\n    if (fill === 'start') {\n      target = model.scaleBottom === undefined ? scale.bottom : model.scaleBottom;\n    } else if (fill === 'end') {\n      target = model.scaleTop === undefined ? scale.top : model.scaleTop;\n    } else if (model.scaleZero !== undefined) {\n      target = model.scaleZero;\n    } else if (scale.getBasePosition) {\n      target = scale.getBasePosition();\n    } else if (scale.getBasePixel) {\n      target = scale.getBasePixel();\n    }\n\n    if (target !== undefined && target !== null) {\n      if (target.x !== undefined && target.y !== undefined) {\n        return target;\n      }\n\n      if (helpers$1.isFinite(target)) {\n        horizontal = scale.isHorizontal();\n        return {\n          x: horizontal ? target : null,\n          y: horizontal ? null : target\n        };\n      }\n    }\n\n    return null;\n  }\n\n  function resolveTarget(sources, index, propagate) {\n    var source = sources[index];\n    var fill = source.fill;\n    var visited = [index];\n    var target;\n\n    if (!propagate) {\n      return fill;\n    }\n\n    while (fill !== false && visited.indexOf(fill) === -1) {\n      if (!isFinite(fill)) {\n        return fill;\n      }\n\n      target = sources[fill];\n\n      if (!target) {\n        return false;\n      }\n\n      if (target.visible) {\n        return fill;\n      }\n\n      visited.push(fill);\n      fill = target.fill;\n    }\n\n    return false;\n  }\n\n  function createMapper(source) {\n    var fill = source.fill;\n    var type = 'dataset';\n\n    if (fill === false) {\n      return null;\n    }\n\n    if (!isFinite(fill)) {\n      type = 'boundary';\n    }\n\n    return mappers[type](source);\n  }\n\n  function isDrawable(point) {\n    return point && !point.skip;\n  }\n\n  function drawArea(ctx, curve0, curve1, len0, len1) {\n    var i;\n\n    if (!len0 || !len1) {\n      return;\n    } // building first area curve (normal)\n\n\n    ctx.moveTo(curve0[0].x, curve0[0].y);\n\n    for (i = 1; i < len0; ++i) {\n      helpers$1.canvas.lineTo(ctx, curve0[i - 1], curve0[i]);\n    } // joining the two area curves\n\n\n    ctx.lineTo(curve1[len1 - 1].x, curve1[len1 - 1].y); // building opposite area curve (reverse)\n\n    for (i = len1 - 1; i > 0; --i) {\n      helpers$1.canvas.lineTo(ctx, curve1[i], curve1[i - 1], true);\n    }\n  }\n\n  function doFill(ctx, points, mapper, view, color, loop) {\n    var count = points.length;\n    var span = view.spanGaps;\n    var curve0 = [];\n    var curve1 = [];\n    var len0 = 0;\n    var len1 = 0;\n    var i, ilen, index, p0, p1, d0, d1;\n    ctx.beginPath();\n\n    for (i = 0, ilen = count + !!loop; i < ilen; ++i) {\n      index = i % count;\n      p0 = points[index]._view;\n      p1 = mapper(p0, index, view);\n      d0 = isDrawable(p0);\n      d1 = isDrawable(p1);\n\n      if (d0 && d1) {\n        len0 = curve0.push(p0);\n        len1 = curve1.push(p1);\n      } else if (len0 && len1) {\n        if (!span) {\n          drawArea(ctx, curve0, curve1, len0, len1);\n          len0 = len1 = 0;\n          curve0 = [];\n          curve1 = [];\n        } else {\n          if (d0) {\n            curve0.push(p0);\n          }\n\n          if (d1) {\n            curve1.push(p1);\n          }\n        }\n      }\n    }\n\n    drawArea(ctx, curve0, curve1, len0, len1);\n    ctx.closePath();\n    ctx.fillStyle = color;\n    ctx.fill();\n  }\n\n  var plugin_filler = {\n    id: 'filler',\n    afterDatasetsUpdate: function afterDatasetsUpdate(chart, options) {\n      var count = (chart.data.datasets || []).length;\n      var propagate = options.propagate;\n      var sources = [];\n      var meta, i, el, source;\n\n      for (i = 0; i < count; ++i) {\n        meta = chart.getDatasetMeta(i);\n        el = meta.dataset;\n        source = null;\n\n        if (el && el._model && el instanceof elements.Line) {\n          source = {\n            visible: chart.isDatasetVisible(i),\n            fill: decodeFill(el, i, count),\n            chart: chart,\n            el: el\n          };\n        }\n\n        meta.$filler = source;\n        sources.push(source);\n      }\n\n      for (i = 0; i < count; ++i) {\n        source = sources[i];\n\n        if (!source) {\n          continue;\n        }\n\n        source.fill = resolveTarget(sources, i, propagate);\n        source.boundary = computeBoundary(source);\n        source.mapper = createMapper(source);\n      }\n    },\n    beforeDatasetDraw: function beforeDatasetDraw(chart, args) {\n      var meta = args.meta.$filler;\n\n      if (!meta) {\n        return;\n      }\n\n      var ctx = chart.ctx;\n      var el = meta.el;\n      var view = el._view;\n      var points = el._children || [];\n      var mapper = meta.mapper;\n      var color = view.backgroundColor || core_defaults.global.defaultColor;\n\n      if (mapper && color && points.length) {\n        helpers$1.canvas.clipArea(ctx, chart.chartArea);\n        doFill(ctx, points, mapper, view, color, el._loop);\n        helpers$1.canvas.unclipArea(ctx);\n      }\n    }\n  };\n  var noop$1 = helpers$1.noop;\n  var valueOrDefault$d = helpers$1.valueOrDefault;\n\n  core_defaults._set('global', {\n    legend: {\n      display: true,\n      position: 'top',\n      fullWidth: true,\n      reverse: false,\n      weight: 1000,\n      // a callback that will handle\n      onClick: function onClick(e, legendItem) {\n        var index = legendItem.datasetIndex;\n        var ci = this.chart;\n        var meta = ci.getDatasetMeta(index); // See controller.isDatasetVisible comment\n\n        meta.hidden = meta.hidden === null ? !ci.data.datasets[index].hidden : null; // We hid a dataset ... rerender the chart\n\n        ci.update();\n      },\n      onHover: null,\n      onLeave: null,\n      labels: {\n        boxWidth: 40,\n        padding: 10,\n        // Generates labels shown in the legend\n        // Valid properties to return:\n        // text : text to display\n        // fillStyle : fill of coloured box\n        // strokeStyle: stroke of coloured box\n        // hidden : if this legend item refers to a hidden item\n        // lineCap : cap style for line\n        // lineDash\n        // lineDashOffset :\n        // lineJoin :\n        // lineWidth :\n        generateLabels: function generateLabels(chart) {\n          var data = chart.data;\n          return helpers$1.isArray(data.datasets) ? data.datasets.map(function (dataset, i) {\n            return {\n              text: dataset.label,\n              fillStyle: !helpers$1.isArray(dataset.backgroundColor) ? dataset.backgroundColor : dataset.backgroundColor[0],\n              hidden: !chart.isDatasetVisible(i),\n              lineCap: dataset.borderCapStyle,\n              lineDash: dataset.borderDash,\n              lineDashOffset: dataset.borderDashOffset,\n              lineJoin: dataset.borderJoinStyle,\n              lineWidth: dataset.borderWidth,\n              strokeStyle: dataset.borderColor,\n              pointStyle: dataset.pointStyle,\n              // Below is extra data used for toggling the datasets\n              datasetIndex: i\n            };\n          }, this) : [];\n        }\n      }\n    },\n    legendCallback: function legendCallback(chart) {\n      var text = [];\n      text.push('<ul class=\"' + chart.id + '-legend\">');\n\n      for (var i = 0; i < chart.data.datasets.length; i++) {\n        text.push('<li><span style=\"background-color:' + chart.data.datasets[i].backgroundColor + '\"></span>');\n\n        if (chart.data.datasets[i].label) {\n          text.push(chart.data.datasets[i].label);\n        }\n\n        text.push('</li>');\n      }\n\n      text.push('</ul>');\n      return text.join('');\n    }\n  });\n  /**\n   * Helper function to get the box width based on the usePointStyle option\n   * @param {object} labelopts - the label options on the legend\n   * @param {number} fontSize - the label font size\n   * @return {number} width of the color box area\n   */\n\n\n  function getBoxWidth(labelOpts, fontSize) {\n    return labelOpts.usePointStyle && labelOpts.boxWidth > fontSize ? fontSize : labelOpts.boxWidth;\n  }\n  /**\n   * IMPORTANT: this class is exposed publicly as Chart.Legend, backward compatibility required!\n   */\n\n\n  var Legend = core_element.extend({\n    initialize: function initialize(config) {\n      helpers$1.extend(this, config); // Contains hit boxes for each dataset (in dataset order)\n\n      this.legendHitBoxes = [];\n      /**\n      \t * @private\n      \t */\n\n      this._hoveredItem = null; // Are we in doughnut mode which has a different data type\n\n      this.doughnutMode = false;\n    },\n    // These methods are ordered by lifecycle. Utilities then follow.\n    // Any function defined here is inherited by all legend types.\n    // Any function can be extended by the legend type\n    beforeUpdate: noop$1,\n    update: function update(maxWidth, maxHeight, margins) {\n      var me = this; // Update Lifecycle - Probably don't want to ever extend or overwrite this function ;)\n\n      me.beforeUpdate(); // Absorb the master measurements\n\n      me.maxWidth = maxWidth;\n      me.maxHeight = maxHeight;\n      me.margins = margins; // Dimensions\n\n      me.beforeSetDimensions();\n      me.setDimensions();\n      me.afterSetDimensions(); // Labels\n\n      me.beforeBuildLabels();\n      me.buildLabels();\n      me.afterBuildLabels(); // Fit\n\n      me.beforeFit();\n      me.fit();\n      me.afterFit(); //\n\n      me.afterUpdate();\n      return me.minSize;\n    },\n    afterUpdate: noop$1,\n    //\n    beforeSetDimensions: noop$1,\n    setDimensions: function setDimensions() {\n      var me = this; // Set the unconstrained dimension before label rotation\n\n      if (me.isHorizontal()) {\n        // Reset position before calculating rotation\n        me.width = me.maxWidth;\n        me.left = 0;\n        me.right = me.width;\n      } else {\n        me.height = me.maxHeight; // Reset position before calculating rotation\n\n        me.top = 0;\n        me.bottom = me.height;\n      } // Reset padding\n\n\n      me.paddingLeft = 0;\n      me.paddingTop = 0;\n      me.paddingRight = 0;\n      me.paddingBottom = 0; // Reset minSize\n\n      me.minSize = {\n        width: 0,\n        height: 0\n      };\n    },\n    afterSetDimensions: noop$1,\n    //\n    beforeBuildLabels: noop$1,\n    buildLabels: function buildLabels() {\n      var me = this;\n      var labelOpts = me.options.labels || {};\n      var legendItems = helpers$1.callback(labelOpts.generateLabels, [me.chart], me) || [];\n\n      if (labelOpts.filter) {\n        legendItems = legendItems.filter(function (item) {\n          return labelOpts.filter(item, me.chart.data);\n        });\n      }\n\n      if (me.options.reverse) {\n        legendItems.reverse();\n      }\n\n      me.legendItems = legendItems;\n    },\n    afterBuildLabels: noop$1,\n    //\n    beforeFit: noop$1,\n    fit: function fit() {\n      var me = this;\n      var opts = me.options;\n      var labelOpts = opts.labels;\n      var display = opts.display;\n      var ctx = me.ctx;\n\n      var labelFont = helpers$1.options._parseFont(labelOpts);\n\n      var fontSize = labelFont.size; // Reset hit boxes\n\n      var hitboxes = me.legendHitBoxes = [];\n      var minSize = me.minSize;\n      var isHorizontal = me.isHorizontal();\n\n      if (isHorizontal) {\n        minSize.width = me.maxWidth; // fill all the width\n\n        minSize.height = display ? 10 : 0;\n      } else {\n        minSize.width = display ? 10 : 0;\n        minSize.height = me.maxHeight; // fill all the height\n      } // Increase sizes here\n\n\n      if (display) {\n        ctx.font = labelFont.string;\n\n        if (isHorizontal) {\n          // Labels\n          // Width of each line of legend boxes. Labels wrap onto multiple lines when there are too many to fit on one\n          var lineWidths = me.lineWidths = [0];\n          var totalHeight = 0;\n          ctx.textAlign = 'left';\n          ctx.textBaseline = 'top';\n          helpers$1.each(me.legendItems, function (legendItem, i) {\n            var boxWidth = getBoxWidth(labelOpts, fontSize);\n            var width = boxWidth + fontSize / 2 + ctx.measureText(legendItem.text).width;\n\n            if (i === 0 || lineWidths[lineWidths.length - 1] + width + labelOpts.padding > minSize.width) {\n              totalHeight += fontSize + labelOpts.padding;\n              lineWidths[lineWidths.length - (i > 0 ? 0 : 1)] = labelOpts.padding;\n            } // Store the hitbox width and height here. Final position will be updated in `draw`\n\n\n            hitboxes[i] = {\n              left: 0,\n              top: 0,\n              width: width,\n              height: fontSize\n            };\n            lineWidths[lineWidths.length - 1] += width + labelOpts.padding;\n          });\n          minSize.height += totalHeight;\n        } else {\n          var vPadding = labelOpts.padding;\n          var columnWidths = me.columnWidths = [];\n          var totalWidth = labelOpts.padding;\n          var currentColWidth = 0;\n          var currentColHeight = 0;\n          var itemHeight = fontSize + vPadding;\n          helpers$1.each(me.legendItems, function (legendItem, i) {\n            var boxWidth = getBoxWidth(labelOpts, fontSize);\n            var itemWidth = boxWidth + fontSize / 2 + ctx.measureText(legendItem.text).width; // If too tall, go to new column\n\n            if (i > 0 && currentColHeight + itemHeight > minSize.height - vPadding) {\n              totalWidth += currentColWidth + labelOpts.padding;\n              columnWidths.push(currentColWidth); // previous column width\n\n              currentColWidth = 0;\n              currentColHeight = 0;\n            } // Get max width\n\n\n            currentColWidth = Math.max(currentColWidth, itemWidth);\n            currentColHeight += itemHeight; // Store the hitbox width and height here. Final position will be updated in `draw`\n\n            hitboxes[i] = {\n              left: 0,\n              top: 0,\n              width: itemWidth,\n              height: fontSize\n            };\n          });\n          totalWidth += currentColWidth;\n          columnWidths.push(currentColWidth);\n          minSize.width += totalWidth;\n        }\n      }\n\n      me.width = minSize.width;\n      me.height = minSize.height;\n    },\n    afterFit: noop$1,\n    // Shared Methods\n    isHorizontal: function isHorizontal() {\n      return this.options.position === 'top' || this.options.position === 'bottom';\n    },\n    // Actually draw the legend on the canvas\n    draw: function draw() {\n      var me = this;\n      var opts = me.options;\n      var labelOpts = opts.labels;\n      var globalDefaults = core_defaults.global;\n      var defaultColor = globalDefaults.defaultColor;\n      var lineDefault = globalDefaults.elements.line;\n      var legendWidth = me.width;\n      var lineWidths = me.lineWidths;\n\n      if (opts.display) {\n        var ctx = me.ctx;\n        var fontColor = valueOrDefault$d(labelOpts.fontColor, globalDefaults.defaultFontColor);\n\n        var labelFont = helpers$1.options._parseFont(labelOpts);\n\n        var fontSize = labelFont.size;\n        var cursor; // Canvas setup\n\n        ctx.textAlign = 'left';\n        ctx.textBaseline = 'middle';\n        ctx.lineWidth = 0.5;\n        ctx.strokeStyle = fontColor; // for strikethrough effect\n\n        ctx.fillStyle = fontColor; // render in correct colour\n\n        ctx.font = labelFont.string;\n        var boxWidth = getBoxWidth(labelOpts, fontSize);\n        var hitboxes = me.legendHitBoxes; // current position\n\n        var drawLegendBox = function drawLegendBox(x, y, legendItem) {\n          if (isNaN(boxWidth) || boxWidth <= 0) {\n            return;\n          } // Set the ctx for the box\n\n\n          ctx.save();\n          var lineWidth = valueOrDefault$d(legendItem.lineWidth, lineDefault.borderWidth);\n          ctx.fillStyle = valueOrDefault$d(legendItem.fillStyle, defaultColor);\n          ctx.lineCap = valueOrDefault$d(legendItem.lineCap, lineDefault.borderCapStyle);\n          ctx.lineDashOffset = valueOrDefault$d(legendItem.lineDashOffset, lineDefault.borderDashOffset);\n          ctx.lineJoin = valueOrDefault$d(legendItem.lineJoin, lineDefault.borderJoinStyle);\n          ctx.lineWidth = lineWidth;\n          ctx.strokeStyle = valueOrDefault$d(legendItem.strokeStyle, defaultColor);\n\n          if (ctx.setLineDash) {\n            // IE 9 and 10 do not support line dash\n            ctx.setLineDash(valueOrDefault$d(legendItem.lineDash, lineDefault.borderDash));\n          }\n\n          if (opts.labels && opts.labels.usePointStyle) {\n            // Recalculate x and y for drawPoint() because its expecting\n            // x and y to be center of figure (instead of top left)\n            var radius = boxWidth * Math.SQRT2 / 2;\n            var centerX = x + boxWidth / 2;\n            var centerY = y + fontSize / 2; // Draw pointStyle as legend symbol\n\n            helpers$1.canvas.drawPoint(ctx, legendItem.pointStyle, radius, centerX, centerY);\n          } else {\n            // Draw box as legend symbol\n            if (lineWidth !== 0) {\n              ctx.strokeRect(x, y, boxWidth, fontSize);\n            }\n\n            ctx.fillRect(x, y, boxWidth, fontSize);\n          }\n\n          ctx.restore();\n        };\n\n        var fillText = function fillText(x, y, legendItem, textWidth) {\n          var halfFontSize = fontSize / 2;\n          var xLeft = boxWidth + halfFontSize + x;\n          var yMiddle = y + halfFontSize;\n          ctx.fillText(legendItem.text, xLeft, yMiddle);\n\n          if (legendItem.hidden) {\n            // Strikethrough the text if hidden\n            ctx.beginPath();\n            ctx.lineWidth = 2;\n            ctx.moveTo(xLeft, yMiddle);\n            ctx.lineTo(xLeft + textWidth, yMiddle);\n            ctx.stroke();\n          }\n        }; // Horizontal\n\n\n        var isHorizontal = me.isHorizontal();\n\n        if (isHorizontal) {\n          cursor = {\n            x: me.left + (legendWidth - lineWidths[0]) / 2 + labelOpts.padding,\n            y: me.top + labelOpts.padding,\n            line: 0\n          };\n        } else {\n          cursor = {\n            x: me.left + labelOpts.padding,\n            y: me.top + labelOpts.padding,\n            line: 0\n          };\n        }\n\n        var itemHeight = fontSize + labelOpts.padding;\n        helpers$1.each(me.legendItems, function (legendItem, i) {\n          var textWidth = ctx.measureText(legendItem.text).width;\n          var width = boxWidth + fontSize / 2 + textWidth;\n          var x = cursor.x;\n          var y = cursor.y; // Use (me.left + me.minSize.width) and (me.top + me.minSize.height)\n          // instead of me.right and me.bottom because me.width and me.height\n          // may have been changed since me.minSize was calculated\n\n          if (isHorizontal) {\n            if (i > 0 && x + width + labelOpts.padding > me.left + me.minSize.width) {\n              y = cursor.y += itemHeight;\n              cursor.line++;\n              x = cursor.x = me.left + (legendWidth - lineWidths[cursor.line]) / 2 + labelOpts.padding;\n            }\n          } else if (i > 0 && y + itemHeight > me.top + me.minSize.height) {\n            x = cursor.x = x + me.columnWidths[cursor.line] + labelOpts.padding;\n            y = cursor.y = me.top + labelOpts.padding;\n            cursor.line++;\n          }\n\n          drawLegendBox(x, y, legendItem);\n          hitboxes[i].left = x;\n          hitboxes[i].top = y; // Fill the actual label\n\n          fillText(x, y, legendItem, textWidth);\n\n          if (isHorizontal) {\n            cursor.x += width + labelOpts.padding;\n          } else {\n            cursor.y += itemHeight;\n          }\n        });\n      }\n    },\n\n    /**\n     * @private\n     */\n    _getLegendItemAt: function _getLegendItemAt(x, y) {\n      var me = this;\n      var i, hitBox, lh;\n\n      if (x >= me.left && x <= me.right && y >= me.top && y <= me.bottom) {\n        // See if we are touching one of the dataset boxes\n        lh = me.legendHitBoxes;\n\n        for (i = 0; i < lh.length; ++i) {\n          hitBox = lh[i];\n\n          if (x >= hitBox.left && x <= hitBox.left + hitBox.width && y >= hitBox.top && y <= hitBox.top + hitBox.height) {\n            // Touching an element\n            return me.legendItems[i];\n          }\n        }\n      }\n\n      return null;\n    },\n\n    /**\n     * Handle an event\n     * @private\n     * @param {IEvent} event - The event to handle\n     */\n    handleEvent: function handleEvent(e) {\n      var me = this;\n      var opts = me.options;\n      var type = e.type === 'mouseup' ? 'click' : e.type;\n      var hoveredItem;\n\n      if (type === 'mousemove') {\n        if (!opts.onHover && !opts.onLeave) {\n          return;\n        }\n      } else if (type === 'click') {\n        if (!opts.onClick) {\n          return;\n        }\n      } else {\n        return;\n      } // Chart event already has relative position in it\n\n\n      hoveredItem = me._getLegendItemAt(e.x, e.y);\n\n      if (type === 'click') {\n        if (hoveredItem && opts.onClick) {\n          // use e.native for backwards compatibility\n          opts.onClick.call(me, e.native, hoveredItem);\n        }\n      } else {\n        if (opts.onLeave && hoveredItem !== me._hoveredItem) {\n          if (me._hoveredItem) {\n            opts.onLeave.call(me, e.native, me._hoveredItem);\n          }\n\n          me._hoveredItem = hoveredItem;\n        }\n\n        if (opts.onHover && hoveredItem) {\n          // use e.native for backwards compatibility\n          opts.onHover.call(me, e.native, hoveredItem);\n        }\n      }\n    }\n  });\n\n  function createNewLegendAndAttach(chart, legendOpts) {\n    var legend = new Legend({\n      ctx: chart.ctx,\n      options: legendOpts,\n      chart: chart\n    });\n    core_layouts.configure(chart, legend, legendOpts);\n    core_layouts.addBox(chart, legend);\n    chart.legend = legend;\n  }\n\n  var plugin_legend = {\n    id: 'legend',\n\n    /**\n     * Backward compatibility: since 2.1.5, the legend is registered as a plugin, making\n     * Chart.Legend obsolete. To avoid a breaking change, we export the Legend as part of\n     * the plugin, which one will be re-exposed in the chart.js file.\n     * https://github.com/chartjs/Chart.js/pull/2640\n     * @private\n     */\n    _element: Legend,\n    beforeInit: function beforeInit(chart) {\n      var legendOpts = chart.options.legend;\n\n      if (legendOpts) {\n        createNewLegendAndAttach(chart, legendOpts);\n      }\n    },\n    beforeUpdate: function beforeUpdate(chart) {\n      var legendOpts = chart.options.legend;\n      var legend = chart.legend;\n\n      if (legendOpts) {\n        helpers$1.mergeIf(legendOpts, core_defaults.global.legend);\n\n        if (legend) {\n          core_layouts.configure(chart, legend, legendOpts);\n          legend.options = legendOpts;\n        } else {\n          createNewLegendAndAttach(chart, legendOpts);\n        }\n      } else if (legend) {\n        core_layouts.removeBox(chart, legend);\n        delete chart.legend;\n      }\n    },\n    afterEvent: function afterEvent(chart, e) {\n      var legend = chart.legend;\n\n      if (legend) {\n        legend.handleEvent(e);\n      }\n    }\n  };\n  var noop$2 = helpers$1.noop;\n\n  core_defaults._set('global', {\n    title: {\n      display: false,\n      fontStyle: 'bold',\n      fullWidth: true,\n      padding: 10,\n      position: 'top',\n      text: '',\n      weight: 2000 // by default greater than legend (1000) to be above\n\n    }\n  });\n  /**\n   * IMPORTANT: this class is exposed publicly as Chart.Legend, backward compatibility required!\n   */\n\n\n  var Title = core_element.extend({\n    initialize: function initialize(config) {\n      var me = this;\n      helpers$1.extend(me, config); // Contains hit boxes for each dataset (in dataset order)\n\n      me.legendHitBoxes = [];\n    },\n    // These methods are ordered by lifecycle. Utilities then follow.\n    beforeUpdate: noop$2,\n    update: function update(maxWidth, maxHeight, margins) {\n      var me = this; // Update Lifecycle - Probably don't want to ever extend or overwrite this function ;)\n\n      me.beforeUpdate(); // Absorb the master measurements\n\n      me.maxWidth = maxWidth;\n      me.maxHeight = maxHeight;\n      me.margins = margins; // Dimensions\n\n      me.beforeSetDimensions();\n      me.setDimensions();\n      me.afterSetDimensions(); // Labels\n\n      me.beforeBuildLabels();\n      me.buildLabels();\n      me.afterBuildLabels(); // Fit\n\n      me.beforeFit();\n      me.fit();\n      me.afterFit(); //\n\n      me.afterUpdate();\n      return me.minSize;\n    },\n    afterUpdate: noop$2,\n    //\n    beforeSetDimensions: noop$2,\n    setDimensions: function setDimensions() {\n      var me = this; // Set the unconstrained dimension before label rotation\n\n      if (me.isHorizontal()) {\n        // Reset position before calculating rotation\n        me.width = me.maxWidth;\n        me.left = 0;\n        me.right = me.width;\n      } else {\n        me.height = me.maxHeight; // Reset position before calculating rotation\n\n        me.top = 0;\n        me.bottom = me.height;\n      } // Reset padding\n\n\n      me.paddingLeft = 0;\n      me.paddingTop = 0;\n      me.paddingRight = 0;\n      me.paddingBottom = 0; // Reset minSize\n\n      me.minSize = {\n        width: 0,\n        height: 0\n      };\n    },\n    afterSetDimensions: noop$2,\n    //\n    beforeBuildLabels: noop$2,\n    buildLabels: noop$2,\n    afterBuildLabels: noop$2,\n    //\n    beforeFit: noop$2,\n    fit: function fit() {\n      var me = this;\n      var opts = me.options;\n      var display = opts.display;\n      var minSize = me.minSize;\n      var lineCount = helpers$1.isArray(opts.text) ? opts.text.length : 1;\n\n      var fontOpts = helpers$1.options._parseFont(opts);\n\n      var textSize = display ? lineCount * fontOpts.lineHeight + opts.padding * 2 : 0;\n\n      if (me.isHorizontal()) {\n        minSize.width = me.maxWidth; // fill all the width\n\n        minSize.height = textSize;\n      } else {\n        minSize.width = textSize;\n        minSize.height = me.maxHeight; // fill all the height\n      }\n\n      me.width = minSize.width;\n      me.height = minSize.height;\n    },\n    afterFit: noop$2,\n    // Shared Methods\n    isHorizontal: function isHorizontal() {\n      var pos = this.options.position;\n      return pos === 'top' || pos === 'bottom';\n    },\n    // Actually draw the title block on the canvas\n    draw: function draw() {\n      var me = this;\n      var ctx = me.ctx;\n      var opts = me.options;\n\n      if (opts.display) {\n        var fontOpts = helpers$1.options._parseFont(opts);\n\n        var lineHeight = fontOpts.lineHeight;\n        var offset = lineHeight / 2 + opts.padding;\n        var rotation = 0;\n        var top = me.top;\n        var left = me.left;\n        var bottom = me.bottom;\n        var right = me.right;\n        var maxWidth, titleX, titleY;\n        ctx.fillStyle = helpers$1.valueOrDefault(opts.fontColor, core_defaults.global.defaultFontColor); // render in correct colour\n\n        ctx.font = fontOpts.string; // Horizontal\n\n        if (me.isHorizontal()) {\n          titleX = left + (right - left) / 2; // midpoint of the width\n\n          titleY = top + offset;\n          maxWidth = right - left;\n        } else {\n          titleX = opts.position === 'left' ? left + offset : right - offset;\n          titleY = top + (bottom - top) / 2;\n          maxWidth = bottom - top;\n          rotation = Math.PI * (opts.position === 'left' ? -0.5 : 0.5);\n        }\n\n        ctx.save();\n        ctx.translate(titleX, titleY);\n        ctx.rotate(rotation);\n        ctx.textAlign = 'center';\n        ctx.textBaseline = 'middle';\n        var text = opts.text;\n\n        if (helpers$1.isArray(text)) {\n          var y = 0;\n\n          for (var i = 0; i < text.length; ++i) {\n            ctx.fillText(text[i], 0, y, maxWidth);\n            y += lineHeight;\n          }\n        } else {\n          ctx.fillText(text, 0, 0, maxWidth);\n        }\n\n        ctx.restore();\n      }\n    }\n  });\n\n  function createNewTitleBlockAndAttach(chart, titleOpts) {\n    var title = new Title({\n      ctx: chart.ctx,\n      options: titleOpts,\n      chart: chart\n    });\n    core_layouts.configure(chart, title, titleOpts);\n    core_layouts.addBox(chart, title);\n    chart.titleBlock = title;\n  }\n\n  var plugin_title = {\n    id: 'title',\n\n    /**\n     * Backward compatibility: since 2.1.5, the title is registered as a plugin, making\n     * Chart.Title obsolete. To avoid a breaking change, we export the Title as part of\n     * the plugin, which one will be re-exposed in the chart.js file.\n     * https://github.com/chartjs/Chart.js/pull/2640\n     * @private\n     */\n    _element: Title,\n    beforeInit: function beforeInit(chart) {\n      var titleOpts = chart.options.title;\n\n      if (titleOpts) {\n        createNewTitleBlockAndAttach(chart, titleOpts);\n      }\n    },\n    beforeUpdate: function beforeUpdate(chart) {\n      var titleOpts = chart.options.title;\n      var titleBlock = chart.titleBlock;\n\n      if (titleOpts) {\n        helpers$1.mergeIf(titleOpts, core_defaults.global.title);\n\n        if (titleBlock) {\n          core_layouts.configure(chart, titleBlock, titleOpts);\n          titleBlock.options = titleOpts;\n        } else {\n          createNewTitleBlockAndAttach(chart, titleOpts);\n        }\n      } else if (titleBlock) {\n        core_layouts.removeBox(chart, titleBlock);\n        delete chart.titleBlock;\n      }\n    }\n  };\n  var plugins = {};\n  var filler = plugin_filler;\n  var legend = plugin_legend;\n  var title = plugin_title;\n  plugins.filler = filler;\n  plugins.legend = legend;\n  plugins.title = title;\n  /**\n   * @namespace Chart\n   */\n\n  core_controller.helpers = helpers$1; // @todo dispatch these helpers into appropriated helpers/helpers.* file and write unit tests!\n\n  core_helpers(core_controller);\n  core_controller._adapters = core_adapters;\n  core_controller.Animation = core_animation;\n  core_controller.animationService = core_animations;\n  core_controller.controllers = controllers;\n  core_controller.DatasetController = core_datasetController;\n  core_controller.defaults = core_defaults;\n  core_controller.Element = core_element;\n  core_controller.elements = elements;\n  core_controller.Interaction = core_interaction;\n  core_controller.layouts = core_layouts;\n  core_controller.platform = platform;\n  core_controller.plugins = core_plugins;\n  core_controller.Scale = core_scale;\n  core_controller.scaleService = core_scaleService;\n  core_controller.Ticks = core_ticks;\n  core_controller.Tooltip = core_tooltip; // Register built-in scales\n\n  core_controller.helpers.each(scales, function (scale, type) {\n    core_controller.scaleService.registerScaleType(type, scale, scale._defaults);\n  }); // Load to register built-in adapters (as side effects)\n  // Loading built-in plugins\n\n  for (var k in plugins) {\n    if (plugins.hasOwnProperty(k)) {\n      core_controller.plugins.register(plugins[k]);\n    }\n  }\n\n  core_controller.platform.initialize();\n  var src = core_controller;\n\n  if (typeof window !== 'undefined') {\n    window.Chart = core_controller;\n  } // DEPRECATIONS\n\n  /**\n   * Provided for backward compatibility, not available anymore\n   * @namespace Chart.Chart\n   * @deprecated since version 2.8.0\n   * @todo remove at version 3\n   * @private\n   */\n\n\n  core_controller.Chart = core_controller;\n  /**\n   * Provided for backward compatibility, not available anymore\n   * @namespace Chart.Legend\n   * @deprecated since version 2.1.5\n   * @todo remove at version 3\n   * @private\n   */\n\n  core_controller.Legend = plugins.legend._element;\n  /**\n   * Provided for backward compatibility, not available anymore\n   * @namespace Chart.Title\n   * @deprecated since version 2.1.5\n   * @todo remove at version 3\n   * @private\n   */\n\n  core_controller.Title = plugins.title._element;\n  /**\n   * Provided for backward compatibility, use Chart.plugins instead\n   * @namespace Chart.pluginService\n   * @deprecated since version 2.1.5\n   * @todo remove at version 3\n   * @private\n   */\n\n  core_controller.pluginService = core_controller.plugins;\n  /**\n   * Provided for backward compatibility, inheriting from Chart.PlugingBase has no\n   * effect, instead simply create/register plugins via plain JavaScript objects.\n   * @interface Chart.PluginBase\n   * @deprecated since version 2.5.0\n   * @todo remove at version 3\n   * @private\n   */\n\n  core_controller.PluginBase = core_controller.Element.extend({});\n  /**\n   * Provided for backward compatibility, use Chart.helpers.canvas instead.\n   * @namespace Chart.canvasHelpers\n   * @deprecated since version 2.6.0\n   * @todo remove at version 3\n   * @private\n   */\n\n  core_controller.canvasHelpers = core_controller.helpers.canvas;\n  /**\n   * Provided for backward compatibility, use Chart.layouts instead.\n   * @namespace Chart.layoutService\n   * @deprecated since version 2.7.3\n   * @todo remove at version 3\n   * @private\n   */\n\n  core_controller.layoutService = core_controller.layouts;\n  /**\n   * Provided for backward compatibility, not available anymore.\n   * @namespace Chart.LinearScaleBase\n   * @deprecated since version 2.8\n   * @todo remove at version 3\n   * @private\n   */\n\n  core_controller.LinearScaleBase = scale_linearbase;\n  /**\n   * Provided for backward compatibility, instead we should create a new Chart\n   * by setting the type in the config (`new Chart(id, {type: '{chart-type}'}`).\n   * @deprecated since version 2.8.0\n   * @todo remove at version 3\n   */\n\n  core_controller.helpers.each(['Bar', 'Bubble', 'Doughnut', 'Line', 'PolarArea', 'Radar', 'Scatter'], function (klass) {\n    core_controller[klass] = function (ctx, cfg) {\n      return new core_controller(ctx, core_controller.helpers.merge(cfg || {}, {\n        type: klass.charAt(0).toLowerCase() + klass.slice(1)\n      }));\n    };\n  });\n  return src;\n});"],"sourceRoot":""}