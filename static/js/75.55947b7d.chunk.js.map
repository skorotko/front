{"version":3,"sources":["components/Companies/Form.js","components/Companies/List/Item.js","components/Companies/List/List.js","components/Companies/Table/Row.js","components/Companies/Table/Table.js","components/Companies/Companies.js","components/shared/PaginationBackend.js","utils/api/company.js"],"names":["CompaniesForm","state","name","email","skype","phone","handleChange","_ref","_ref$target","target","value","onFilter","_this","props","setState","Object","defineProperty","_this$state","this","react_default","a","createElement","Form","Row","Col","lg","FormGroup","Input","type","placeholder","onChange","style","position","top","right","className","Component","CompaniesListItem","id","logo","vacancies","candidates","Card","marginBottom","Link","to","concat","CardBody","padding","CardImg","width","src","alt","CardTitle","fontSize","textAlign","textDecoration","CardFooter","margin","sm","xs","defaultProps","CompaniesList","companies","pageSize","totalItems","totalPages","currentPage","onChangePage","companiesJSX","length","map","company","md","key","Item","color","Fragment","PaginationBackend","items","initialPage","CompaniesTableRow","idx","scope","height","CompaniesTable","Table_Row","assign","Table","background","responsive","hover","Companies","companiesCount","perPage","isActive","isTable","filterCompanies","requestForCompanies","filter","getCompanies","then","companiesData","objectSpread","handleShowActiveCompanies","handleShowCompaniesTable","_this$state2","filterAllCompanies","_this$state3","_this$state4","_this2","_this$state5","display","justifyContent","maxWidth","alignSelf","xl","Form_CompaniesForm","marginRight","ButtonGroup","Button","active","onClick","alignItems","Table_Table","List","_home_stanislav_Workspace_GoFriends_uppeople_front_app_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_1__","_home_stanislav_Workspace_GoFriends_uppeople_front_app_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_3__","_home_stanislav_Workspace_GoFriends_uppeople_front_app_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4__","call","setPage","page","_this$props","pager","getPager","startPage","endPage","Math","ceil","startIndex","endIndex","min","pages","_home_stanislav_Workspace_GoFriends_uppeople_front_app_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__","Array","keys","i","prevProps","react__WEBPACK_IMPORTED_MODULE_6___default","reactstrap__WEBPACK_IMPORTED_MODULE_7__","reactstrap__WEBPACK_IMPORTED_MODULE_8__","disabled","reactstrap__WEBPACK_IMPORTED_MODULE_9__","index","URL","getToken","localStorage","getItem","token","fetch","method","headers","Authorization","Content-Type","response","ok","json","Error","statusText","data","nazva","vacancy_count","candidates_to_company_count","Count","Pages","current_page","per_page","catch","error","console","log","body","JSON","stringify","createNewCompany","_home_stanislav_Workspace_GoFriends_uppeople_front_app_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1__","_home_stanislav_Workspace_GoFriends_uppeople_front_app_node_modules_babel_preset_react_app_node_modules_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default","mark","_callee","wrap","_context","prev","next","sent","abrupt","t0","stop","_x","apply","arguments","getCompanyInfo","about","calendarEvents","calendar","sendDetails","otpravka","termsOfCooperation","uslovia","interviewDetails","interview_detail","contacts","managers","manager","getCompanyCandidates","candidatesCount","platform","platforms","candidateStatus","statuses","getCompanyComments","_ref2","_callee2","_context2","_x2","filterAndSortCompanyVacancies","filterAndSort","vacanciesCount","vacancyStatus","seniority","seniorities","filterAndSortCompanyCandidates","updateVacancyStatus","_ref3","_callee3","content","_context3","_x3","updateCandidateStatus","_ref4","_callee4","_context4","_x4","uploadCompanyLogo","_ref6","_callee6","file","obj","_context6","_x6","_x7","updateCompanyInfo","_ref7","_callee7","companyInfo","_context7","_x8","_x9","addUserComment","_ref8","_callee8","comment","_context8","_x10","_x11","deleteUserComment","_ref9","_callee9","commentId","_context9","_x12","_x13","getContactInfo","contact","selectedPlatforms","arrOfPlatforms","values","label","toLowerCase","isChecked","all_platforms","isDisabled","addCompanyContact","_ref10","_callee10","_context10","_x14","_x15","editCompanyContact","_ref11","_callee11","_context11","_x16","_x17","deleteCompanyContact","_ref12","_callee12","_context12","_x18","updateCompanyInfoProfile"],"mappings":"wPAIqBA,6MAKnBC,MAAQ,CACNC,KAAM,GACNC,MAAO,GACPC,MAAO,GACPC,MAAO,MAGTC,aAAe,SAAAC,GAAiC,IAAAC,EAAAD,EAA9BE,OAAUP,EAAoBM,EAApBN,KAAMQ,EAAcF,EAAdE,MACxBC,EAAaC,EAAKC,MAAlBF,SAERC,EAAKE,SAALC,OAAAC,EAAA,EAAAD,CAAA,GAEKb,EAAOQ,GAEV,kBAAMC,EAASC,EAAKX,kFAIf,IAAAgB,EAC+BC,KAAKjB,MAAnCC,EADDe,EACCf,KAAMC,EADPc,EACOd,MAAOC,EADda,EACcb,MAAOC,EADrBY,EACqBZ,MAE5B,OACEc,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACEH,EAAAC,EAAAC,cAACE,EAAA,EAAD,KACEJ,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAAKC,GAAI,GACPN,EAAAC,EAAAC,cAACK,EAAA,EAAD,KACEP,EAAAC,EAAAC,cAACM,EAAA,EAAD,CACEC,KAAK,OACL1B,KAAK,OACLQ,MAAOR,EACP2B,YAAY,OACZC,SAAUZ,KAAKZ,eAEjBa,EAAAC,EAAAC,cAAA,KACEU,MAAO,CACLC,SAAU,WACVC,IAAK,SACLC,MAAO,WAETC,UAAU,uBAIhBhB,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAAKC,GAAI,GACPN,EAAAC,EAAAC,cAACK,EAAA,EAAD,KACEP,EAAAC,EAAAC,cAACM,EAAA,EAAD,CACEC,KAAK,QACL1B,KAAK,QACLQ,MAAOP,EACP0B,YAAY,QACZC,SAAUZ,KAAKZ,eAEjBa,EAAAC,EAAAC,cAAA,KACEU,MAAO,CACLC,SAAU,WACVC,IAAK,SACLC,MAAO,WAETC,UAAU,uBAIhBhB,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAAKC,GAAI,GACPN,EAAAC,EAAAC,cAACK,EAAA,EAAD,KACEP,EAAAC,EAAAC,cAACM,EAAA,EAAD,CACEC,KAAK,OACL1B,KAAK,QACLQ,MAAON,EACPyB,YAAY,QACZC,SAAUZ,KAAKZ,eAEjBa,EAAAC,EAAAC,cAAA,KACEU,MAAO,CACLC,SAAU,WACVC,IAAK,SACLC,MAAO,WAETC,UAAU,kBAIhBhB,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAAKC,GAAI,GACPN,EAAAC,EAAAC,cAACK,EAAA,EAAD,KACEP,EAAAC,EAAAC,cAACM,EAAA,EAAD,CACEC,KAAK,OACL1B,KAAK,QACLQ,MAAOL,EACPwB,YAAY,QACZC,SAAUZ,KAAKZ,eAEjBa,EAAAC,EAAAC,cAAA,KACEU,MAAO,CACLC,SAAU,WACVC,IAAK,SACLC,MAAO,WAETC,UAAU,2BArGiBC,0DCUrCC,UAAoB,SAAA9B,GAAA,IAAG+B,EAAH/B,EAAG+B,GAAIC,EAAPhC,EAAOgC,KAAMrC,EAAbK,EAAaL,KAAMsC,EAAnBjC,EAAmBiC,UAAWC,EAA9BlC,EAA8BkC,WAA9B,OACxBtB,EAAAC,EAAAC,cAACqB,EAAA,EAAD,CAAMX,MAAO,CAAEY,aAAc,SAC3BxB,EAAAC,EAAAC,cAACuB,EAAA,EAAD,CAAMC,GAAE,cAAAC,OAAgBR,GAAMC,KAAMA,GAClCpB,EAAAC,EAAAC,cAAC0B,EAAA,EAAD,CAAUhB,MAAO,CAAEiB,QAAS,WAC1B7B,EAAAC,EAAAC,cAAC4B,EAAA,EAAD,CAAShB,KAAG,EAACiB,MAAM,OAAOC,IAAKZ,EAAMa,IAAI,SACzCjC,EAAAC,EAAAC,cAACgC,EAAA,EAAD,CACEtB,MAAO,CACLY,aAAc,EACdW,SAAU,GACVC,UAAW,SACXC,eAAgB,SAGjBtD,KAIPiB,EAAAC,EAAAC,cAACoC,EAAA,EAAD,CAAY1B,MAAO,CAAEiB,QAAS,WAC5B7B,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAKQ,MAAO,CAAE2B,OAAQ,IACpBvC,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAAKmC,GAAG,IAAIC,GAAG,IAAI7B,MAAO,CAAEiB,QAAS,cACnC7B,EAAAC,EAAAC,cAAA,OAAKc,UAAU,qBACbhB,EAAAC,EAAAC,cAAA,MAAIc,UAAU,iCAAiCK,GAC/CrB,EAAAC,EAAAC,cAAA,QAAMc,UAAU,oBAAhB,eAGJhB,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAAKmC,GAAG,IAAIC,GAAG,IAAI7B,MAAO,CAAEiB,QAAS,cACnC7B,EAAAC,EAAAC,cAAA,OAAKc,UAAU,qBACbhB,EAAAC,EAAAC,cAAA,MAAIc,UAAU,iCAAiCM,GAC/CtB,EAAAC,EAAAC,cAAA,QAAMc,UAAU,oBAAhB,qBAeZE,EAAkBwB,aAAe,CAC/BtB,KAAM,GACNC,UAAW,EACXC,WAAY,GAGCJ,iBCvDTyB,EAAgB,SAAAvD,GAOhB,IANJwD,EAMIxD,EANJwD,UACAC,EAKIzD,EALJyD,SACAC,EAII1D,EAJJ0D,WACAC,EAGI3D,EAHJ2D,WACAC,EAEI5D,EAFJ4D,YACAC,EACI7D,EADJ6D,aAEMC,EACJN,EAAUO,OAAS,EACjBP,EAAUQ,IAAI,SAAAC,GAAO,OACnBrD,EAAAC,EAAAC,cAACG,EAAA,EAAD,CACEoC,GAAG,IACHD,GAAG,IACHc,GAAG,IACHhD,GAAG,IACHiD,IAAKF,EAAQlC,GACbP,MAAO,CAAEiB,QAAS,aAElB7B,EAAAC,EAAAC,cAACsD,EAAsBH,MAI3BrD,EAAAC,EAAAC,cAACG,EAAA,EAAD,KACEL,EAAAC,EAAAC,cAAA,MAAIU,MAAO,CAAE6C,MAAO,iBAAkBrB,UAAW,WAAjD,iDAMN,OACEpC,EAAAC,EAAAC,cAAAF,EAAAC,EAAAyD,SAAA,KACE1D,EAAAC,EAAAC,cAACE,EAAA,EAAD,KAAM8C,GACLN,EAAUO,OAAS,EAClBnD,EAAAC,EAAAC,cAACE,EAAA,EAAD,KACEJ,EAAAC,EAAAC,cAACG,EAAA,EAAD,KACEL,EAAAC,EAAAC,cAACyD,EAAA,EAAD,CACEC,MAAOhB,EACPE,WAAYA,EACZD,SAAUA,EACVE,WAAYA,EACZc,YAAab,EACbC,aAAcA,MAIlB,OAuBVN,EAAcD,aAAe,CAC3BE,UAAW,GACXC,SAAU,KACVC,WAAY,KACZC,WAAY,KACZE,aAAc,kBAAM,OAGPN,iBChFTmB,EAAoB,SAAA1E,GAAA,IAAG2E,EAAH3E,EAAG2E,IAAK5C,EAAR/B,EAAQ+B,GAAIpC,EAAZK,EAAYL,KAAMqC,EAAlBhC,EAAkBgC,KAAMpC,EAAxBI,EAAwBJ,MAAOC,EAA/BG,EAA+BH,MAAOC,EAAtCE,EAAsCF,MAAtC,OACxBc,EAAAC,EAAAC,cAAAF,EAAAC,EAAAyD,SAAA,KACE1D,EAAAC,EAAAC,cAAA,MAAI8D,MAAM,OAAOD,EAAM,GACvB/D,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAACuB,EAAA,EAAD,CAAMC,GAAE,cAAAC,OAAgBR,GAAMP,MAAO,CAAE6C,MAAO,gBAC3C1E,IAGLiB,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAACuB,EAAA,EAAD,CAAMC,GAAE,cAAAC,OAAgBR,IACtBnB,EAAAC,EAAAC,cAAA,OAAK+D,OAAQ,GAAIjC,IAAKZ,EAAMa,IAAI,WAGpCjC,EAAAC,EAAAC,cAAA,UAAKlB,GACLgB,EAAAC,EAAAC,cAAA,UAAKjB,GACLe,EAAAC,EAAAC,cAAA,UAAKhB,KAaT4E,EAAkBpB,aAAe,CAC/B3D,KAAM,GACNqC,KAAM,GACNpC,MAAO,GACPC,MAAO,GACPC,MAAO,IAGM4E,QCjCTI,EAAiB,SAAA9E,GAOjB,IANJwD,EAMIxD,EANJwD,UACAC,EAKIzD,EALJyD,SACAC,EAII1D,EAJJ0D,WACAC,EAGI3D,EAHJ2D,WACAC,EAEI5D,EAFJ4D,YACAC,EACI7D,EADJ6D,aAEMC,EACJN,EAAUO,OAAS,GACnBP,EAAUQ,IAAI,SAACC,EAASU,GAAV,OACZ/D,EAAAC,EAAAC,cAAA,MAAIqD,IAAKF,EAAQlC,IACfnB,EAAAC,EAAAC,cAACiE,EAADvE,OAAAwE,OAAA,CAAmBL,IAAKA,GAASV,OAIvC,OACErD,EAAAC,EAAAC,cAAAF,EAAAC,EAAAyD,SAAA,KACE1D,EAAAC,EAAAC,cAACmE,EAAA,EAAD,CAAOzD,MAAO,CAAE0D,WAAY,gBAAkBC,YAAU,EAACC,OAAK,GAC5DxE,EAAAC,EAAAC,cAAA,aACEF,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,MAAI8D,MAAM,OAAV,KACAhE,EAAAC,EAAAC,cAAA,MAAI8D,MAAM,OAAV,QACAhE,EAAAC,EAAAC,cAAA,MAAI8D,MAAM,OAAV,QACAhE,EAAAC,EAAAC,cAAA,MAAI8D,MAAM,OAAV,SACAhE,EAAAC,EAAAC,cAAA,MAAI8D,MAAM,OAAV,SACAhE,EAAAC,EAAAC,cAAA,MAAI8D,MAAM,OAAV,WAGJhE,EAAAC,EAAAC,cAAA,aAAQgD,IAETN,EAAUO,OAAS,EAClBnD,EAAAC,EAAAC,cAACE,EAAA,EAAD,KACEJ,EAAAC,EAAAC,cAACG,EAAA,EAAD,KACEL,EAAAC,EAAAC,cAACyD,EAAA,EAAD,CACEC,MAAOhB,EACPE,WAAYA,EACZD,SAAUA,EACVE,WAAYA,EACZc,YAAab,EACbC,aAAcA,MAIlB,OAuBViB,EAAexB,aAAe,CAC5BE,UAAW,GACXC,SAAU,KACVC,WAAY,KACZC,WAAY,KACZE,aAAc,kBAAM,OAGPiB,2DCvEMO,6MACnB3F,MAAQ,CACN8D,UAAW,GACX8B,eAAgB,KAChB3B,WAAY,KACZ4B,QAAS,KACT3B,YAAa,EACb4B,UAAU,EACVC,SAAS,EACTC,gBAAiB,CACf/F,KAAM,GACNC,MAAO,GACPC,MAAO,GACPC,MAAO,OAUX6F,oBAAsB,SAAC/B,EAAagC,EAAQJ,GAE1CK,YAAajC,EAAa4B,GAAUM,KAAK,SAAAC,GACvCA,EAAcnC,YAAcmC,EAAcpC,WACtCtD,EAAKsF,oBACH,EACAI,EAAcL,gBACdK,EAAcP,UAEhBnF,EAAKE,SAALC,OAAAwF,EAAA,EAAAxF,CAAA,GAAmBuF,EAAnB,CAAkCL,gBAAiBE,UAI3DK,0BAA4B,SAAAT,GAC1BnF,EAAKE,SAAS,CAAEiF,YAAY,WAAM,IAAA9E,EACmBL,EAAKX,MAAhDkE,EADwBlD,EACxBkD,YAAa8B,EADWhF,EACXgF,gBAAiBF,EADN9E,EACM8E,SAEtCnF,EAAKsF,oBAAoB/B,EAAa8B,EAAiBF,QAI3DU,yBAA2B,SAAAT,GACzBpF,EAAKE,SAAS,CAAEkF,eAGlBC,gBAAkB,SAAAE,GAGhBvF,EAAKE,SAAS,CAAEmF,gBAAiBE,GAAU,WAAM,IAAAO,EACI9F,EAAKX,MAAhDkE,EADuCuC,EACvCvC,YAAa4B,EAD0BW,EAC1BX,SAAUE,EADgBS,EAChBT,gBAE/BU,YAAmBxC,EAAa4B,EAAUE,GAAiBI,KACzD,SAAAC,GACE1F,EAAKE,SAALC,OAAAwF,EAAA,EAAAxF,CAAA,GACKuF,WAOblC,aAAe,SAAAD,GAAe,IAAAyC,EACUhG,EAAKX,MAAnC8F,EADoBa,EACpBb,SAAUE,EADUW,EACVX,gBAElBrF,EAAKsF,oBAAoB/B,EAAa8B,EAAiBF,uFAlDrC,IAAAc,EACiC3F,KAAKjB,MAAhDkE,EADU0C,EACV1C,YAAa8B,EADHY,EACGZ,gBAAiBF,EADpBc,EACoBd,SAEtC7E,KAAKgF,oBAAoB/B,EAAa8B,EAAiBF,oCAkDhD,IAAAe,EAAA5F,KAAA6F,EASH7F,KAAKjB,MAPP8D,EAFKgD,EAELhD,UACA8B,EAHKkB,EAGLlB,eACA3B,EAJK6C,EAIL7C,WACA4B,EALKiB,EAKLjB,QACA3B,EANK4C,EAML5C,YACA4B,EAPKgB,EAOLhB,SACAC,EARKe,EAQLf,QAGF,OACE7E,EAAAC,EAAAC,cAAAF,EAAAC,EAAAyD,SAAA,KACE1D,EAAAC,EAAAC,cAACE,EAAA,EAAD,KACEJ,EAAAC,EAAAC,cAACG,EAAA,EAAD,CACEO,MAAO,CACLiF,QAAS,OACTC,eAAgB,gBAChBC,SAAU,IACVvE,aAAc,WAGhBxB,EAAAC,EAAAC,cAAA,MAAIU,MAAO,CAAEY,aAAc,EAAGW,SAAU,KAAxC,aACAnC,EAAAC,EAAAC,cAAA,QACEU,MAAO,CACLoF,UAAW,WACXvC,MAAO,gBAGRiB,KAIP1E,EAAAC,EAAAC,cAACE,EAAA,EAAD,KACEJ,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAAK4F,GAAI,IACPjG,EAAAC,EAAAC,cAACgG,EAAD,CAAe1G,SAAUO,KAAK+E,oBAGlC9E,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAKQ,MAAO,CAAEY,aAAc,SAC1BxB,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAAKoC,GAAI,GAAID,GAAI,GACfxC,EAAAC,EAAAC,cAACuB,EAAA,EAAD,CACEC,GAAG,eACHV,UAAU,kBACVJ,MAAO,CAAEuF,YAAa,WAEtBnG,EAAAC,EAAAC,cAAA,KACEU,MAAO,CAAEuF,YAAa,UACtBnF,UAAU,sBAPd,UAWAhB,EAAAC,EAAAC,cAACkG,EAAA,EAAD,KACEpG,EAAAC,EAAAC,cAACmG,EAAA,EAAD,CACE5C,MAAM,QACN6C,OAAQ1B,EACR2B,QAAS,kBAAMZ,EAAKN,2BAA0B,KAHhD,UAOArF,EAAAC,EAAAC,cAACmG,EAAA,EAAD,CACE5C,MAAM,QACN6C,QAAS1B,EACT2B,QAAS,kBAAMZ,EAAKN,2BAA0B,KAHhD,SASJrF,EAAAC,EAAAC,cAACG,EAAA,EAAD,CACEoC,GAAI,GACJD,GAAI,EACJ5B,MAAO,CACLiF,QAAS,OACTC,eAAgB,WAChBU,WAAY,WAKdxG,EAAAC,EAAAC,cAACkG,EAAA,EAAD,KACEpG,EAAAC,EAAAC,cAACmG,EAAA,EAAD,CACE5C,MAAM,QACN6C,QAASzB,EACT0B,QAAS,kBAAMZ,EAAKL,0BAAyB,KAE7CtF,EAAAC,EAAAC,cAAA,KAAGc,UAAU,oBAEfhB,EAAAC,EAAAC,cAACmG,EAAA,EAAD,CACE5C,MAAM,QACN6C,OAAQzB,EACR0B,QAAS,kBAAMZ,EAAKL,0BAAyB,KAE7CtF,EAAAC,EAAAC,cAAA,KAAGc,UAAU,sBAKpB6D,EACC7E,EAAAC,EAAAC,cAACuG,EAAD,CACE7D,UAAWA,EACXE,WAAY4B,EACZ7B,SAAU8B,EACV5B,WAAYA,EACZC,YAAaA,EACbC,aAAclD,KAAKkD,eAGrBjD,EAAAC,EAAAC,cAACwG,EAAD,CACE9D,UAAWA,EACXE,WAAY4B,EACZ7B,SAAU8B,EACV5B,WAAYA,EACZC,YAAaA,EACbC,aAAclD,KAAKkD,uBAvLQhC,+ICWjC0C,cACJ,SAAAA,EAAYjE,GAAO,IAAAD,EAAA,OAAAG,OAAA+G,EAAA,EAAA/G,CAAAG,KAAA4D,IACjBlE,EAAAG,OAAAgH,EAAA,EAAAhH,CAAAG,KAAAH,OAAAiH,EAAA,EAAAjH,CAAA+D,GAAAmD,KAAA/G,KAAML,KAsBRqH,QAAU,SAAAC,GAAQ,IAAAC,EAC6BxH,EAAKC,MAA1CoD,EADQmE,EACRnE,WAAYC,EADJkE,EACIlE,WAAYF,EADhBoE,EACgBpE,SAE5BqE,EAAQzH,EAAKX,MAAMoI,MAEnBF,EAAO,GAAKA,EAAOjE,IAKvBmE,EAAQzH,EAAK0H,SAASrE,EAAYkE,EAAMnE,GAGxCpD,EAAKE,SAAS,CAAEuH,UAGhBzH,EAAKC,MAAMuD,aAAa+D,KAvCPvH,EA0CnB0H,SAAW,SAACrE,EAAYE,EAAaH,GAEnCG,EAAcA,GAAe,EAG7BH,EAAWA,GAAY,GAGvB,IAEIuE,EAAWC,EAFTtE,EAAauE,KAAKC,KAAKzE,EAAaD,GAGtCE,GAAc,IAEhBqE,EAAY,EACZC,EAAUtE,GAGNC,GAAe,GACjBoE,EAAY,EACZC,EAAU,IACDrE,EAAc,GAAKD,GAC5BqE,EAAYrE,EAAa,EACzBsE,EAAUtE,IAEVqE,EAAYpE,EAAc,EAC1BqE,EAAUrE,EAAc,GAK5B,IAAMwE,GAAcxE,EAAc,GAAKH,EACjC4E,EAAWH,KAAKI,IAAIF,EAAa3E,EAAW,EAAGC,EAAa,GAG5D6E,EAAQ/H,OAAAgI,EAAA,EAAAhI,CAAIiI,MAAMR,EAAU,EAAID,GAAWU,QAAQ1E,IACvD,SAAA2E,GAAC,OAAIX,EAAYW,IAInB,MAAO,CACLjF,WAAYA,EACZE,YAAaA,EACbH,SAAUA,EACVE,WAAYA,EACZqE,UAAWA,EACXC,QAASA,EACTG,WAAYA,EACZC,SAAUA,EACVE,MAAOA,IAvFTlI,EAAKX,MAAQ,CAAEoI,MAAO,IAHLzH,mFAQbM,KAAKL,MAAMkE,OAAS7D,KAAKL,MAAMkE,MAAMT,QACvCpD,KAAKgH,QAAQhH,KAAKL,MAAMmE,wDAITmE,GAGfjI,KAAKL,MAAMmE,cAAgBmE,EAAUnE,aACrC9D,KAAKL,MAAMoD,aAAekF,EAAUlF,YAEpC/C,KAAKgH,QAAQhH,KAAKL,MAAMmE,8CA2EnB,IAAA8B,EAAA5F,KACHmH,EAAQnH,KAAKjB,MAAMoI,MAEvB,OAAKA,EAAMS,OAAST,EAAMS,MAAMxE,QAAU,EAEjC,KAIP8E,EAAAhI,EAAAC,cAACgI,EAAA,EAAD,CAAYlH,UAAU,kCACpBiH,EAAAhI,EAAAC,cAACiI,EAAA,EAAD,CACEnH,UAAU,YACVoH,SAAgC,IAAtBlB,EAAMlE,aAEhBiF,EAAAhI,EAAAC,cAACmI,EAAA,EAAD,CAAgBrH,UAAU,YAAYuF,QAAS,kBAAMZ,EAAKoB,QAAQ,KAAlE,UAIFkB,EAAAhI,EAAAC,cAACiI,EAAA,EAAD,CACEnH,UAAU,YACVoH,SAAgC,IAAtBlB,EAAMlE,aAEhBiF,EAAAhI,EAAAC,cAACmI,EAAA,EAAD,CACErH,UAAU,YACVuF,QAAS,kBAAMZ,EAAKoB,QAAQG,EAAMlE,YAAc,KAFlD,aAODkE,EAAMS,MAAMvE,IAAI,SAAC4D,EAAMsB,GAAP,OACfL,EAAAhI,EAAAC,cAACiI,EAAA,EAAD,CACE5E,IAAK+E,EACLtH,UAAU,YACVsF,OAAQY,EAAMlE,cAAgBgE,GAE9BiB,EAAAhI,EAAAC,cAACmI,EAAA,EAAD,CACErH,UAAU,YACVuF,QAAS,kBAAMZ,EAAKoB,QAAQC,KAE3BA,MAIPiB,EAAAhI,EAAAC,cAACiI,EAAA,EAAD,CACEnH,UAAU,YACVoH,SAAUlB,EAAMlE,cAAgBkE,EAAMnE,YAEtCkF,EAAAhI,EAAAC,cAACmI,EAAA,EAAD,CACErH,UAAU,YACVuF,QAAS,kBAAMZ,EAAKoB,QAAQG,EAAMlE,YAAc,KAFlD,SAOFiF,EAAAhI,EAAAC,cAACiI,EAAA,EAAD,CACEnH,UAAU,YACVoH,SAAUlB,EAAMlE,cAAgBkE,EAAMnE,YAEtCkF,EAAAhI,EAAAC,cAACmI,EAAA,EAAD,CACErH,UAAU,YACVuF,QAAS,kBAAMZ,EAAKoB,QAAQG,EAAMnE,cAFpC,iBAzJsB9B,aAsKhC0C,EAAkBjB,aA/KG,CACnBkB,MAAO,GACPC,YAAa,EACbhB,SAAU,GACVC,WAAY,KACZC,WAAY,KACZE,aAAc,kBAAM,OA2KPU,uqBC/LT4E,EAAM,6BACNC,EAAW,kBAAMC,aAAaC,QAAQ,UAS/BzD,EAAe,SAAC+B,EAAMpC,GACjC,IAAM+D,EAAQH,IACd,OAAOI,MAAK,GAAAjH,OAAI4G,EAAJ,6BAAA5G,OAAmCqF,EAAnC,KAAArF,OAA2CiD,GAAY,CACjEiE,OAAQ,MACRC,QAAS,CACPC,cAAe,UAAYJ,EAC3BK,eAAgB,sBAGjB9D,KAAK,SAAA+D,GACJ,GAAIA,EAASC,GACX,OAAOD,EAASE,OAElB,MAAM,IAAIC,MAAJ,yBAAAzH,OAAmCsH,EAASI,eAEnDnE,KAAK,SAAAoE,GAwBJ,MARsB,CACpB1G,UAhBgB0G,EAAK1G,UAAUQ,IAAI,SAAAC,GAAO,MAAK,CAC/ClC,GAAIkC,EAAQlC,GACZpC,KAAMsE,EAAQkG,MACdnI,KAAMiC,EAAQjC,KACdpC,MAAOqE,EAAQrE,MACfC,MAAOoE,EAAQpE,MACfC,MAAOmE,EAAQnE,MACfmC,UAAWgC,EAAQmG,cACnBlI,WAAY+B,EAAQoG,+BASpB/E,eAPqB4E,EAAKI,MAQ1B3G,WAPiBuG,EAAKK,MAQtB3G,YAPkBsG,EAAKM,aAQvBjF,QAPc2E,EAAKO,YAYtBC,MAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAI,mBAAoBF,MAWvCvE,EAAqB,SAACwB,EAAMpC,EAAUI,GACjD,IAAM2D,EAAQH,IACd,OAAOI,MAAK,GAAAjH,OAAI4G,EAAJ,6BAAA5G,OAAmCqF,EAAnC,KAAArF,OAA2CiD,GAAY,CACjEiE,OAAQ,OACRC,QAAS,CACPC,cAAe,UAAYJ,EAC3BK,eAAgB,oBAElBkB,KAAMC,KAAKC,UAAUpF,KAEpBE,KAAK,SAAA+D,GAEJ,GADAe,QAAQC,IAAIhB,GACRA,EAASC,GACX,OAAOD,EAASE,OAGlB,MAAM,IAAIC,MAAJ,GAAAzH,OAAasH,EAASI,eAE7BnE,KAAK,SAAAoE,GAwBJ,MARsB,CACpB1G,UAhBgB0G,EAAK1G,UAAUQ,IAAI,SAAAC,GAAO,MAAK,CAC/ClC,GAAIkC,EAAQlC,GACZpC,KAAMsE,EAAQkG,MACdnI,KAAMiC,EAAQjC,KACdpC,MAAOqE,EAAQrE,MACfC,MAAOoE,EAAQpE,MACfC,MAAOmE,EAAQnE,MACfmC,UAAWgC,EAAQmG,cACnBlI,WAAY+B,EAAQoG,+BASpB/E,eAPqB4E,EAAKI,MAQ1B3G,WAPiBuG,EAAKK,MAQtB3G,YAPkBsG,EAAKM,aAQvBjF,QAPc2E,EAAKO,YAYtBC,MAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAI,mBAAoBF,MASvCM,EAAgB,eAAAjL,EAAAQ,OAAA0K,EAAA,EAAA1K,CAAA2K,EAAAtK,EAAAuK,KAAG,SAAAC,EAAMpH,GAAN,IAAAsF,EAAAM,EAAA,OAAAsB,EAAAtK,EAAAyK,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cACxBlC,EAAQH,IADgBmC,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAGLjC,MAAK,GAAAjH,OAAI4G,EAAJ,uBAA8B,CACxDM,OAAQ,OACRC,QAAS,CACPC,cAAe,UAAYJ,EAC3BK,eAAgB,oBAElBkB,KAAMC,KAAKC,UAAU/G,KATK,YAGtB4F,EAHsB0B,EAAAG,MAWf5B,GAXe,CAAAyB,EAAAE,KAAA,eAAAF,EAAAI,OAAA,SAYnB9B,EAASE,QAZU,aActB,IAAIC,MAAJ,GAAAzH,OAAasH,EAASI,aAdA,eAAAsB,EAAAC,KAAA,GAAAD,EAAAK,GAAAL,EAAA,SAAAA,EAAAI,OAAA,SAgBrBf,QAAQC,IAAI,mBAAZU,EAAAK,KAhBqB,yBAAAL,EAAAM,SAAAR,EAAA,kBAAH,gBAAAS,GAAA,OAAA9L,EAAA+L,MAAApL,KAAAqL,YAAA,GA0BhBC,EAAiB,SAAAlK,GAC5B,IAAMwH,EAAQH,IACd,OAAOI,MAAK,GAAAjH,OAAI4G,EAAJ,oCAAA5G,OAA0CR,GAAM,CAC1D0H,OAAQ,MACRC,QAAS,CACPC,cAAe,UAAYJ,EAC3BK,eAAgB,sBAGjB9D,KAAK,SAAA+D,GACJ,GAAIA,EAASC,GACX,OAAOD,EAASE,OAGlB,MAAM,IAAIC,MAAJ,yBAAAzH,OAAmCsH,EAASI,eAEnDnE,KAAK,SAAAoE,GAiBJ,MAhBoB,CAClBvK,KAAMuK,EAAKC,MACXnI,KAAMkI,EAAKlI,KACXlC,MAAOoK,EAAKpK,MACZF,MAAOsK,EAAKtK,MACZC,MAAOqK,EAAKrK,MACZqM,MAAOhC,EAAKgC,MACZlI,IAAKkG,EAAKlG,IACVmI,eAAgBjC,EAAKkC,SACrBC,YAAanC,EAAKoC,SAClBC,mBAAoBrC,EAAKsC,QACzBC,iBAAkBvC,EAAKwC,iBACvBC,SAAUzC,EAAKyC,SACfC,SAAU1C,EAAK2C,WAKlBnC,MAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAI,mBAAoBF,MAUvCmC,EAAuB,SAAC/K,EAAI6F,GACvC,IAAM2B,EAAQH,IACd,OAAOI,MAAK,GAAAjH,OAAI4G,EAAJ,sCAAA5G,OAA4CR,EAA5C,KAAAQ,OAAkDqF,GAAQ,CACpE6B,OAAQ,MACRC,QAAS,CACPC,cAAe,UAAYJ,EAC3BK,eAAgB,sBAGjB9D,KAAK,SAAA+D,GACJ,GAAIA,EAASC,GACX,OAAOD,EAASE,OAGlB,MAAM,IAAIC,MAAJ,yBAAAzH,OAAmCsH,EAASI,eAEnDnE,KAAK,SAAAoE,GAWJ,MAVuB,CACrBhI,WAAYgI,EAAKhI,WACjB6K,gBAAiB7C,EAAKI,MACtB3G,WAAYuG,EAAKvG,WACjB4B,QAAS2E,EAAK3E,QACd3B,YAAasG,EAAKtG,YAClBoJ,SAAU9C,EAAK+C,UACfC,gBAAiBhD,EAAKiD,YAKzBzC,MAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAI,mBAAoBF,MASvCyC,EAAkB,eAAAC,EAAA7M,OAAA0K,EAAA,EAAA1K,CAAA2K,EAAAtK,EAAAuK,KAAG,SAAAkC,EAAMvL,GAAN,IAAAwH,EAAAM,EAAA,OAAAsB,EAAAtK,EAAAyK,KAAA,SAAAiC,GAAA,cAAAA,EAAA/B,KAAA+B,EAAA9B,MAAA,cAC1BlC,EAAQH,IADkBmE,EAAA/B,KAAA,EAAA+B,EAAA9B,KAAA,EAGPjC,MAAK,GAAAjH,OAAI4G,EAAJ,0BAAA5G,OAAgCR,GAAM,CAChE0H,OAAQ,MACRC,QAAS,CACPC,cAAe,UAAYJ,EAC3BK,eAAgB,sBAPU,YAGxBC,EAHwB0D,EAAA7B,MAUjB5B,GAViB,CAAAyD,EAAA9B,KAAA,eAAA8B,EAAA5B,OAAA,SAWrB9B,EAASE,QAXY,aAaxB,IAAIC,MAAJ,yBAAAzH,OAAmCsH,EAASI,aAbpB,eAAAsD,EAAA/B,KAAA,GAAA+B,EAAA3B,GAAA2B,EAAA,SAAAA,EAAA5B,OAAA,SAevBf,QAAQC,IAAI,mBAAZ0C,EAAA3B,KAfuB,yBAAA2B,EAAA1B,SAAAyB,EAAA,kBAAH,gBAAAE,GAAA,OAAAH,EAAAtB,MAAApL,KAAAqL,YAAA,GA2BlByB,EAAgC,SAAC1L,EAAI6F,EAAM8F,GACtD,IAAMnE,EAAQH,IACd,OAAOI,MAAK,GAAAjH,OAAI4G,EAAJ,kCAAA5G,OAAwCR,EAAxC,KAAAQ,OAA8CqF,GAAQ,CAChE6B,OAAQ,OACRC,QAAS,CACPC,cAAe,UAAYJ,EAC3BK,eAAgB,oBAElBkB,KAAMC,KAAKC,UAAU0C,KAEpB5H,KAAK,SAAA+D,GACJ,GAAIA,EAASC,GACX,OAAOD,EAASE,OAGlB,MAAM,IAAIC,MAAJ,yBAAAzH,OAAmCsH,EAASI,eAEnDnE,KAAK,SAAAoE,GAaJ,MAZsB,CACpBjI,UAAWiI,EAAKjI,UAChB0L,eAAgBzD,EAAKI,MACrB3G,WAAYuG,EAAKvG,WACjB4B,QAAS2E,EAAK3E,QACd3B,YAAasG,EAAKtG,YAClBsJ,gBAAiBhD,EAAKgD,gBACtBU,cAAe1D,EAAK0D,cACpBZ,SAAU9C,EAAK+C,UACfY,UAAW3D,EAAK4D,eAKnBpD,MAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAI,mBAAoBF,MAWvCoD,EAAiC,SAAChM,EAAI6F,EAAM8F,GACvD,IAAMnE,EAAQH,IACd,OAAOI,MAAK,GAAAjH,OAAI4G,EAAJ,sCAAA5G,OAA4CR,EAA5C,KAAAQ,OAAkDqF,GAAQ,CACpE6B,OAAQ,OACRC,QAAS,CACPC,cAAe,UAAYJ,EAC3BK,eAAgB,oBAElBkB,KAAMC,KAAKC,UAAU0C,KAEpB5H,KAAK,SAAA+D,GACJ,GAAIA,EAASC,GACX,OAAOD,EAASE,OAGlB,MAAM,IAAIC,MAAJ,yBAAAzH,OAAmCsH,EAASI,eAEnDnE,KAAK,SAAAoE,GAWJ,MAVuB,CACrBhI,WAAYgI,EAAKhI,WACjB6K,gBAAiB7C,EAAKI,MACtB3G,WAAYuG,EAAKvG,WACjB4B,QAAS2E,EAAK3E,QACd3B,YAAasG,EAAKtG,YAClBoJ,SAAU9C,EAAK+C,UACfC,gBAAiBhD,EAAKiD,YAKzBzC,MAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAI,mBAAoBF,MASvCqD,EAAmB,eAAAC,EAAAzN,OAAA0K,EAAA,EAAA1K,CAAA2K,EAAAtK,EAAAuK,KAAG,SAAA8C,EAAMC,GAAN,IAAA5E,EAAAM,EAAA,OAAAsB,EAAAtK,EAAAyK,KAAA,SAAA8C,GAAA,cAAAA,EAAA5C,KAAA4C,EAAA3C,MAAA,cAC3BlC,EAAQH,IADmBgF,EAAA5C,KAAA,EAAA4C,EAAA3C,KAAA,EAGRjC,MAAK,GAAAjH,OAAI4G,EAAJ,6BAAoC,CAC9DM,OAAQ,OACRC,QAAS,CACPC,cAAe,UAAYJ,EAC3BK,eAAgB,oBAElBkB,KAAMC,KAAKC,UAAUmD,KATQ,YAGzBtE,EAHyBuE,EAAA1C,MAWlB5B,GAXkB,CAAAsE,EAAA3C,KAAA,eAAA2C,EAAAzC,OAAA,SAYtB9B,EAASE,QAZa,aAczB,IAAIC,MAAJ,yBAAAzH,OAAmCsH,EAASI,aAdnB,eAAAmE,EAAA5C,KAAA,GAAA4C,EAAAxC,GAAAwC,EAAA,SAAAA,EAAAzC,OAAA,SAgBxBf,QAAQC,IAAI,mBAAZuD,EAAAxC,KAhBwB,yBAAAwC,EAAAvC,SAAAqC,EAAA,kBAAH,gBAAAG,GAAA,OAAAJ,EAAAlC,MAAApL,KAAAqL,YAAA,GA0BnBsC,EAAqB,eAAAC,EAAA/N,OAAA0K,EAAA,EAAA1K,CAAA2K,EAAAtK,EAAAuK,KAAG,SAAAoD,EAAML,GAAN,IAAA5E,EAAAM,EAAA,OAAAsB,EAAAtK,EAAAyK,KAAA,SAAAmD,GAAA,cAAAA,EAAAjD,KAAAiD,EAAAhD,MAAA,cAC7BlC,EAAQH,IADqBqF,EAAAjD,KAAA,EAAAiD,EAAAhD,KAAA,EAGVjC,MAAK,GAAAjH,OAAI4G,EAAJ,gCAAuC,CACjEM,OAAQ,OACRC,QAAS,CACPC,cAAe,UAAYJ,EAC3BK,eAAgB,oBAElBkB,KAAMC,KAAKC,UAAUmD,KATU,YAG3BtE,EAH2B4E,EAAA/C,MAWpB5B,GAXoB,CAAA2E,EAAAhD,KAAA,eAAAgD,EAAA9C,OAAA,SAYxB9B,EAASE,QAZe,aAc3B,IAAIC,MAAJ,yBAAAzH,OAAmCsH,EAASI,aAdjB,eAAAwE,EAAAjD,KAAA,GAAAiD,EAAA7C,GAAA6C,EAAA,SAAAA,EAAA9C,OAAA,SAgB1Bf,QAAQC,IAAI,mBAAZ4D,EAAA7C,KAhB0B,yBAAA6C,EAAA5C,SAAA2C,EAAA,kBAAH,gBAAAE,GAAA,OAAAH,EAAAxC,MAAApL,KAAAqL,YAAA,GAoDrB2C,EAAiB,eAAAC,EAAApO,OAAA0K,EAAA,EAAA1K,CAAA2K,EAAAtK,EAAAuK,KAAG,SAAAyD,EAAO9M,EAAI+M,GAAX,IAAAvF,EAAAwF,EAAAlF,EAAA,OAAAsB,EAAAtK,EAAAyK,KAAA,SAAA0D,GAAA,cAAAA,EAAAxD,KAAAwD,EAAAvD,MAAA,cACzBlC,EAAQH,IACR2F,EAAM,CACV/M,KAAM8M,GAHuBE,EAAAxD,KAAA,EAAAwD,EAAAvD,KAAA,EAONjC,MAAK,GAAAjH,OAAI4G,EAAJ,2BAAA5G,OAAiCR,GAAM,CACjE0H,OAAQ,OACRC,QAAS,CACPC,cAAe,UAAYJ,EAC3BK,eAAgB,oBAElBkB,KAAMC,KAAKC,UAAU+D,KAbM,YAOvBlF,EAPuBmF,EAAAtD,MAehB5B,GAfgB,CAAAkF,EAAAvD,KAAA,eAAAuD,EAAArD,OAAA,SAgBpB9B,EAASE,QAhBW,aAkBvB,IAAIC,MAAJ,GAAAzH,OAAasH,EAASI,aAlBC,eAAA+E,EAAAxD,KAAA,GAAAwD,EAAApD,GAAAoD,EAAA,SAAAA,EAAArD,OAAA,SAoBtBf,QAAQC,IAAI,mBAAZmE,EAAApD,KApBsB,yBAAAoD,EAAAnD,SAAAgD,EAAA,kBAAH,gBAAAI,EAAAC,GAAA,OAAAN,EAAA7C,MAAApL,KAAAqL,YAAA,GA+BjBmD,EAAiB,eAAAC,EAAA5O,OAAA0K,EAAA,EAAA1K,CAAA2K,EAAAtK,EAAAuK,KAAG,SAAAiE,EAAOtN,EAAIuN,GAAX,IAAA/F,EAAAM,EAAA,OAAAsB,EAAAtK,EAAAyK,KAAA,SAAAiE,GAAA,cAAAA,EAAA/D,KAAA+D,EAAA9D,MAAA,cACzBlC,EAAQH,IADiBmG,EAAA/D,KAAA,EAAA+D,EAAA9D,KAAA,EAGNjC,MAAK,GAAAjH,OAAI4G,EAAJ,8BAAA5G,OAAoCR,GAAM,CACpE0H,OAAQ,OACRC,QAAS,CACPC,cAAe,UAAYJ,EAC3BK,eAAgB,oBAElBkB,KAAMC,KAAKC,UAAUsE,KATM,YAGvBzF,EAHuB0F,EAAA7D,MAWhB5B,GAXgB,CAAAyF,EAAA9D,KAAA,eAAA8D,EAAA5D,OAAA,SAYpB9B,EAASE,QAZW,aAcvB,IAAIC,MAAJ,GAAAzH,OAAasH,EAASI,aAdC,eAAAsF,EAAA/D,KAAA,GAAA+D,EAAA3D,GAAA2D,EAAA,SAAAA,EAAA5D,OAAA,SAgBtBf,QAAQC,IAAI,mBAAZ0E,EAAA3D,KAhBsB,yBAAA2D,EAAA1D,SAAAwD,EAAA,kBAAH,gBAAAG,EAAAC,GAAA,OAAAL,EAAArD,MAAApL,KAAAqL,YAAA,GA2BjB0D,EAAc,eAAAC,EAAAnP,OAAA0K,EAAA,EAAA1K,CAAA2K,EAAAtK,EAAAuK,KAAG,SAAAwE,EAAO7N,EAAI8N,GAAX,IAAAtG,EAAAM,EAAA,OAAAsB,EAAAtK,EAAAyK,KAAA,SAAAwE,GAAA,cAAAA,EAAAtE,KAAAsE,EAAArE,MAAA,cACtBlC,EAAQH,IADc0G,EAAAtE,KAAA,EAAAsE,EAAArE,KAAA,EAGHjC,MAAK,GAAAjH,OAAI4G,EAAJ,+BAAA5G,OAAqCR,GAAM,CACrE0H,OAAQ,OACRC,QAAS,CACPC,cAAe,UAAYJ,EAC3BK,eAAgB,oBAElBkB,KAAMC,KAAKC,UAAU6E,KATG,YAGpBhG,EAHoBiG,EAAApE,MAWb5B,GAXa,CAAAgG,EAAArE,KAAA,eAAAqE,EAAAnE,OAAA,SAYjB9B,EAASE,QAZQ,aAcpB,IAAIC,MAAJ,GAAAzH,OAAasH,EAASI,aAdF,eAAA6F,EAAAtE,KAAA,GAAAsE,EAAAlE,GAAAkE,EAAA,SAAAA,EAAAnE,OAAA,SAgBnBf,QAAQC,IAAI,mBAAZiF,EAAAlE,KAhBmB,yBAAAkE,EAAAjE,SAAA+D,EAAA,kBAAH,gBAAAG,EAAAC,GAAA,OAAAL,EAAA5D,MAAApL,KAAAqL,YAAA,GA2BdiE,EAAiB,eAAAC,EAAA1P,OAAA0K,EAAA,EAAA1K,CAAA2K,EAAAtK,EAAAuK,KAAG,SAAA+E,EAAOpO,EAAIqO,GAAX,IAAA7G,EAAAM,EAAA,OAAAsB,EAAAtK,EAAAyK,KAAA,SAAA+E,GAAA,cAAAA,EAAA7E,KAAA6E,EAAA5E,MAAA,cACzBlC,EAAQH,IADiBiH,EAAA7E,KAAA,EAAA6E,EAAA5E,KAAA,EAGNjC,MAAK,GAAAjH,OAAI4G,EAAJ,+BAAA5G,OAAqCR,GAAM,CACrE0H,OAAQ,OACRC,QAAS,CACPC,cAAe,UAAYJ,EAC3BK,eAAgB,oBAElBkB,KAAMC,KAAKC,UAAUoF,KATM,YAGvBvG,EAHuBwG,EAAA3E,MAWhB5B,GAXgB,CAAAuG,EAAA5E,KAAA,eAAA4E,EAAA1E,OAAA,SAYpB9B,EAASE,QAZW,aAcvB,IAAIC,MAAJ,GAAAzH,OAAasH,EAASI,aAdC,eAAAoG,EAAA7E,KAAA,GAAA6E,EAAAzE,GAAAyE,EAAA,SAAAA,EAAA1E,OAAA,SAgBtBf,QAAQC,IAAI,mBAAZwF,EAAAzE,KAhBsB,yBAAAyE,EAAAxE,SAAAsE,EAAA,kBAAH,gBAAAG,EAAAC,GAAA,OAAAL,EAAAnE,MAAApL,KAAAqL,YAAA,GA0BjBwE,EAAiB,SAAAzO,GAC5B,IAAMwH,EAAQH,IACd,OAAOI,MAAK,GAAAjH,OAAI4G,EAAJ,iCAAA5G,OAAuCR,GAAM,CACvD0H,OAAQ,MACRC,QAAS,CACPC,cAAe,UAAYJ,EAC3BK,eAAgB,sBAGjB9D,KAAK,SAAA+D,GACJ,GAAIA,EAASC,GACX,OAAOD,EAASE,OAGlB,MAAM,IAAIC,MAAJ,GAAAzH,OAAasH,EAASI,eAE7BnE,KAAK,SAAAoE,GAwBJ,MAvBqB,CACnBuG,QAAS,CACP1O,GAAImI,EAAKnI,GACTpC,KAAMuK,EAAKvK,KACXC,MAAOsK,EAAKtK,MACZE,MAAOoK,EAAKpK,MACZD,MAAOqK,EAAKrK,MACZ6Q,kBAAmBxG,EAAK+C,UAAUjJ,IAAI,SAAAgJ,GACpC,IAAM2D,EAAiBnQ,OAAOoQ,OAAO5D,EAASA,UAQ9C,MAN0B,CACxBjL,GAAI4O,EAAe,GACnBE,MAAOF,EAAe,GACtBxQ,MAAOwQ,EAAe,GAAGG,kBAM/BC,UAAkC,IAAvB7G,EAAK8G,cAChBC,WAAmC,IAAvB/G,EAAK8G,iBAKpBtG,MAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAI,mBAAoBF,MAUvCuG,EAAiB,eAAAC,EAAA3Q,OAAA0K,EAAA,EAAA1K,CAAA2K,EAAAtK,EAAAuK,KAAG,SAAAgG,EAAOrP,EAAI0O,GAAX,IAAAlH,EAAAM,EAAA,OAAAsB,EAAAtK,EAAAyK,KAAA,SAAA+F,GAAA,cAAAA,EAAA7F,KAAA6F,EAAA5F,MAAA,cACzBlC,EAAQH,IADiBiI,EAAA7F,KAAA,EAAA6F,EAAA5F,KAAA,EAGNjC,MAAK,GAAAjH,OAAI4G,EAAJ,kCAAA5G,OAAwCR,GAAM,CACxE0H,OAAQ,OACRC,QAAS,CACPC,cAAe,UAAYJ,EAC3BK,eAAgB,oBAElBkB,KAAMC,KAAKC,UAAUyF,KATM,YAGvB5G,EAHuBwH,EAAA3F,MAWhB5B,GAXgB,CAAAuH,EAAA5F,KAAA,eAAA4F,EAAA1F,OAAA,SAYpB9B,EAASE,QAZW,aAcvB,IAAIC,MAAJ,GAAAzH,OAAasH,EAASI,aAdC,eAAAoH,EAAA7F,KAAA,GAAA6F,EAAAzF,GAAAyF,EAAA,SAAAA,EAAA1F,OAAA,SAgBtBf,QAAQC,IAAI,mBAAZwG,EAAAzF,KAhBsB,yBAAAyF,EAAAxF,SAAAuF,EAAA,kBAAH,gBAAAE,EAAAC,GAAA,OAAAJ,EAAApF,MAAApL,KAAAqL,YAAA,GA2BjBwF,EAAkB,eAAAC,EAAAjR,OAAA0K,EAAA,EAAA1K,CAAA2K,EAAAtK,EAAAuK,KAAG,SAAAsG,EAAO3P,EAAI0O,GAAX,IAAAlH,EAAAM,EAAA,OAAAsB,EAAAtK,EAAAyK,KAAA,SAAAqG,GAAA,cAAAA,EAAAnG,KAAAmG,EAAAlG,MAAA,cAC1BlC,EAAQH,IADkBuI,EAAAnG,KAAA,EAAAmG,EAAAlG,KAAA,EAGPjC,MAAK,GAAAjH,OAAI4G,EAAJ,6BAAA5G,OAAmCR,GAAM,CACnE0H,OAAQ,OACRC,QAAS,CACPC,cAAe,UAAYJ,EAC3BK,eAAgB,oBAElBkB,KAAMC,KAAKC,UAAUyF,KATO,YAGxB5G,EAHwB8H,EAAAjG,MAWjB5B,GAXiB,CAAA6H,EAAAlG,KAAA,eAAAkG,EAAAhG,OAAA,SAYrB9B,EAASE,QAZY,aAcxB,IAAIC,MAAJ,GAAAzH,OAAasH,EAASI,aAdE,eAAA0H,EAAAnG,KAAA,GAAAmG,EAAA/F,GAAA+F,EAAA,SAAAA,EAAAhG,OAAA,SAgBvBf,QAAQC,IAAI,mBAAZ8G,EAAA/F,KAhBuB,yBAAA+F,EAAA9F,SAAA6F,EAAA,kBAAH,gBAAAE,EAAAC,GAAA,OAAAJ,EAAA1F,MAAApL,KAAAqL,YAAA,GA0BlB8F,EAAoB,eAAAC,EAAAvR,OAAA0K,EAAA,EAAA1K,CAAA2K,EAAAtK,EAAAuK,KAAG,SAAA4G,EAAMjQ,GAAN,IAAAwH,EAAAM,EAAA,OAAAsB,EAAAtK,EAAAyK,KAAA,SAAA2G,GAAA,cAAAA,EAAAzG,KAAAyG,EAAAxG,MAAA,cAC5BlC,EAAQH,IADoB6I,EAAAzG,KAAA,EAAAyG,EAAAxG,KAAA,EAGTjC,MAAK,GAAAjH,OAAI4G,EAAJ,kCAAA5G,OAAwCR,GAAM,CACxE0H,OAAQ,MACRC,QAAS,CACPC,cAAe,UAAYJ,EAC3BK,eAAgB,sBAPY,YAG1BC,EAH0BoI,EAAAvG,MAUnB5B,GAVmB,CAAAmI,EAAAxG,KAAA,eAAAwG,EAAAtG,OAAA,SAWvB9B,EAASE,QAXc,aAa1B,IAAIC,MAAJ,GAAAzH,OAAasH,EAASI,aAbI,eAAAgI,EAAAzG,KAAA,GAAAyG,EAAArG,GAAAqG,EAAA,SAAAA,EAAAtG,OAAA,SAezBf,QAAQC,IAAI,mBAAZoH,EAAArG,KAfyB,yBAAAqG,EAAApG,SAAAmG,EAAA,kBAAH,gBAAAE,GAAA,OAAAH,EAAAhG,MAAApL,KAAAqL,YAAA,GA0BpBmG,EAA2B,SAACpQ,EAAIoM,GAC3C,IAAM5E,EAAQH,IACd,OAAOI,MAAK,GAAAjH,OAAI4G,EAAJ,2BAAA5G,OAAiCR,GAAM,CACjD0H,OAAQ,OACRC,QAAS,CACPC,cAAe,UAAYJ,EAC3BK,eAAgB,oBAElBkB,KAAMC,KAAKC,UAAUmD,KAEpBrI,KAAK,SAAA+D,GACJ,GAAIA,EAASC,GACX,OAAOD,EAASE,OAGlB,MAAM,IAAIC,MAAJ,GAAAzH,OAAasH,EAASI,eAE7BnE,KAAK,SAAAoE,GACJ,IAAK,IAAM/F,KAAO+F,EAAM,CACtB,MAAY,aAAR/F,EACkB,CAClBkI,YAAanC,EAAK/F,IAGH,qBAARA,EACgB,CACvBsI,iBAAkBvC,EAAK/F,IAGR,UAARA,EACK,CACZ+H,MAAOhC,EAAK/F,IAIP+F,KAIZQ,MAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAI,mBAAoBF","file":"static/js/75.55947b7d.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Col, Form, FormGroup, Input, Row } from \"reactstrap\";\n\nexport default class CompaniesForm extends Component {\n  static propTypes = {\n    onFilter: PropTypes.func.isRequired\n  };\n\n  state = {\n    name: \"\",\n    email: \"\",\n    skype: \"\",\n    phone: \"\"\n  };\n\n  handleChange = ({ target: { name, value } }) => {\n    const { onFilter } = this.props;\n\n    this.setState(\n      {\n        [name]: value\n      },\n      () => onFilter(this.state)\n    );\n  };\n\n  render() {\n    const { name, email, skype, phone } = this.state;\n\n    return (\n      <Form>\n        <Row>\n          <Col lg={3}>\n            <FormGroup>\n              <Input\n                type=\"text\"\n                name=\"name\"\n                value={name}\n                placeholder=\"Name\"\n                onChange={this.handleChange}\n              />\n              <i\n                style={{\n                  position: \"absolute\",\n                  top: \"0.6rem\",\n                  right: \"1.75rem\"\n                }}\n                className=\"fa fa-building-o\"\n              />\n            </FormGroup>\n          </Col>\n          <Col lg={3}>\n            <FormGroup>\n              <Input\n                type=\"email\"\n                name=\"email\"\n                value={email}\n                placeholder=\"Email\"\n                onChange={this.handleChange}\n              />\n              <i\n                style={{\n                  position: \"absolute\",\n                  top: \"0.6rem\",\n                  right: \"1.75rem\"\n                }}\n                className=\"fa fa-envelope-o\"\n              />\n            </FormGroup>\n          </Col>\n          <Col lg={3}>\n            <FormGroup>\n              <Input\n                type=\"text\"\n                name=\"skype\"\n                value={skype}\n                placeholder=\"Skype\"\n                onChange={this.handleChange}\n              />\n              <i\n                style={{\n                  position: \"absolute\",\n                  top: \"0.6rem\",\n                  right: \"1.75rem\"\n                }}\n                className=\"fa fa-skype\"\n              />\n            </FormGroup>\n          </Col>\n          <Col lg={3}>\n            <FormGroup>\n              <Input\n                type=\"text\"\n                name=\"phone\"\n                value={phone}\n                placeholder=\"Phone\"\n                onChange={this.handleChange}\n              />\n              <i\n                style={{\n                  position: \"absolute\",\n                  top: \"0.6rem\",\n                  right: \"1.75rem\"\n                }}\n                className=\"fa fa-phone\"\n              />\n            </FormGroup>\n          </Col>\n        </Row>\n      </Form>\n    );\n  }\n}\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Link } from \"react-router-dom\";\nimport {\n  Col,\n  Card,\n  CardImg,\n  CardBody,\n  CardTitle,\n  CardFooter,\n  Row\n} from \"reactstrap\";\nimport \"../Companies.css\";\n\nconst CompaniesListItem = ({ id, logo, name, vacancies, candidates }) => (\n  <Card style={{ marginBottom: \"1rem\" }}>\n    <Link to={`/companies/${id}`} logo={logo}>\n      <CardBody style={{ padding: \"0.5rem\" }}>\n        <CardImg top width=\"100%\" src={logo} alt=\"logo\" />\n        <CardTitle\n          style={{\n            marginBottom: 0,\n            fontSize: 12,\n            textAlign: \"center\",\n            textDecoration: \"none\"\n          }}\n        >\n          {name}\n        </CardTitle>\n      </CardBody>\n    </Link>\n    <CardFooter style={{ padding: \"0.5rem\" }}>\n      <Row style={{ margin: 0 }}>\n        <Col sm=\"6\" xs=\"6\" style={{ padding: \"0 0.25rem\" }}>\n          <div className=\"description-block\">\n            <h5 className=\"description-header ng-binding\">{vacancies}</h5>\n            <span className=\"description-text\">Vacancies</span>\n          </div>\n        </Col>\n        <Col sm=\"6\" xs=\"6\" style={{ padding: \"0 0.25rem\" }}>\n          <div className=\"description-block\">\n            <h5 className=\"description-header ng-binding\">{candidates}</h5>\n            <span className=\"description-text\">Candidates</span>\n          </div>\n        </Col>\n      </Row>\n    </CardFooter>\n  </Card>\n);\n\nCompaniesListItem.propTypes = {\n  id: PropTypes.number.isRequired,\n  logo: PropTypes.string,\n  vacancies: PropTypes.number,\n  candidates: PropTypes.number\n};\n\nCompaniesListItem.defaultProps = {\n  logo: \"\",\n  vacancies: 0,\n  candidates: 0\n};\n\nexport default CompaniesListItem;\n","// Core\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Col, Row } from \"reactstrap\";\n// Components\nimport CompaniesListItem from \"./Item\";\nimport PaginationBackend from \"../../shared/PaginationBackend\";\n\nconst CompaniesList = ({\n  companies,\n  pageSize,\n  totalItems,\n  totalPages,\n  currentPage,\n  onChangePage\n}) => {\n  const companiesJSX =\n    companies.length > 0 ? (\n      companies.map(company => (\n        <Col\n          xs=\"6\"\n          sm=\"4\"\n          md=\"3\"\n          lg=\"2\"\n          key={company.id}\n          style={{ padding: \"0 0.5rem\" }}\n        >\n          <CompaniesListItem {...company} />\n        </Col>\n      ))\n    ) : (\n      <Col>\n        <h3 style={{ color: \"var(--primary)\", textAlign: \"center\" }}>\n          There are no companies matching your filter!\n        </h3>\n      </Col>\n    );\n\n  return (\n    <>\n      <Row>{companiesJSX}</Row>\n      {companies.length > 0 ? (\n        <Row>\n          <Col>\n            <PaginationBackend\n              items={companies}\n              totalItems={totalItems}\n              pageSize={pageSize}\n              totalPages={totalPages}\n              initialPage={currentPage}\n              onChangePage={onChangePage}\n            />\n          </Col>\n        </Row>\n      ) : null}\n    </>\n  );\n};\n\nCompaniesList.propTypes = {\n  companies: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      name: PropTypes.string,\n      logo: PropTypes.string,\n      email: PropTypes.string,\n      skype: PropTypes.string,\n      phone: PropTypes.string\n    })\n  ),\n  currentPage: PropTypes.number.isRequired,\n  pageSize: PropTypes.number,\n  totalItems: PropTypes.number,\n  totalPages: PropTypes.number,\n  onChangePage: PropTypes.func\n};\n\nCompaniesList.defaultProps = {\n  companies: [],\n  pageSize: null,\n  totalItems: null,\n  totalPages: null,\n  onChangePage: () => null\n};\n\nexport default CompaniesList;\n","// Core\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Link } from \"react-router-dom\";\n\nconst CompaniesTableRow = ({ idx, id, name, logo, email, skype, phone }) => (\n  <>\n    <th scope=\"row\">{idx + 1}</th>\n    <td>\n      <Link to={`/companies/${id}`} style={{ color: \"var(--dark)\" }}>\n        {name}\n      </Link>\n    </td>\n    <td>\n      <Link to={`/companies/${id}`}>\n        <img height={25} src={logo} alt=\"logo\" />\n      </Link>\n    </td>\n    <td>{email}</td>\n    <td>{skype}</td>\n    <td>{phone}</td>\n  </>\n);\n\nCompaniesTableRow.propTypes = {\n  id: PropTypes.number.isRequired,\n  name: PropTypes.string,\n  logo: PropTypes.string,\n  email: PropTypes.string,\n  skype: PropTypes.string,\n  phone: PropTypes.string\n};\n\nCompaniesTableRow.defaultProps = {\n  name: \"\",\n  logo: \"\",\n  email: \"\",\n  skype: \"\",\n  phone: \"\"\n};\n\nexport default CompaniesTableRow;\n","// Core\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Col, Row, Table } from \"reactstrap\";\n// Components\nimport CompaniesTableRow from \"./Row\";\nimport PaginationBackend from \"../../shared/PaginationBackend\";\n\nconst CompaniesTable = ({\n  companies,\n  pageSize,\n  totalItems,\n  totalPages,\n  currentPage,\n  onChangePage\n}) => {\n  const companiesJSX =\n    companies.length > 0 &&\n    companies.map((company, idx) => (\n      <tr key={company.id}>\n        <CompaniesTableRow idx={idx} {...company} />\n      </tr>\n    ));\n\n  return (\n    <>\n      <Table style={{ background: \"var(--white)\" }} responsive hover>\n        <thead>\n          <tr>\n            <th scope=\"col\">#</th>\n            <th scope=\"col\">Name</th>\n            <th scope=\"col\">Logo</th>\n            <th scope=\"col\">Email</th>\n            <th scope=\"col\">Skype</th>\n            <th scope=\"col\">Phone</th>\n          </tr>\n        </thead>\n        <tbody>{companiesJSX}</tbody>\n      </Table>\n      {companies.length > 0 ? (\n        <Row>\n          <Col>\n            <PaginationBackend\n              items={companies}\n              totalItems={totalItems}\n              pageSize={pageSize}\n              totalPages={totalPages}\n              initialPage={currentPage}\n              onChangePage={onChangePage}\n            />\n          </Col>\n        </Row>\n      ) : null}\n    </>\n  );\n};\n\nCompaniesTable.propTypes = {\n  companies: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      name: PropTypes.string,\n      logo: PropTypes.string,\n      email: PropTypes.string,\n      skype: PropTypes.string,\n      phone: PropTypes.string\n    })\n  ),\n  currentPage: PropTypes.number.isRequired,\n  pageSize: PropTypes.number,\n  totalItems: PropTypes.number,\n  totalPages: PropTypes.number,\n  onChangePage: PropTypes.func\n};\n\nCompaniesTable.defaultProps = {\n  companies: [],\n  pageSize: null,\n  totalItems: null,\n  totalPages: null,\n  onChangePage: () => null\n};\n\nexport default CompaniesTable;\n","// Core\nimport React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { Button, ButtonGroup, Col, Row } from \"reactstrap\";\n// Components\nimport CompaniesForm from \"./Form\";\nimport CompaniesList from \"./List/List\";\nimport CompaniesTable from \"./Table/Table\";\n// Instruments\nimport { getCompanies, filterAllCompanies } from \"../../utils/api/company\";\nimport \"./Companies.css\";\n\nexport default class Companies extends Component {\n  state = {\n    companies: [],\n    companiesCount: null,\n    totalPages: null,\n    perPage: null,\n    currentPage: 1,\n    isActive: true,\n    isTable: false,\n    filterCompanies: {\n      name: \"\",\n      email: \"\",\n      skype: \"\",\n      phone: \"\"\n    }\n  };\n  // FIXME: sends two requests when component mounts\n  componentDidMount() {\n    const { currentPage, filterCompanies, isActive } = this.state;\n\n    this.requestForCompanies(currentPage, filterCompanies, isActive);\n  }\n\n  requestForCompanies = (currentPage, filter, isActive) => {\n    // const { filterCompanies } = this.state;\n    getCompanies(currentPage, isActive).then(companiesData => {\n      companiesData.currentPage > companiesData.totalPages\n        ? this.requestForCompanies(\n            1,\n            companiesData.filterCompanies,\n            companiesData.isActive\n          )\n        : this.setState({ ...companiesData, filterCompanies: filter });\n    });\n  };\n\n  handleShowActiveCompanies = isActive => {\n    this.setState({ isActive }, () => {\n      const { currentPage, filterCompanies, isActive } = this.state;\n\n      this.requestForCompanies(currentPage, filterCompanies, isActive);\n    });\n  };\n\n  handleShowCompaniesTable = isTable => {\n    this.setState({ isTable });\n  };\n\n  filterCompanies = filter => {\n    // const { filterCompanies } = this.state;\n\n    this.setState({ filterCompanies: filter }, () => {\n      const { currentPage, isActive, filterCompanies } = this.state;\n\n      filterAllCompanies(currentPage, isActive, filterCompanies).then(\n        companiesData => {\n          this.setState({\n            ...companiesData\n          });\n        }\n      );\n    });\n  };\n\n  onChangePage = currentPage => {\n    const { isActive, filterCompanies } = this.state;\n\n    this.requestForCompanies(currentPage, filterCompanies, isActive);\n  };\n\n  render() {\n    const {\n      companies,\n      companiesCount,\n      totalPages,\n      perPage,\n      currentPage,\n      isActive,\n      isTable\n    } = this.state;\n\n    return (\n      <>\n        <Row>\n          <Col\n            style={{\n              display: \"flex\",\n              justifyContent: \"space-between\",\n              maxWidth: 180,\n              marginBottom: \"0.5rem\"\n            }}\n          >\n            <h1 style={{ marginBottom: 0, fontSize: 24 }}>Companies</h1>\n            <span\n              style={{\n                alignSelf: \"flex-end\",\n                color: \"var(--gray)\"\n              }}\n            >\n              {companiesCount}\n            </span>\n          </Col>\n        </Row>\n        <Row>\n          <Col xl={12}>\n            <CompaniesForm onFilter={this.filterCompanies} />\n          </Col>\n        </Row>\n        <Row style={{ marginBottom: \"1rem\" }}>\n          <Col xs={12} sm={6}>\n            <Link\n              to=\"/new-company\"\n              className=\"btn btn-success\"\n              style={{ marginRight: \"0.5rem\" }}\n            >\n              <i\n                style={{ marginRight: \"0.2rem\" }}\n                className=\"fa fa-plus-circle\"\n              />\n              Create\n            </Link>\n            <ButtonGroup>\n              <Button\n                color=\"light\"\n                active={isActive}\n                onClick={() => this.handleShowActiveCompanies(true)}\n              >\n                Active\n              </Button>\n              <Button\n                color=\"light\"\n                active={!isActive}\n                onClick={() => this.handleShowActiveCompanies(false)}\n              >\n                All\n              </Button>\n            </ButtonGroup>\n          </Col>\n          <Col\n            xs={12}\n            sm={6}\n            style={{\n              display: \"flex\",\n              justifyContent: \"flex-end\",\n              alignItems: \"center\"\n            }}\n          >\n            {/* <AppSwitch className=\"mx-1\" color=\"primary\" checked />\n            <div className=\"my-events\">My Companies</div> */}\n            <ButtonGroup>\n              <Button\n                color=\"light\"\n                active={!isTable}\n                onClick={() => this.handleShowCompaniesTable(false)}\n              >\n                <i className=\"fa fa-th-large\" />\n              </Button>\n              <Button\n                color=\"light\"\n                active={isTable}\n                onClick={() => this.handleShowCompaniesTable(true)}\n              >\n                <i className=\"fa fa-th-list\" />\n              </Button>\n            </ButtonGroup>\n          </Col>\n        </Row>\n        {isTable ? (\n          <CompaniesTable\n            companies={companies}\n            totalItems={companiesCount}\n            pageSize={perPage}\n            totalPages={totalPages}\n            currentPage={currentPage}\n            onChangePage={this.onChangePage}\n          />\n        ) : (\n          <CompaniesList\n            companies={companies}\n            totalItems={companiesCount}\n            pageSize={perPage}\n            totalPages={totalPages}\n            currentPage={currentPage}\n            onChangePage={this.onChangePage}\n          />\n        )}\n      </>\n    );\n  }\n}\n","// Core\nimport React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Pagination, PaginationItem, PaginationLink } from \"reactstrap\";\n\nconst propTypes = {\n  items: PropTypes.arrayOf(PropTypes.shape({})),\n  initialPage: PropTypes.number,\n  pageSize: PropTypes.number,\n  totalItems: PropTypes.number,\n  totalPages: PropTypes.number,\n  onChangePage: PropTypes.func\n};\n\nconst defaultProps = {\n  items: [],\n  initialPage: 1,\n  pageSize: 10,\n  totalItems: null,\n  totalPages: null,\n  onChangePage: () => null\n};\n\nclass PaginationBackend extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = { pager: {} };\n  }\n\n  componentDidMount() {\n    // set page if items array isn't empty\n    if (this.props.items && this.props.items.length) {\n      this.setPage(this.props.initialPage);\n    }\n  }\n\n  componentDidUpdate(prevProps) {\n    // reset page if initialPage has changed\n    if (\n      this.props.initialPage !== prevProps.initialPage ||\n      this.props.totalItems !== prevProps.totalItems\n    ) {\n      this.setPage(this.props.initialPage);\n    }\n  }\n\n  setPage = page => {\n    const { totalItems, totalPages, pageSize } = this.props;\n\n    let pager = this.state.pager;\n\n    if (page < 1 || page > totalPages) {\n      return;\n    }\n\n    // get new pager object for specified page\n    pager = this.getPager(totalItems, page, pageSize);\n\n    // update state\n    this.setState({ pager });\n\n    // call change page function in parent component\n    this.props.onChangePage(page);\n  };\n\n  getPager = (totalItems, currentPage, pageSize) => {\n    // default to first page\n    currentPage = currentPage || 1;\n\n    // default page size is 10\n    pageSize = pageSize || 10;\n\n    // calculate total pages\n    const totalPages = Math.ceil(totalItems / pageSize);\n\n    let startPage, endPage;\n    if (totalPages <= 10) {\n      // less than 10 total pages so show all\n      startPage = 1;\n      endPage = totalPages;\n    } else {\n      // more than 10 total pages so calculate start and end pages\n      if (currentPage <= 6) {\n        startPage = 1;\n        endPage = 10;\n      } else if (currentPage + 4 >= totalPages) {\n        startPage = totalPages - 9;\n        endPage = totalPages;\n      } else {\n        startPage = currentPage - 5;\n        endPage = currentPage + 4;\n      }\n    }\n\n    // calculate start and end item indexes\n    const startIndex = (currentPage - 1) * pageSize;\n    const endIndex = Math.min(startIndex + pageSize - 1, totalItems - 1);\n\n    // create an array of pages to ng-repeat in the pager control\n    const pages = [...Array(endPage + 1 - startPage).keys()].map(\n      i => startPage + i\n    );\n\n    // return object with all pager properties required by the view\n    return {\n      totalItems: totalItems,\n      currentPage: currentPage,\n      pageSize: pageSize,\n      totalPages: totalPages,\n      startPage: startPage,\n      endPage: endPage,\n      startIndex: startIndex,\n      endIndex: endIndex,\n      pages: pages\n    };\n  };\n\n  render() {\n    let pager = this.state.pager;\n\n    if (!pager.pages || pager.pages.length <= 1) {\n      // don't display pager if there is only 1 page\n      return null;\n    }\n\n    return (\n      <Pagination className=\"pagination justify-content-end\">\n        <PaginationItem\n          className=\"page-item\"\n          disabled={pager.currentPage === 1 ? true : false}\n        >\n          <PaginationLink className=\"page-link\" onClick={() => this.setPage(1)}>\n            First\n          </PaginationLink>\n        </PaginationItem>\n        <PaginationItem\n          className=\"page-item\"\n          disabled={pager.currentPage === 1 ? true : false}\n        >\n          <PaginationLink\n            className=\"page-link\"\n            onClick={() => this.setPage(pager.currentPage - 1)}\n          >\n            Previous\n          </PaginationLink>\n        </PaginationItem>\n        {pager.pages.map((page, index) => (\n          <PaginationItem\n            key={index}\n            className=\"page-item\"\n            active={pager.currentPage === page ? true : false}\n          >\n            <PaginationLink\n              className=\"page-link\"\n              onClick={() => this.setPage(page)}\n            >\n              {page}\n            </PaginationLink>\n          </PaginationItem>\n        ))}\n        <PaginationItem\n          className=\"page-item\"\n          disabled={pager.currentPage === pager.totalPages ? true : false}\n        >\n          <PaginationLink\n            className=\"page-link\"\n            onClick={() => this.setPage(pager.currentPage + 1)}\n          >\n            Next\n          </PaginationLink>\n        </PaginationItem>\n        <PaginationItem\n          className=\"page-item\"\n          disabled={pager.currentPage === pager.totalPages ? true : false}\n        >\n          <PaginationLink\n            className=\"page-link\"\n            onClick={() => this.setPage(pager.totalPages)}\n          >\n            Last\n          </PaginationLink>\n        </PaginationItem>\n      </Pagination>\n    );\n  }\n}\n\nPaginationBackend.propTypes = propTypes;\nPaginationBackend.defaultProps = defaultProps;\n\nexport default PaginationBackend;\n","const URL = \"http://api.uppeople.co/api\";\nconst getToken = () => localStorage.getItem(\"token\");\n\n/**\n * Fetches all companies from an api\n *\n * @param {Number} page current page\n * @param {Boolean} isActive active companies - true, all companies - false\n * @returns {Promise} Promise object represents operation result\n */\nexport const getCompanies = (page, isActive) => {\n  const token = getToken();\n  return fetch(`${URL}/main/returnAllCompanies/${page}/${isActive}`, {\n    method: \"GET\",\n    headers: {\n      Authorization: \"Bearer \" + token,\n      \"Content-Type\": \"application/json\"\n    }\n  })\n    .then(response => {\n      if (response.ok) {\n        return response.json();\n      }\n      throw new Error(`Error while fetching: ${response.statusText}`);\n    })\n    .then(data => {\n      const companies = data.companies.map(company => ({\n        id: company.id,\n        name: company.nazva,\n        logo: company.logo,\n        email: company.email,\n        skype: company.skype,\n        phone: company.phone,\n        vacancies: company.vacancy_count,\n        candidates: company.candidates_to_company_count\n      }));\n      const companiesCount = data.Count;\n      const totalPages = data.Pages;\n      const currentPage = data.current_page;\n      const perPage = data.per_page;\n\n      const companiesData = {\n        companies,\n        companiesCount,\n        totalPages,\n        currentPage,\n        perPage\n      };\n\n      return companiesData;\n    })\n    .catch(error => console.log(\"error in fetch: \", error));\n};\n\n/**\n * Filters companies\n *\n * @param {Number} page current page\n * @param {Boolean} isActive active companies - true, all companies - false\n * @param {Object} filter { name, email, skype, phone }\n * @returns {Promise} Promise object represents operation result\n */\nexport const filterAllCompanies = (page, isActive, filter) => {\n  const token = getToken();\n  return fetch(`${URL}/main/returnAllCompanies/${page}/${isActive}`, {\n    method: \"POST\",\n    headers: {\n      Authorization: \"Bearer \" + token,\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(filter)\n  })\n    .then(response => {\n      console.log(response);\n      if (response.ok) {\n        return response.json();\n      }\n\n      throw new Error(`${response.statusText}`);\n    })\n    .then(data => {\n      const companies = data.companies.map(company => ({\n        id: company.id,\n        name: company.nazva,\n        logo: company.logo,\n        email: company.email,\n        skype: company.skype,\n        phone: company.phone,\n        vacancies: company.vacancy_count,\n        candidates: company.candidates_to_company_count\n      }));\n      const companiesCount = data.Count;\n      const totalPages = data.Pages;\n      const currentPage = data.current_page;\n      const perPage = data.per_page;\n\n      const companiesData = {\n        companies,\n        companiesCount,\n        totalPages,\n        currentPage,\n        perPage\n      };\n\n      return companiesData;\n    })\n    .catch(error => console.log(\"error in fetch: \", error));\n};\n\n/**\n * Creates new company\n *\n * @param {Object} company new company object\n * @returns {Promise} Promise object represents operation result\n */\nexport const createNewCompany = async company => {\n  const token = getToken();\n  try {\n    const response = await fetch(`${URL}/main/addNewCompany`, {\n      method: \"POST\",\n      headers: {\n        Authorization: \"Bearer \" + token,\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(company)\n    });\n    if (response.ok) {\n      return response.json();\n    }\n    throw new Error(`${response.statusText}`);\n  } catch (error) {\n    return console.log(\"error in fetch: \", error);\n  }\n};\n\n/**\n * Fetches company's info by id from an api\n *\n * @param {Number} id company id\n * @returns {Promise} Promise object represents operation result\n */\nexport const getCompanyInfo = id => {\n  const token = getToken();\n  return fetch(`${URL}/main/viewInformationForCompany/${id}`, {\n    method: \"GET\",\n    headers: {\n      Authorization: \"Bearer \" + token,\n      \"Content-Type\": \"application/json\"\n    }\n  })\n    .then(response => {\n      if (response.ok) {\n        return response.json();\n      }\n\n      throw new Error(`Error while fetching: ${response.statusText}`);\n    })\n    .then(data => {\n      const companyInfo = {\n        name: data.nazva,\n        logo: data.logo,\n        phone: data.phone,\n        email: data.email,\n        skype: data.skype,\n        about: data.about,\n        map: data.map,\n        calendarEvents: data.calendar,\n        sendDetails: data.otpravka,\n        termsOfCooperation: data.uslovia,\n        interviewDetails: data.interview_detail,\n        contacts: data.contacts,\n        managers: data.manager\n      };\n\n      return companyInfo;\n    })\n    .catch(error => console.log(\"error in fetch: \", error));\n};\n\n/**\n * Fetches company's candidates by id from an api\n *\n * @param {Number} id company id\n * @param {Number} page current page\n * @returns {Promise} Promise object represents operation result\n */\nexport const getCompanyCandidates = (id, page) => {\n  const token = getToken();\n  return fetch(`${URL}/main/viewAllCandidatesForCompany/${id}/${page}`, {\n    method: \"GET\",\n    headers: {\n      Authorization: \"Bearer \" + token,\n      \"Content-Type\": \"application/json\"\n    }\n  })\n    .then(response => {\n      if (response.ok) {\n        return response.json();\n      }\n\n      throw new Error(`Error while fetching: ${response.statusText}`);\n    })\n    .then(data => {\n      const candidatesData = {\n        candidates: data.candidates,\n        candidatesCount: data.Count,\n        totalPages: data.totalPages,\n        perPage: data.perPage,\n        currentPage: data.currentPage,\n        platform: data.platforms,\n        candidateStatus: data.statuses\n      };\n\n      return candidatesData;\n    })\n    .catch(error => console.log(\"error in fetch: \", error));\n};\n\n/**\n * Fetches company's comments from an api\n *\n * @param {Number} id company id\n * @returns {Promise} Promise object represents operation result\n */\nexport const getCompanyComments = async id => {\n  const token = getToken();\n  try {\n    const response = await fetch(`${URL}/main/commentsCompany/${id}`, {\n      method: \"GET\",\n      headers: {\n        Authorization: \"Bearer \" + token,\n        \"Content-Type\": \"application/json\"\n      }\n    });\n    if (response.ok) {\n      return response.json();\n    }\n    throw new Error(`Error while fetching: ${response.statusText}`);\n  } catch (error) {\n    return console.log(\"error in fetch: \", error);\n  }\n};\n\n/**\n * Fetches, filters and sorts company's vacancies\n *\n * @param {Number} id company id\n * @param {Number} page current page\n * @param {Object} filterAndSort { date, selectPlatforms, selectSeniorities, defaultStatuses, currentColumn, sort }\n * @returns {Promise} Promise object represents operation result\n */\nexport const filterAndSortCompanyVacancies = (id, page, filterAndSort) => {\n  const token = getToken();\n  return fetch(`${URL}/main/viewAllVacancyInCompany/${id}/${page}`, {\n    method: \"POST\",\n    headers: {\n      Authorization: \"Bearer \" + token,\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(filterAndSort)\n  })\n    .then(response => {\n      if (response.ok) {\n        return response.json();\n      }\n\n      throw new Error(`Error while fetching: ${response.statusText}`);\n    })\n    .then(data => {\n      const vacanciesData = {\n        vacancies: data.vacancies,\n        vacanciesCount: data.Count,\n        totalPages: data.totalPages,\n        perPage: data.perPage,\n        currentPage: data.currentPage,\n        candidateStatus: data.candidateStatus,\n        vacancyStatus: data.vacancyStatus,\n        platform: data.platforms,\n        seniority: data.seniorities\n      };\n\n      return vacanciesData;\n    })\n    .catch(error => console.log(\"error in fetch: \", error));\n};\n\n/**\n * Fetches, filters and sorts company's candidates\n *\n * @param {Number} id company id\n * @param {Number} page current page\n * @param {Object} filterAndSort { email, name, date, selectPlatforms, selectStatuses, currentColumn, sort }\n * @returns {Promise} Promise object represents operation result\n */\nexport const filterAndSortCompanyCandidates = (id, page, filterAndSort) => {\n  const token = getToken();\n  return fetch(`${URL}/main/viewAllCandidatesForCompany/${id}/${page}`, {\n    method: \"POST\",\n    headers: {\n      Authorization: \"Bearer \" + token,\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(filterAndSort)\n  })\n    .then(response => {\n      if (response.ok) {\n        return response.json();\n      }\n\n      throw new Error(`Error while fetching: ${response.statusText}`);\n    })\n    .then(data => {\n      const candidatesData = {\n        candidates: data.candidates,\n        candidatesCount: data.Count,\n        totalPages: data.totalPages,\n        perPage: data.perPage,\n        currentPage: data.currentPage,\n        platform: data.platforms,\n        candidateStatus: data.statuses\n      };\n\n      return candidatesData;\n    })\n    .catch(error => console.log(\"error in fetch: \", error));\n};\n\n/**\n * Changes vacancy status\n *\n * @param {*} content\n * @returns {Promise} Promise object represents operation result\n */\nexport const updateVacancyStatus = async content => {\n  const token = getToken();\n  try {\n    const response = await fetch(`${URL}/main/updateStatusVacancy`, {\n      method: \"POST\",\n      headers: {\n        Authorization: \"Bearer \" + token,\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(content)\n    });\n    if (response.ok) {\n      return response.json();\n    }\n    throw new Error(`Error while fetching: ${response.statusText}`);\n  } catch (error) {\n    return console.log(\"error in fetch: \", error);\n  }\n};\n\n/**\n * Changes candidate status\n *\n * @param {*} content\n * @returns {Promise} Promise object represents operation result\n */\nexport const updateCandidateStatus = async content => {\n  const token = getToken();\n  try {\n    const response = await fetch(`${URL}/main/updateStatusCandidates`, {\n      method: \"POST\",\n      headers: {\n        Authorization: \"Bearer \" + token,\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(content)\n    });\n    if (response.ok) {\n      return response.json();\n    }\n    throw new Error(`Error while fetching: ${response.statusText}`);\n  } catch (error) {\n    return console.log(\"error in fetch: \", error);\n  }\n};\n\n/**\n * Fetches company's settings by id from an api\n *\n * @param {Number} id company id\n * @returns {Promise} Promise object represents operation result\n */\nexport const getCompanySettings = async id => {\n  const token = getToken();\n  try {\n    const response = await fetch(`${URL}/main/viewSettingsCompany/${id}`, {\n      method: \"GET\",\n      headers: {\n        Authorization: \"Bearer \" + token,\n        \"Content-Type\": \"application/json\"\n      }\n    });\n    if (response.ok) {\n      return response.json();\n    }\n    throw new Error(`${response.statusText}`);\n  } catch (error) {\n    return console.log(\"error in fetch: \", error);\n  }\n};\n\n/**\n * Uploads company's logo (image) to the server\n *\n * @param {Number} id company id\n * @param {Object} file image to upload\n * @returns {Promise} Promise object represents operation result\n */\nexport const uploadCompanyLogo = async (id, file) => {\n  const token = getToken();\n  const obj = {\n    logo: file\n  };\n\n  try {\n    const response = await fetch(`${URL}/main/addLogoCompanies/${id}`, {\n      method: \"POST\",\n      headers: {\n        Authorization: \"Bearer \" + token,\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(obj)\n    });\n    if (response.ok) {\n      return response.json();\n    }\n    throw new Error(`${response.statusText}`);\n  } catch (error) {\n    return console.log(\"error in fetch: \", error);\n  }\n};\n\n/**\n * Updates company's settings on the server\n *\n * @param {Number} id company id\n * @param {Object} companyInfo {}\n * @returns {Promise} Promise object represents operation result\n */\nexport const updateCompanyInfo = async (id, companyInfo) => {\n  const token = getToken();\n  try {\n    const response = await fetch(`${URL}/main/editSettingsCompany/${id}`, {\n      method: \"POST\",\n      headers: {\n        Authorization: \"Bearer \" + token,\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(companyInfo)\n    });\n    if (response.ok) {\n      return response.json();\n    }\n    throw new Error(`${response.statusText}`);\n  } catch (error) {\n    return console.log(\"error in fetch: \", error);\n  }\n};\n\n/**\n * Posts user's comment\n *\n * @param {Number} id company id\n * @param {Object} comment contains key 'comment' with text (comment) value\n * @returns {Promise} Promise object represents operation result\n */\nexport const addUserComment = async (id, comment) => {\n  const token = getToken();\n  try {\n    const response = await fetch(`${URL}/main/addCommentForCompany/${id}`, {\n      method: \"POST\",\n      headers: {\n        Authorization: \"Bearer \" + token,\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(comment)\n    });\n    if (response.ok) {\n      return response.json();\n    }\n    throw new Error(`${response.statusText}`);\n  } catch (error) {\n    return console.log(\"error in fetch: \", error);\n  }\n};\n\n/**\n * Removes user's comment\n *\n * @param {Number} id company id\n * @param {Number} commentId comment id\n * @returns {Promise} Promise object represents operation result\n */\nexport const deleteUserComment = async (id, commentId) => {\n  const token = getToken();\n  try {\n    const response = await fetch(`${URL}/main/deleteCommentCompany/${id}`, {\n      method: \"POST\",\n      headers: {\n        Authorization: \"Bearer \" + token,\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(commentId)\n    });\n    if (response.ok) {\n      return response.json();\n    }\n    throw new Error(`${response.statusText}`);\n  } catch (error) {\n    return console.log(\"error in fetch: \", error);\n  }\n};\n\n/**\n * Fetches contact info from an api\n *\n * @param {Number} id contact id\n * @returns {Promise} Promise object represents operation result\n */\nexport const getContactInfo = id => {\n  const token = getToken();\n  return fetch(`${URL}/main/viewEditContactCompany/${id}`, {\n    method: \"GET\",\n    headers: {\n      Authorization: \"Bearer \" + token,\n      \"Content-Type\": \"application/json\"\n    }\n  })\n    .then(response => {\n      if (response.ok) {\n        return response.json();\n      }\n\n      throw new Error(`${response.statusText}`);\n    })\n    .then(data => {\n      const contactState = {\n        contact: {\n          id: data.id,\n          name: data.name,\n          email: data.email,\n          phone: data.phone,\n          skype: data.skype,\n          selectedPlatforms: data.platforms.map(platform => {\n            const arrOfPlatforms = Object.values(platform.platform);\n\n            const selectedPlatforms = {\n              id: arrOfPlatforms[0],\n              label: arrOfPlatforms[1],\n              value: arrOfPlatforms[1].toLowerCase()\n            };\n\n            return selectedPlatforms;\n          })\n        },\n        isChecked: data.all_platforms === 1 ? true : false,\n        isDisabled: data.all_platforms === 1 ? true : false\n      };\n\n      return contactState;\n    })\n    .catch(error => console.log(\"error in fetch: \", error));\n};\n\n/**\n * Adds contact into company profile\n *\n * @param {Number} id company id\n * @param {Object} contact {}\n * @returns {Promise} Promise object represents operation result\n */\nexport const addCompanyContact = async (id, contact) => {\n  const token = getToken();\n  try {\n    const response = await fetch(`${URL}/main/addNewContactForCompany/${id}`, {\n      method: \"POST\",\n      headers: {\n        Authorization: \"Bearer \" + token,\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(contact)\n    });\n    if (response.ok) {\n      return response.json();\n    }\n    throw new Error(`${response.statusText}`);\n  } catch (error) {\n    return console.log(\"error in fetch: \", error);\n  }\n};\n\n/**\n * Updates contact in company profile\n *\n * @param {Number} id contact id\n * @param {Object} contact {}\n * @returns {Promise} Promise object represents operation result\n */\nexport const editCompanyContact = async (id, contact) => {\n  const token = getToken();\n  try {\n    const response = await fetch(`${URL}/main/editContactCompany/${id}`, {\n      method: \"POST\",\n      headers: {\n        Authorization: \"Bearer \" + token,\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(contact)\n    });\n    if (response.ok) {\n      return response.json();\n    }\n    throw new Error(`${response.statusText}`);\n  } catch (error) {\n    return console.log(\"error in fetch: \", error);\n  }\n};\n\n/**\n * Removes contact from company profile\n *\n * @param {Number} id contact id\n * @returns {Promise} Promise object represents operation result\n */\nexport const deleteCompanyContact = async id => {\n  const token = getToken();\n  try {\n    const response = await fetch(`${URL}/main/deleteContactForCompany/${id}`, {\n      method: \"GET\",\n      headers: {\n        Authorization: \"Bearer \" + token,\n        \"Content-Type\": \"application/json\"\n      }\n    });\n    if (response.ok) {\n      return response.json();\n    }\n    throw new Error(`${response.statusText}`);\n  } catch (error) {\n    return console.log(\"error in fetch: \", error);\n  }\n};\n\n/**\n * Updates company info in company profile\n *\n * @param {Number} id company id\n * @param {Object} content {}\n * @returns {Promise} Promise object represents operation result\n */\nexport const updateCompanyInfoProfile = (id, content) => {\n  const token = getToken();\n  return fetch(`${URL}/main/editInformations/${id}`, {\n    method: \"POST\",\n    headers: {\n      Authorization: \"Bearer \" + token,\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(content)\n  })\n    .then(response => {\n      if (response.ok) {\n        return response.json();\n      }\n\n      throw new Error(`${response.statusText}`);\n    })\n    .then(data => {\n      for (const key in data) {\n        if (key === \"otpravka\") {\n          const sendDetails = {\n            sendDetails: data[key]\n          };\n          return sendDetails;\n        } else if (key === \"interview_detail\") {\n          const interviewDetails = {\n            interviewDetails: data[key]\n          };\n          return interviewDetails;\n        } else if (key === \"about\") {\n          const about = {\n            about: data[key]\n          };\n          return about;\n        } else {\n          return data;\n        }\n      }\n    })\n    .catch(error => console.log(\"error in fetch: \", error));\n};\n"],"sourceRoot":""}